#@TODO - HAS TO REBUILD MOCKELEMENT STRUCTURE EVERYTIME, WOULD LIKE TO NOT HAVE TO DO THAT!

require './viewer.scss'

ListStyles = require './liststyles'

Common = window.ObojoboDraft.Common
TextGroup = Common.textGroup.TextGroup
TextGroupEl = Common.chunk.textChunk.TextGroupEl
Chunk = Common.models.Chunk
MockElement = Common.mockDOM.MockElement
MockTextNode = Common.mockDOM.MockTextNode
TextChunk = Common.chunk.TextChunk
SelectionHandler = Common.chunk.textChunk.TextGroupSelectionHandler

selectionHandler = new SelectionHandler()

List = React.createClass
	statics:
		type: 'ObojoboDraft.Chunks.List'
		register: -> OBO.registerChunk List
		getSelectionHandler: (chunk) -> selectionHandler

		createNewNodeData: ->
			textGroup: TextGroup.create(Infinity, { indent:0 })
			indent: 0
			listStyles: new ListStyles('unordered')

		cloneNodeData: (data) ->
			textGroup: data.textGroup.clone()
			indent: data.indent
			listStyles: data.listStyles.clone()

		createNodeDataFromDescriptor: (descriptor) ->
			textGroup: TextGroup.fromDescriptor descriptor.content.textGroup, Infinity, { indent:0 }
			indent: 0
			listStyles: ListStyles.fromDescriptor descriptor.content.listStyles

		getDataDescriptor: (chunk) ->
			data = chunk.modelState

			indent: data.indent
			textGroup: data.textGroup.toDescriptor()
			listStyles: data.listStyles.toDescriptor()

	createMockListElement: (data, indentLevel) ->
		style = data.listStyles.get indentLevel

		tag = if style.type is 'unordered' then 'ul' else 'ol'
		el = new MockElement tag
		el.start = style.start
		el._listStyleType = style.bulletStyle

		el

	addItemToList: (ul, li, lis) ->
		ul.addChild li
		li.listStyleType = ul._listStyleType
		lis.push li

	render: ->
		window.yeOldListHandler = List.commandHandler
		window.yeOldListChunk = @props.chunk

		data = @props.chunk.modelState

		texts = data.textGroup

		curIndentLevel = 0
		curIndex = 0
		rootUl = curUl = @createMockListElement(data, curIndentLevel)
		lis = []

		li = new MockElement 'li'
		@addItemToList curUl, li, lis

		for item, itemIndex in texts.items
			# if this item is lower than the current indent level...
			if item.data.indent < curIndentLevel
				# traverse up the tree looking for our curUl:
				while curIndentLevel > item.data.indent
					curUl = curUl.parent.parent
					curIndentLevel--

			# else, if this item is higher than the current indent level...
			else if item.data.indent > curIndentLevel
				# traverse down the tree...
				while curIndentLevel < item.data.indent
					curIndentLevel++

					# if the last LI's last child isn't a UL, create it
					if curUl.lastChild.lastChild?.type isnt 'ul' and curUl.lastChild.lastChild?.type isnt 'ol'
						newUl = @createMockListElement(data, curIndentLevel)
						newLi = new MockElement 'li'
						@addItemToList newUl, newLi, lis
						curUl.lastChild.addChild newUl
						curUl = newUl
					else
						curUl = curUl.lastChild.lastChild

			# if the lastChild is not an LI or it is an LI that already has text inside
			if not (curUl.lastChild?.type is 'li') or (curUl.lastChild?.lastChild?)
				li = new MockElement 'li'
				@addItemToList curUl, li, lis

			text = new MockTextNode item.text
			text.index = curIndex
			curIndex++

			curUl.lastChild.addChild text


		# console.log 'TREE'
		# console.log '==========================================='
		# @printTree '', rootUl, curUl

		# Remove bullets from nested LIs
		for li in lis
			if li.children?[0]?.nodeType isnt 'text'
				li.listStyleType = 'none'

		# React.createElement 'div', { style: { marginLeft: (data.indent * 20) + 'px' } }, @renderEl(rootUl, 0, 0)
		`<TextChunk className="obojobo-draft--chunks--list pad">
			<div data-indent={data.indent}>
				{this.renderEl(rootUl, 0, 0)}
			</div>
		</TextChunk>`

	# printTree: (indent = '', el, curUl) ->
	# 	if el.nodeType is 'element'
	# 		console.log indent, '<', el.type, '>', (if el is curUl then '***' else '')

	# 		for child in el.children
	# 			@printTree indent + '    ', child, curUl
	# 	else
	# 		console.log indent, '"', el.text.value, '"'

	renderEl: (node, index, indent) ->
		# console.log 'renderEl', arguments

		key = @props.chunk.cid + '-' + indent + '-' + index

		switch node.nodeType
			when 'text'    then `<TextGroupEl text={node.text} key={key} groupIndex={node.index} />`
			when 'element' then React.createElement node.type, { key:key, start:node.start, style: { listStyleType:node.listStyleType } }, @renderChildren(node.children, indent + 1)

	renderChildren: (children, indent) ->
		# console.log 'renderChildren', children
		els = []
		for child, index in children
			els.push @renderEl(child, index, indent)

		els


List.register()

module.exports = List