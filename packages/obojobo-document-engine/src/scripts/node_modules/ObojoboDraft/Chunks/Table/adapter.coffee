GridTextGroup = require './gridtextgroup'

Adapter =
	construct: (model, attrs) ->
		if attrs?.content?.textGroup?
			model.modelState.textGroup = GridTextGroup.fromDescriptor attrs.content.textGroup, Infinity, { indent:0 }
		else
			model.modelState.textGroup = GridTextGroup.create(3, 2)

		if attrs?.content?.header?
			model.modelState.header = attrs.content.header
		else
			model.modelState.header = true

	clone: (model, clone) ->
		clone.modelState.textGroup = model.modelState.textGroup.clone()
		clone.modelState.header = model.modelState.header

	toJSON: (model, json) ->
		json.content.textGroup = model.modelState.textGroup.toDescriptor()
		json.content.header = model.modelState.header

	toText: (model) ->
		longestStringLength = 0
		for textItem in model.modelState.textGroup.items
			longestStringLength = Math.max(longestStringLength, textItem.text.value.length)

		pad = ' '.repeat longestStringLength
		border = '-'.repeat longestStringLength

		text = ''

		text += border + "\n"
		for row in [0...model.modelState.textGroup.numRows]
			# console.log 'row', row
			s = []
			for col in [0...model.modelState.textGroup.numCols]
				# console.log '  col', col
				i = row * model.modelState.textGroup.numCols + col

				# console.log '    i', i
				item = model.modelState.textGroup.items[i]
				s.push (item.text.value + pad).substr(0, pad.length)
			text += "| " + s.join(' | ') + " |" + "\n" + border + "\n"

		text


module.exports = Adapter