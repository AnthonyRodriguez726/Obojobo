Common = window.ObojoboDraft.Common

TextGroup = Common.textGroup.TextGroup
TextGroupItem = Common.textGroup.TextGroupItem
Util = Common.textGroup.TextGroupUtil
StyleableText = Common.text.StyleableText

class GridTextGroup extends TextGroup
	constructor: (numRows, numCols, dataTemplate, initialItems) ->
		super numRows * numCols, dataTemplate, initialItems

		@numRows = numRows
		@numCols = numCols
		@setDimensions()

	addRow: (rowIndex = @numRows, text = null, data = null) ->
		console.log 'addRow', rowIndex
		# 0 | 1 | 2
		# 3 | 4 | 5
		# 6 | 7 | 8

		@maxItems += @numCols

		firstInRowIndex = rowIndex * @numCols
		for i in [firstInRowIndex..firstInRowIndex + @numCols - 1]
			@addAt i, text, data

		@numRows++

		@

	addCol: (colIndex = @numCols, text = null, data = null) ->
		@maxItems += @numRows

		for i in [@numRows-1..0] by -1
			@addAt i * @numCols + colIndex, text, data

		@numCols++

		@

	removeRow: (rowIndex = @numRows - 1) ->
		@maxItems -= @numCols

		firstInRowIndex = rowIndex * @numCols
		for i in [firstInRowIndex..firstInRowIndex + @numCols - 1]
			@remove firstInRowIndex

		@numRows--

		@

	removeCol: (colIndex = @numCols - 1) ->
		@maxItems -= @numRows

		for i in [@numRows-1..0] by -1
			@remove i * @numCols + colIndex

		@numCols--

		@

	setDimensions: (numRows, numCols) ->
		while @numRows < numRows
			@addRow()

		while @numRows > numRows
			@removeRow()

		while @numCols < numCols
			@addCol()

		while @numCols > numCols
			@removeCol()

		@

	getCellPositionForIndex: (index) ->
		console.log 'gcpfi', index
		row = Math.floor(index / @numCols)

		row: row
		col: index - (row * @numCols)

	getIndexForCellPosition: (cellPos) ->
		if cellPos.row < 0 or cellPos.row > @numRows - 1 or cellPos.col < 0 or cellPos.col > @numCols - 1
			return -1

		cellPos.row * @numCols + cellPos.col

	clone: (cloneDataFn = Util.defaultCloneFn) ->
		clonedItems = []

		for item in @items
			clonedItems.push item.clone(cloneDataFn)

		new GridTextGroup @numRows, @numCols, @dataTemplate, clonedItems

	toDescriptor: (dataToDescriptorFn = Util.defaultCloneFn) ->
		desc = []

		for item in @items
			desc.push { text:item.text.getExportedObject(), data:dataToDescriptorFn(item.data) }

		textGroup: desc
		numRows: @numRows
		numCols: @numCols

	__grid_print: ->
		console.log '========================'
		for row in [0...@numRows]
			# console.log 'row', row
			s = []
			for col in [0...@numCols]
				# console.log '  col', col
				i = row * @numCols + col

				# console.log '    i', i
				item = @items[i]
				s.push (item.text.value + '          ').substr(0, 10)
			console.log s
			# console.log '---------------------'


GridTextGroup.fromDescriptor = (descriptor, maxItems, dataTemplate, restoreDataDescriptorFn = Util.defaultCloneFn) ->
	items = []
	for item in descriptor.textGroup
		items.push new TextGroupItem(StyleableText.createFromObject(item.text), restoreDataDescriptorFn(item.data))

	new GridTextGroup descriptor.numRows, descriptor.numCols, dataTemplate, items

GridTextGroup.create = (numRows, numCols, dataTemplate = {}) ->
	group = new GridTextGroup numRows, numCols, dataTemplate
	group.init group.maxItems

	group

# window.GridTextGroup = GridTextGroup

# window.g = new GridTextGroup(2,2)
# g.init(4)
# g.get(0).text.value = 'a0'
# g.get(1).text.value = 'a1'
# g.get(2).text.value = 'b0'
# g.get(3).text.value = 'b1'

module.exports = GridTextGroup
