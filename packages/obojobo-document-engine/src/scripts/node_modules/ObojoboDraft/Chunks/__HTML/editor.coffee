# require './html.scss'

# Common = window.ObojoboDraft.Common

# TextMethods = Common.text.TextMethods
# POS = Common.text.TextPositionMethods
# Chunk = Common.models.Chunk
# oembed = require 'net/oembed' #@TODO #Common.net.OEmbed
# insertHtml = Common.page.insertHTML

# tryOEmbed = (url, chunk, callback) ->
# 	console.log 'tryOEmbed', arguments

# 	oembed url, (res) ->
# 		console.log 'oembed', res

# 		if res.status is 'success'
# 			chunk.markDirty()

# 			ref = document.createElement 'div'
# 			document.body.appendChild ref

# 			insertHtml chunk, res.result.html, ->
# 				callback chunk

# 			return

# 		chunk.modelState.html = "<b>Unable to fetch content for #{res.url}: #{res.error.message}</b>"
# 		chunk.markDirty()
# 		callback chunk


# renderHtml = (chunk, html, callback) ->
# 	ref = document.createElement 'div'
# 	document.body.appendChild ref

# 	insertHtml html, ref, ->
# 		console.log 'TRY OEMBED RETURN HTML', ref
# 		html = ref.innerHTML
# 		chunk.modelState.html = html
# 		ref.parentElement.removeChild ref

# 		callback()



# HTML = React.createClass
# 	statics:
# 		consumableElements: []

# 		insertLabel: ['HTML']
# 		onInsert: (position, referenceChunk, selection, opts, callback) ->
# 			newChunk = Chunk.create @

# 			console.log 'onInsert', opts
# 			url = if opts.url then opts.url else prompt('URL?')

# 			if url?.length > 0
# 				url += '&maxwidth=600'
# 				tryOEmbed url, newChunk, (chunk) ->
# 					console.log 'updoot'
# 					callback newChunk
# 			else
# 				html = prompt('HTML?')
# 				renderHtml newChunk, html, ->
# 					console.log 'html updoot'
# 					callback newChunk

# 		# OBONODE DATA METHODS
# 		# ================================================
# 		createNewNodeData: ->
# 			html: '<span></span>'

# 		cloneNodeData: (data) ->
# 			html: data.html

# 		# SERIALIZATION/DECODE METHODS
# 		# ================================================
# 		createNodeDataFromDescriptor: (descriptor) ->
# 			html: descriptor.content.html

# 		getDataDescriptor: (chunk) ->
# 			html: chunk.modelState.html

# 		# HTML METHODS
# 		# ================================================
# 		createNewNodesFromElement: (el) ->
# 			console.clear()
# 			console.log 'yt', el

# 			data = null

# 			if el.firstElementChild?.getAttribute?('data-url')
# 				data =
# 					url: el.firstElementChild.getAttribute('data-url')

# 			console.log data
# 			[Chunk.create @, data]

# 	# componentWillUpdate: (nextProps, nextprops) ->
# 	# 	console.log 'cwu'
# 	# 	console.log 'cwu'
# 	# 	console.log 'cwu'
# 	# 	console.log 'cwu'
# 	# 	console.log 'cwu', @props.chunk.modelState.html, nextprops.chunk.modelState.html

# 	# 	if @props.chunk.modelState.html isnt nextprops.chunk.modelState.html
# 	# 		console.log 'diff'

# 	# componentDidUpdate: ->
# 	# 	React.findDOMNode(@).innerHTML = ''
# 	# 	React.findDOMNode(@)

# 	shouldComponentUpdate: ->
# 		@props.chunk.needsUpdate

# 	componentDidUpdate: ->
# 		@props.chunk.markUpdated()

# 	render: ->
# 		data = @props.chunk.modelState

# 		# console.log 'rendar', data.html
# 		# @lastRendered

# 		# React.createElement 'div', { contentEditable:false, dangerouslySetInnerHTML:{__html:data.html}, style:{maxWidth:'100%', overflow:'scroll'} }

# 		`<FocusableChunk className="obojobo-draft--chunks--html">
# 			<div dangerouslySetInnerHTML={{__html:data.html}} />
# 		</FocusableChunk>`


# module.exports = HTML