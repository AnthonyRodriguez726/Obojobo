# require './iframe.scss'

# Common = window.ObojoboDraft.Common

# TextMethods = Common.text.TextMethods
# POS = Common.text.TextPositionMethods
# FocusableChunk = Common.chunk.FocusableChunk
# Chunk = Common.models.Chunk
# oembed = 'Common/net/oembed' #@TODO

# tryOEmbed = (url, chunk, callback) ->
# 	console.log 'tryOEmbed', arguments

# 	oembed url, (res) ->
# 		console.log 'oembed', res

# 		if res.status is 'success'
# 			tmp = document.createElement 'div'
# 			document.body.appendChild tmp
# 			tmp.innerHTML = res.result.html
# 			iframe = tmp.children[0]
# 			url = iframe.getAttribute 'src'
# 			scrolling = iframe.getAttribute 'src'
# 			width = iframe.getAttribute 'width'
# 			height = iframe.getAttribute 'height'
# 			document.body.removeChild tmp

# 			console.log 'url be', url, tmp

# 			if url?.length > 0
# 				chunk.modelState.url = url
# 				if res.thumbnail_url?.length > 0
# 					chunk.modelState.thumbnail = res.result.thumbnail_url
# 				if scrolling?.length > 0
# 					chunk.modelState.scrolling = if scrolling.toLowerCase() is 'yes' then true else false
# 				if width?.length > 0
# 					chunk.modelState.width = width
# 				if height?.length > 0
# 					chunk.modelState.height = height

# 				chunk.markDirty()
# 				callback chunk
# 				return

# 		chunk.modelState.url = res.params.url
# 		chunk.markDirty()
# 		callback chunk


# IFrame = React.createClass
# 	statics:
# 		consumableElements: []

# 		insertLabel: ['External Resource']
# 		onInsert: (componentClass, position, referenceChunk, selection, callback) ->
# 			console.log 'onInsert', opts
# 			url = if opts.url then opts.url else prompt('URL?')

# 			newChunk = Chunk.create componentClass

# 			tryOEmbed url, newChunk, (chunk) ->
# 				console.log 'updoot'
# 				callback newChunk


# 			# selection.setFutureCaret atIndex, { groupIndex:0, offset:0 }

# 			newChunk

# 		# OBONODE DATA METHODS
# 		# ================================================
# 		createNewNodeData: ->
# 			url: null
# 			thumbnail: null
# 			scrolling: true
# 			width: 560
# 			height: 315

# 		cloneNodeData: (data) ->
# 			url: data.url
# 			thumbnail: data.html
# 			scrolling: data.scrolling
# 			width: data.width
# 			height: data.height

# 		# SERIALIZATION/DECODE METHODS
# 		# ================================================
# 		createNodeDataFromDescriptor: (descriptor) ->
# 			url: descriptor.content.url
# 			thumbnail: descriptor.content.thumbnail
# 			scrolling: descriptor.content.scrolling
# 			width: descriptor.width
# 			height: descriptor.height

# 		getDataDescriptor: (chunk) ->
# 			url: chunk.modelState.url
# 			thumbnail: chunk.modelState.thumbnail
# 			scrolling: chunk.modelState.scrolling
# 			width: chunk.modelState.width
# 			height: chunk.modelState.height

# 		# HTML METHODS
# 		# ================================================
# 		createNewNodesFromElement: (el) ->
# 			console.clear()
# 			console.log 'yt', el

# 			data = null

# 			if el.firstElementChild?.getAttribute?('data-url')
# 				data =
# 					url: el.firstElementChild.getAttribute('data-url')

# 			console.log data
# 			[Chunk.create @, data]

# 	shouldComponentUpdate: ->
# 		@props.chunk.needsUpdate

# 	componentDidUpdate: ->
# 		@props.chunk.markUpdated()

# 	render: ->
# 		data = @props.chunk.modelState

# 		`<FocusableChunk className="obojobo-draft--chunks--iframe">
# 			<div>
# 				<iframe width={data.width} height={data.height} src={data.url} frameborder="0" allowfullscreen="true" scrolling={data.scrolling} />
# 			</div>
# 		</FocusableChunk>`

# 		# React.createElement 'div', { contentEditable:false, 'data-url':data.url },
# 		# 	React.createElement 'iframe', { width:data.width, height:data.height, src:data.url, frameborder:0, allowfullscreen:true, scrolling:data.scrolling, style:{ border:'none' } }, null


# module.exports = IFrame