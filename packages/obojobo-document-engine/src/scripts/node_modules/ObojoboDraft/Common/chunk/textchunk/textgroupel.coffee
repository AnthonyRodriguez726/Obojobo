emptyChar = require('ObojoboDraft/Common/text/textconstants').EMPTY_CHAR
DOMUtil = require 'ObojoboDraft/Common/page/domutil'
StyleableTextComponent = require 'ObojoboDraft/Common/text/styleabletextcomponent'
Dispatcher = require 'ObojoboDraft/Common/flux/dispatcher'

varRegex = /\{\{(.+?)\}\}/

TextGroupEl = React.createClass
	statics:
		getTextElement: (chunk, groupIndex) ->
			chunk.getDomEl().querySelector("*[data-group-index='#{groupIndex}']")

		getTextElementAtCursor: (virtualCursor) ->
			TextGroupEl.getTextElement virtualCursor.chunk, virtualCursor.data.groupIndex

		getDomPosition: (virtualCursor) ->
			# console.log 'TGE.gDP', virtualCursor

			totalCharactersFromStart = 0

			element = TextGroupEl.getTextElementAtCursor virtualCursor

			# console.log 'element', element

			if not element then return null

			if element?
				# console.log 'tnodes', DOMUtil.getTextNodesInOrder(element), virtualCursor.data.offset
				for textNode in DOMUtil.getTextNodesInOrder(element)
					if totalCharactersFromStart + textNode.nodeValue.length >= virtualCursor.data.offset
						return { textNode:textNode, offset:virtualCursor.data.offset - totalCharactersFromStart }
					totalCharactersFromStart += textNode.nodeValue.length

			# There are no text nodes or something went really wrong, so return 0! ¯\_(ツ)_/¯
			return { textNode:null, offset:0 }

	componentDidUpdate: ->
		console.timeEnd 'textRender'

	render: ->
		console.time 'textRender'

		text = @props.textItem.text

		console.log('text', text)

		if @props.parentModel and text.value.indexOf('{{')
			match = null
			text = text.clone()

			while (match = varRegex.exec(text.value)) isnt null
				variable = match[1]
				event = { text: '' }
				# window.OBO.getTextForVariable(event, variable, @props.parentModel, this.props.moduleData)
				Dispatcher.trigger 'getTextForVariable', event, variable, @props.parentModel
				if event.text is null then event.text = match[1]
				event.text = '' + event.text

				startIndex = text.value.indexOf(match[0], varRegex.lastIndex)
				text.replaceText(startIndex, startIndex + match[0].length, event.text)

		`<span className={'text' + ' align-' + this.props.textItem.data.align} data-group-index={this.props.groupIndex} data-indent={this.props.textItem.data.indent}>
			<StyleableTextComponent text={text} />
		</span>`

window.__gdp = TextGroupEl.getDomPosition

module.exports = TextGroupEl