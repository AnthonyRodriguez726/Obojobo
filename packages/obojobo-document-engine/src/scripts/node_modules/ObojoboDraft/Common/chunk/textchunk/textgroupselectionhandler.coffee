BaseSelectionHandler = require 'ObojoboDraft/Common/chunk/baseselectionhandler'
TextGroupSelection = require 'ObojoboDraft/Common/textgroup/textgroupselection'
TextGroupEl = require './textgroupel'

class TextGroupSelectionHandler extends BaseSelectionHandler
	selectStart: (selection, chunk, asRange = false) ->
		selection.virtual.start = TextGroupSelection.getGroupStartCursor(chunk).virtualCursor
		if not asRange then selection.virtual.collapse()

	selectEnd: (selection, chunk, asRange = false) ->
		selection.virtual.end = TextGroupSelection.getGroupEndCursor(chunk).virtualCursor
		if not asRange then selection.virtual.collapseToEnd()

	selectAll: (selection, chunk) ->
		TextGroupSelection.selectGroup chunk, selection.virtual

	getCopyOfSelection: (selection, chunk, cloneId = false) ->
		clone = chunk.clone cloneId

		position = selection.virtual.getPosition(chunk)
		if position is 'contains' or position is 'start' or position is 'end'
			sel = new TextGroupSelection chunk, selection.virtual

			chunkStart = TextGroupSelection.getGroupStartCursor(chunk)
			chunkEnd   = TextGroupSelection.getGroupEndCursor(chunk)

			clone.modelState.textGroup.deleteSpan sel.end.groupIndex, sel.end.offset, chunkEnd.groupIndex, chunkEnd.offset, true, @mergeTextGroups
			clone.modelState.textGroup.deleteSpan chunkStart.groupIndex, chunkStart.offset, sel.start.groupIndex, sel.start.offset, true, @mergeTextGroups

		clone

	getVirtualSelectionStartData: (selection, chunk) ->
		# console.log('selection.dom', selection)
		if not selection.dom?.startText? then return null
		TextGroupSelection.getCursorDataFromDOM selection.dom.startText, selection.dom.startOffset

	getVirtualSelectionEndData: (selection, chunk) ->
		if not selection.dom?.startText? then return null
		TextGroupSelection.getCursorDataFromDOM selection.dom.endText, selection.dom.endOffset

	getDOMSelectionStart: (selection, chunk) ->
		TextGroupEl.getDomPosition selection.virtual.start

	getDOMSelectionEnd: (selection, chunk) ->
		TextGroupEl.getDomPosition selection.virtual.end

	areCursorsEquivalent: (selectionWhichIsNullTODO, chunk, thisCursor, otherCursor) ->
		thisCursor.chunk is otherCursor.chunk and thisCursor.data.offset is otherCursor.data.offset and thisCursor.data.groupIndex is otherCursor.data.groupIndex

	highlightSelection: (selection, chunk) ->
		chunk.markDirty()

		sel = new TextGroupSelection chunk, selection.virtual

		chunk.modelState.textGroup.styleText sel.start.groupIndex, sel.start.offset, sel.end.groupIndex, sel.end.offset, '_comment', {}

module.exports = TextGroupSelectionHandler