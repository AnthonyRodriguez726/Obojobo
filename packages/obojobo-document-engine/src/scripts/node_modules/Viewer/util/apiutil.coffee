createParsedJsonPromise = (promise) ->
	jsonPromise = new Promise (resolve, reject) ->
		promise
			.then (res) => res.json()
			.then (json) =>
				#@TODO - Only do on dev???
				if json.status is 'error' then console.error(json.value)
				resolve(json)
			.catch (error) => reject(error)

	jsonPromise


APIUtil =
	get: (endpoint) ->
		fetch endpoint, {
			method: 'GET',
			credentials: 'include',
			headers:
				'Accept': 'application/json',
				'Content-Type': 'application/json' #@TODO - Do I need this?
		}

	post: (endpoint, body = {}) ->
		fetch endpoint, {
			method: 'POST',
			credentials: 'include',
			body: JSON.stringify(body),
			headers:
				'Accept': 'application/json',
				'Content-Type': 'application/json'
		}

	postEvent: (lo, eventAction, eventPayload) ->
		createParsedJsonPromise APIUtil.post '/api/events', {
			event:
				action: eventAction,
				draft_id: lo.get('_id')
				draft_rev: lo.get('_rev')
				actor_time: new Date().toISOString()
				payload: eventPayload
		}

	saveState: (lo, state) ->
		APIUtil.postEvent lo, 'saveState', state

	fetchDraft: (id) ->
		createParsedJsonPromise fetch("/api/drafts/#{id}")

	getAttempts: (lo) ->
		createParsedJsonPromise APIUtil.get "/api/drafts/#{lo.get('_id')}/attempts"

	startAttempt: (lo, assessment, questions) ->
		createParsedJsonPromise APIUtil.post('/api/assessments/attempt/start', {
			draftId: lo.get('_id')
			assessmentId: assessment.get('id')
			actor: 4
			questions: '@TODO'
		})

	endAttempt: (attempt) ->
		createParsedJsonPromise APIUtil.post "/api/assessments/attempt/#{attempt.attemptId}/end"

	# recordQuestionResponse: (attempt, question, response) ->
	# 	console.clear()
	# 	console.log arguments
	# 	createParsedJsonPromise APIUtil.post "/api/assessments/attempt/#{attempt.id}/question/#{question.get('id')}", {
	# 		response: response
	# 	}


module.exports = APIUtil