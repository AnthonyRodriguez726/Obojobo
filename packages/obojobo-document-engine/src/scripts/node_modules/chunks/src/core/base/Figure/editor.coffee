require './editor.scss'
require './viewer.scss'

CommandHandler = require './commandhandler'
commandHandler = new CommandHandler()

ObojoboDraft = window.ObojoboDraft
TextGroup = ObojoboDraft.text.TextGroup
Text = ObojoboDraft.components.Text
Anchor = ObojoboDraft.components.Anchor
Chunk = ObojoboDraft.models.Chunk
DOMSelection = ObojoboDraft.page.DOMSelection
Keyboard = ObojoboDraft.page.Keyboard
FocusableChunk = ObojoboDraft.components.FocusableChunk
SingleInputBubble = ObojoboDraft.components.modal.bubble.SingleInputBubble
ChunkUtil = ObojoboDraft.page.ChunkUtil

sizes = ['small', 'medium', 'large']

Figure = React.createClass
	statics:
		type: 'ObojoboDraft.Chunks.Figure'
		register: ->
			OBO.registerChunk Figure, {
				insertItem:
					label: 'Figure'
					icon: require 'svg-url?noquotes!./assets/insert-icon.svg'
					onInsert: ObojoboDraft.chunk.insertWithText
			}
			OBO.addToolbarItem {
				type: 'button'
				label: 'Figure'
				icon: require 'svg-url?noquotes!./assets/toolbar-icon.svg'
				onClick: (toolbarItem, editorState) ->
					newChunk = Chunk.create Figure
					ChunkUtil.replaceSelection newChunk, editorState.selection
					newChunk.selectStart editorState.selection
			}

		getCommandHandler: (chunk) -> commandHandler

		# OBONODE DATA METHODS
		# ================================================
		createNewNodeData: ->
			textGroup: TextGroup.create(1)
			url: null
			size: 'small'

		cloneNodeData: (data) ->
			textGroup: data.textGroup.clone()
			url: data.url
			size: data.size

		# SERIALIZATION/DECODE METHODS
		# ================================================
		createNodeDataFromDescriptor: (descriptor) ->
			textGroup: TextGroup.fromDescriptor descriptor.content.textGroup, 1
			url: descriptor.content.url
			size: descriptor.content.size

		getDataDescriptor: (chunk) ->
			data = chunk.componentContent

			textGroup: data.textGroup.toDescriptor()
			url: data.url
			size: data.size

	setSize: (size) ->
		@props.chunk.markDirty()

		data = @props.chunk.componentContent
		data.size = size

		@props.updateFn()

	nextSize: (event) ->
		event.preventDefault()

		data = @props.chunk.componentContent
		@setSize sizes[(sizes.indexOf(data.size) + 1) % sizes.length]

	onAnchorKeyDown: (event) ->
		switch event.keyCode
			when Keyboard.DELETE, Keyboard.BACKSPACE
				event.preventDefault()

				newChunk = Chunk.create @
				@props.chunk.replaceWith newChunk

				newChunk.selectEnd @props.selection

	setImageURL: ->
		@props.chunk.markDirty()
		@props.editChunk @props.chunk

	onChange: (newValue) ->
		@props.chunk.markDirty()
		console.log 'YT on Change', newValue
		# @props.chunk.markDirty()
		# data = @props.chunk.componentContent
		# data.videoId = newValue
		@setState { userImageURL:newValue }

	onClose: ->
		@props.chunk.markDirty()
		@props.chunk.componentContent.url = @state.userImageURL

		@setState {
			chunk: @props.chunk
		}

		# @props.setTextMode on
		@props.stopEditing()

		@props.selection.setFutureCaret @props.chunk.get('index'), { groupIndex:'anchor:img-anchor', offset:0 }
		@props.updateFn()

	# shouldComponentUpdate: ->
	# 	@props.chunk.needsUpdate

	componentDidUpdate: ->
		@props.chunk.markUpdated()

	render: ->
		data = @props.chunk.componentContent

		focus = null
		if DOMSelection.includes @refs.caption
			focus = 'caption'
		else if @refs?.component?
			anchorNode = @refs.component.getAnchorNode()
			if anchorNode? and DOMSelection.includes anchorNode
				focus = 'anchor'

		`<FocusableChunk
			className={'obojobo-draft--chunks--figure editor ' + data.size}
			ref="component"
			onKeyDown={this.onAnchorKeyDown}
			shouldPreventTab={this.props.shouldPreventTab}
		>
			<figure
				className={(data.textGroup.first.text.length === 0 && focus !== 'caption' ? 'empty-caption' : '') + ' focus-' + focus}
				unselectable="on"
			>
				<div className={'container highlight-on-hover' + (focus === 'anchor' ? ' outline-on-selection' : '')} ref="container">

					<img src={data.url} unselectable="on" />
					<div className="size-controls">
						<button onMouseDown={this.nextSize}>Size</button>
					</div>
					<div className="img-controls">
						<button onMouseDown={this.setImageURL}>Set image from URL</button>
						<button onMouseDown={this.todo}>Upload image</button>
					</div>
				</div>
				<figcaption
					contentEditable="true"
					suppressContentEditableWarning={true}
					ref="caption"
					tabIndex={this.props.shouldPreventTab ? '-1' : ''}
				>
					<Text text={data.textGroup.first.text} groupIndex="0" />
				</figcaption>
			</figure>
			{
				this.props.isEditing
				?
				<SingleInputBubble
					label="Image URL"
					value={this.state.userImageURL}
					onChange={this.onChange}
					onClose={this.onClose}
					onCancel={this.onCancel}
				/>
				:
				null
			}
		</FocusableChunk>`



module.exports = Figure