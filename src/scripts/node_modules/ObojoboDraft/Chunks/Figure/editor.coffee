ObojoboDraft = require 'ObojoboDraft'


# POS = ObojoboDraft.text.TextPositionMethods
TextGroupSelection = ObojoboDraft.text.TextGroupSelection
StyleableText = ObojoboDraft.text.StyleableText
TextGroup = ObojoboDraft.text.TextGroup
Text = ObojoboDraft.components.Text
Anchor = ObojoboDraft.components.Anchor
Chunk = ObojoboDraft.models.Chunk
DOMSelection = ObojoboDraft.page.DOMSelection
Keyboard = ObojoboDraft.page.Keyboard
NonEditableChunk = ObojoboDraft.components.NonEditableChunk
TextGroupCommandHandler = ObojoboDraft.text.TextGroupCommandHandler
SingleInputBubble = ObojoboDraft.components.modal.bubble.SingleInputBubble
DOMUtil = ObojoboDraft.page.DOMUtil

positions = ['left', 'center', 'right']

require './figure.scss'

class CommandHandler extends TextGroupCommandHandler
	splitText: (selection, chunk, shiftKey) ->
		console.log 'splitText', arguments
		chunk.markDirty()

		# info = POS.getCaretInfo selection.chunk.start, chunk
		sel = new TextGroupSelection chunk, selection

		newText = sel.start.text.split sel.start.offset

		newNode = Chunk.create() #@TODO - assumes it has a textGroup
		newNode.componentContent.textGroup.first.text = newText
		chunk.addAfter newNode

		selection.setFutureCaret newNode, { offset: 0, groupIndex: 0 }

	selectStart: (selection, chunk) ->
		selection.setFutureCaret chunk, { groupIndex:'anchor:img-anchor', offset:0 }

	selectEnd: (selection, chunk) ->
		selection.setFutureCaret chunk, { groupIndex:'anchor:img-anchor', offset:0 }

	deleteText: (selection, chunk, deleteForwards) ->
		sel = new TextGroupSelection chunk, selection

		return super(selection, chunk, deleteForwards) if not sel.start.isAnchor

		newChunk = chunk.revert selection
		newChunk.componentContent.textGroup = chunk.componentContent.textGroup.clone()

	acceptAbsorb: (selection, chunkToBeDigested, consumerChunk) ->
		accepted = super selection, chunkToBeDigested, consumerChunk
		if not accepted then return false

		# clone = chunkToBeDigested.clone()
		# console.log 'chunkToBeDigested', chunkToBeDigested.componentContent
		# console.log 'clone', clone.componentContent
		# clone.componentContent.textGroup.first.text.init()

		# chunkToBeDigested.addBefore clone

		accepted

commandHandler = new CommandHandler()

Figure = React.createClass
	statics:
		consumableElements: []
		getCommandHandler: (chunk) -> commandHandler
		insertLabel: ['Image']
		onInsert: (position, referenceChunk, selection, opts, callback) ->
			# # url = prompt('URL?')
			# url = '/img/img.png'

			# newChunk = Chunk.create @, {
			# 	textGroup: TextGroup.create(1)
			# 	position: 'center'
			# 	url: url
			# }

			# # selection.setFutureCaret atIndex, { groupIndex:0, offset:0 }
			# selection.setFutureCaret atIndex, { groupIndex:'anchor:img-anchor', offset:0 }

			# callback newChunk



			url = '/img/img.png'
			newChunk = Chunk.create @

			switch position
				when 'before'
					referenceChunk.addBefore newChunk

				when 'after'
					referenceChunk.addAfter newChunk

			newChunk.selectStart selection

			callback()

		# OBONODE DATA METHODS
		# ================================================
		createNewNodeData: ->
			textGroup: TextGroup.create(1)
			url: null
			position: 'center'

		cloneNodeData: (data) ->
			textGroup: data.textGroup.clone()
			url: data.url
			position: data.position

		# SERIALIZATION/DECODE METHODS
		# ================================================
		createNodeDataFromDescriptor: (descriptor) ->
			textGroup: TextGroup.fromDescriptor descriptor.content.textGroup, 1
			url: descriptor.content.url
			position: descriptor.content.position

		getDataDescriptor: (chunk) ->
			data = chunk.componentContent

			textGroup: data.textGroup.toDescriptor()
			url: data.url
			position: data.position

		# HTML METHODS
		# ================================================
		createNewNodesFromElement: (el) ->
			group = TextGroup.create(1)
			group.first.text = StyleableText.createFromElement(el)

			[
				Chunk.create @, {
					textGroup: group
					indent: 0
				}
			]

	setPosition: (position) ->
		@props.chunk.markDirty()

		data = @props.chunk.componentContent

		data.position = position

		@setState { chunk:@props.chunk }
		@props.updateFn()

	decreasePosition: ->
		data = @props.chunk.componentContent
		index = positions.indexOf(data.position) - 1

		if index < 0 then return

		@setPosition positions[index]

	increasePosition: ->
		data = @props.chunk.componentContent
		index = positions.indexOf(data.position) + 1

		if index > positions.length - 1 then return

		@setPosition positions[index]

	setPositionLeft: (event) ->
		event.preventDefault()
		@setPosition 'left'

	setPositionCenter: (event) ->
		event.preventDefault()
		@setPosition 'center'

	setPositionRight: (event) ->
		event.preventDefault()
		@setPosition 'right'

	onAnchorKeyDown: (event) ->
		switch event.keyCode
			when Keyboard.LEFT_ARROW
				event.preventDefault()
				@decreasePosition()
				return

			when Keyboard.RIGHT_ARROW
				event.preventDefault()
				@increasePosition()
				return

	setImageURL: ->
		@props.chunk.markDirty()
		@props.editChunk @props.chunk

	onChange: (newValue) ->
		@props.chunk.markDirty()
		console.log 'YT on Change', newValue
		# @props.chunk.markDirty()
		# data = @props.chunk.componentContent
		# data.videoId = newValue
		@setState { userImageURL:newValue }

	onClose: ->
		@props.chunk.markDirty()
		@props.chunk.componentContent.url = @state.userImageURL

		@setState {
			chunk: @props.chunk
		}

		# @props.setTextMode on
		@props.stopEditing()

		@props.selection.setFutureCaret @props.chunk.get('index'), { groupIndex:'anchor:img-anchor', offset:0 }
		@props.updateFn()

	# shouldComponentUpdate: ->
	# 	@props.chunk.needsUpdate

	componentDidUpdate: ->
		@props.chunk.markUpdated()

	render: ->
		data = @props.chunk.componentContent

		# focusedInCaption = (new TextGroupSelection @props.selection.chunk, @props.chunk).includes data.textGroup.first
		focusedInCaption = DOMSelection.includes @refs.caption
		focusedInAnchor = DOMSelection.includes @refs.anchorContainer

		`<NonEditableChunk className="obojobo-draft--chunks--figure" ref="component">
			<figure className={data.position + (data.textGroup.first.text.length === 0 && !focusedInCaption ? ' empty-caption' : '') + (focusedInAnchor ? ' focus-anchor' : '')} unselectable="on">
				<div className='anchor-container' ref="anchorContainer">
					<Anchor focusOutline name="img-anchor" onKeyDown={this.onAnchorKeyDown} />
					<img src={data.url} unselectable="on" />
					<div className="position-controls">
						<button onMouseDown={this.setPositionLeft}>Left</button>
						<button onMouseDown={this.setPositionCenter}>Center</button>
						<button onMouseDown={this.setPositionRight}>Right</button>
					</div>
					<div className="img-controls">
						<button onMouseDown={this.setImageURL}>Set image from URL</button>
						<button onMouseDown={this.todo}>Upload image</button>
					</div>
				</div>
				<figcaption contentEditable="true" suppressContentEditableWarning={true} ref="caption">
					<Text text={data.textGroup.first.text} groupIndex="0" />
				</figcaption>
			</figure>
			{ this.props.isEditing ? <SingleInputBubble label="Image URL" value={this.state.userImageURL} onChange={this.onChange} onClose={this.onClose} onCancel={this.onCancel} /> : null }
		</NonEditableChunk>`


module.exports = Figure