ObojoboDraft = require 'ObojoboDraft'

TextGroupCommandHandler = ObojoboDraft.text.TextGroupCommandHandler
TextGroupSelection = ObojoboDraft.text.TextGroupSelection
StyleableText = ObojoboDraft.text.StyleableText
TextGroup = ObojoboDraft.text.TextGroup
Text = ObojoboDraft.components.Text
Chunk = ObojoboDraft.models.Chunk
TextChunk = ObojoboDraft.components.TextChunk


class CommandHandler extends TextGroupCommandHandler
	splitText: (selection, chunk, shiftKey) ->
		chunk.markDirty()

		sel = new TextGroupSelection selection.chunk, chunk

		newText = sel.start.text.split sel.start.offset

		newNode = Chunk.create() #@TODO - assumes it has a textGroup
		newNode.componentContent.textGroup.first.text = newText
		chunk.addAfter newNode

		selection.setFutureCaret newNode, { offset: 0, groupIndex: 0 }


Heading = React.createClass
	statics:
		consumableElements: ['h1', 'h2', 'h3', 'h4', 'h5', 'h6']
		commandHandler: new CommandHandler

		onInsert: (position, referenceChunk, selection, opts, callback) ->
			console.clear()
			console.log 'headin'

			newChunk = Chunk.create @

			switch position
				when 'before'
					referenceChunk.addBefore newChunk

				when 'after'
					referenceChunk.addAfter newChunk

			newChunk.selectStart selection

			console.log 'new chunk', newChunk

			callback()

		# OBONODE DATA METHODS
		# ================================================
		createNewNodeData: ->
			textGroup: TextGroup.create(1)
			headingLevel: 1

		cloneNodeData: (data) ->
			textGroup: data.textGroup.clone()
			headingLevel: data.headingLevel

		# SERIALIZATION/DECODE METHODS
		# ================================================
		createNodeDataFromDescriptor: (descriptor) ->
			textGroup: TextGroup.fromDescriptor descriptor.content.textGroup, 1
			headingLevel: descriptor.content.headingLevel

		getDataDescriptor: (chunk) ->
			data = chunk.componentContent

			textGroup: data.textGroup.toDescriptor()
			headingLevel: data.headingLevel

		# HTML METHODS
		# ================================================
		createNewNodesFromElement: (el) ->
			group = TextGroup.create(1)
			group.first.text = StyleableText.createFromElement(el)

			[
				Chunk.create @, {
					textGroup: group
					headingLevel: parseInt(el.tagName.substr(1))
				}
			]

	getInitialState: ->
		{ chunk:@props.chunk }

	componentWillReceiveProps: (nextProps) ->
		@setState { chunk:nextProps.chunk }

	render: ->
		data = @state.chunk.componentContent
		# console.log 'heading level be all like', data.headingLevel, data

		React.createElement(TextChunk, { className:'obojobo-draft--chunks--heading', indent:data.indent },
			React.createElement('h' + data.headingLevel, null,
				`<Text text={data.textGroup.first.text} groupIndex="0" />`
			)
		)


module.exports = Heading