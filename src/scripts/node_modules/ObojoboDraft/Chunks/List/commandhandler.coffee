Editor = window.Editor
Common = window.ObojoboDraft.Common

TextGroupCommandHandler = Editor.chunk.textChunk.TextGroupCommandHandler
TextGroupSelection = Common.textGroup.TextGroupSelection
Chunk = Common.models.Chunk

module.exports = class CommandHandler extends TextGroupCommandHandler
	recalculateStartValues: (refTextGroup, listStyles) ->
		indents = {}

		for item in refTextGroup.items
			indentLevel = item.data.indent
			if not indents[indentLevel]?
				indents[indentLevel] = 1
			else
				indents[indentLevel]++

		for indentLevel, startAddition of indents
			style = listStyles.getSetStyles indentLevel
			if style.start isnt null
				style.start += startAddition

	onEnter: (selection, chunk, shiftKey) ->
		chunk.markDirty()

		tgs = new TextGroupSelection chunk, selection.virtual
		data = chunk.modelState

		item = data.textGroup.get(tgs.start.groupIndex)

		if item.text.length isnt 0
			return chunk.splitText()


		# if item.text.length is 0
		if item.data.indent > 0
			item.data.indent--

			tgs.setCaretToTextStart tgs.start.groupIndex

			return

		caretInLastItem = tgs.start.text is data.textGroup.last.text

		if not caretInLastItem
			afterNode = chunk.clone()
			afterNode.modelState.textGroup = data.textGroup.splitBefore tgs.start.groupIndex + 1

		inbetweenNode = Chunk.create()

		data.textGroup.remove tgs.start.groupIndex

		chunk.addChildAfter inbetweenNode

		if not caretInLastItem
			@recalculateStartValues data.textGroup, afterNode.modelState.listStyles
			inbetweenNode.addChildAfter afterNode

		if chunk.modelState.textGroup.isEmpty
			chunk.remove()

		inbetweenNode.selectStart()
		# return

		# data.textGroup.splitText tgs.start.groupIndex, tgs.start.offset

		# tgs.setCaretToTextStart tgs.start.groupIndex + 1

	# getTextMenuCommands: (selection, chunk) ->
	# 	commands = super selection, chunk
	# 	commands.push {
	# 		label: 'Unindent'
	# 		fn: (selection, chunk) ->
	# 			chunk.indent true
	# 	}
	# 	commands.push {
	# 		label: 'Indent'
	# 		fn: (selection, chunk) ->
	# 			chunk.indent false
	# 	}

	# 	commands

	deleteSelection: (selection, chunk) ->
		selType = selection.virtual.type
		textGroup = chunk.modelState.textGroup

		super selection, chunk

		# if more than one chunk was selected and the whole list was deleted then assume
		# we want to revert this list to a Text.
		if textGroup.length is 1 and textGroup.first.text.length is 0 and selType is 'chunkSpan'
			chunk.revert()

	deleteText: (selection, chunk, deleteForwards) ->
		chunk.markDirty()

		console.log 'deleteText', @, @recalculateStartValues

		tgs = new TextGroupSelection chunk, selection.virtual
		data = chunk.modelState

		s = tgs.start

		# If backspacing at the start of one of the list items (that isn't the first)
		if not deleteForwards and not s.isFirstText and s.isTextStart and s.textGroupItem.data.indent > 0
			#...then unindent
			s.textGroupItem.data.indent--
			return true

		# if backspacing at the start of an item that is at minimum indent (and we're not attempting to un-indent the whole list)
		if not deleteForwards and s.isTextStart and s.textGroupItem.data.indent is 0 and (s.groupIndex > 0 or data.indent is 0)
			newChunk = Chunk.create()
			#@TODO - this assumes too much, should use 'absorb'
			newChunk.modelState.textGroup.first.text = s.textGroupItem.text

			if s.isFirstText
				top    = chunk
				bottom = chunk.clone()

				bottom.modelState.textGroup.toSlice 1
				@recalculateStartValues bottom.modelState.textGroup, top.modelState.listStyles

				top.replaceWith newChunk
				newChunk.addChildAfter bottom

			else if s.isLastText
				top = chunk

				top.modelState.textGroup.toSlice 0, data.textGroup.length - 1

				top.addChildAfter newChunk
			else
				top    = chunk
				middle = newChunk
				bottom = chunk.clone()

				top.modelState.textGroup.toSlice 0, s.groupIndex
				bottom.modelState.textGroup.toSlice s.groupIndex + 2
				@recalculateStartValues top.modelState.textGroup, bottom.modelState.listStyles

				top.addChildAfter middle
				middle.addChildAfter bottom

			newChunk.selectStart()

			return true

		super selection, chunk, deleteForwards