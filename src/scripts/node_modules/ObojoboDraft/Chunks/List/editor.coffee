#@TODO - HAS TO REBUILD MOCKELEMENT STRUCTURE EVERYTIME, WOULD LIKE TO NOT HAVE TO DO THAT!
require './editor.scss'

Viewer = require './viewer'
ListStyles = require './liststyles'
ListDetector = require './listdetector'

CommandHandler = require './commandhandler'
commandHandler = new CommandHandler()

Common = window.ObojoboDraft.Common
OBO = window.OBO

TextGroup = Common.textGroup.TextGroup
Chunk = Common.models.Chunk
ChunkUtil = Common.chunk.util.ChunkUtil
TextGroupSelection = Common.textGroup.TextGroupSelection
SelectionHandler = Common.chunk.textChunk.TextGroupSelectionHandler

selectionHandler = new SelectionHandler()

onSelectionUpdate = (toolbarItem, editorState, targetListType) ->
	chunk = editorState.selection.startChunk

	if editorState.selection.virtual.type is 'chunkSpan' or not chunk? or chunk.get('type') isnt List.type
		toolbarItem.state = 'off'
		return

	listType = chunk.modelState.listStyles.type
	toolbarItem.state = if listType is targetListType then 'on' else 'off'


List = React.createClass
	statics:
		type: 'ObojoboDraft.Chunks.List'
		register: ->
			OBO.registerChunk List, {
				insertItem:
					label: 'List'
					icon: require 'svg-url?noquotes!./assets/insert-icon.svg'
					onInsert: Common.chunk.util.Insert
			}
			OBO.registerToolbarItem {
				id: 'insertUnorderedList'
				type: 'toggle'
				label: 'Unordered List'
				icon: require 'svg-url?noquotes!./assets/toolbar-icon-bullet.svg'
				onClick: (toolbarItem, editorState) ->
					if toolbarItem.state is 'on'
						newChunk = Chunk.create()
					else
						newChunk = Chunk.create List

					ChunkUtil.replaceTextsWithinSelection editorState.selection, newChunk
				onSelectionUpdate: (toolbarItem, editorState, selection) ->
					onSelectionUpdate toolbarItem, editorState, 'unordered'
			}
			OBO.registerToolbarItem {
				id: 'insertOrderedList'
				type: 'toggle'
				label: 'Ordered List'
				icon: require 'svg-url?noquotes!./assets/toolbar-icon-numeric.svg'
				onClick: (toolbarItem, editorState) ->
					if toolbarItem.state is 'on'
						newChunk = Chunk.create()
					else
						newChunk = Chunk.create List
						newChunk.modelState.listStyles.type = 'ordered'

					ChunkUtil.replaceTextsWithinSelection editorState.selection, newChunk
				onSelectionUpdate: (toolbarItem, editorState, selection) ->
					onSelectionUpdate toolbarItem, editorState, 'ordered'
			}
			OBO.registerTextListener {
				match: (selection, editor) ->
					if selection.virtual.type is 'caret' and selection.startChunk.getComponent() is OBO.componentClassMap.defaultClass and selection.startChunk.modelState.textGroup?.first?
						chunk = selection.startChunk
						tgs = new TextGroupSelection chunk, selection.virtual
						st = tgs.start.textGroupItem.text.value

						listResults = ListDetector st

						if listResults
							newChunk = Chunk.create List

							if listResults.type is 'ordered'
								listStyles = newChunk.modelState.listStyles
								listStyles.type = 'ordered'
								listStyles.set 0, {
									start: listResults.symbolIndex,
									bulletStyle: listResults.symbolStyle
								}

							chunk.addChildBefore newChunk

							tgs.selectText tgs.start.groupIndex

							newChunk.replaceSelection()
							newChunk.deleteSelection()

							editor.renderModule()
			}

		getCommandHandler: (chunk) -> commandHandler
		getSelectionHandler: (chunk) -> selectionHandler

		createNewNodeData: Viewer.createNewNodeData
		cloneNodeData: Viewer.cloneNodeData
		createNodeDataFromDescriptor: Viewer.createNodeDataFromDescriptor
		getDataDescriptor: Viewer.getDataDescriptor

	componentDidUpdate: ->
		@props.chunk.markUpdated()

	shouldComponentUpdate: ->
		@props.chunk.needsUpdate

	render: ->
		`<Viewer {...this.props} />`


List.register()

module.exports = List