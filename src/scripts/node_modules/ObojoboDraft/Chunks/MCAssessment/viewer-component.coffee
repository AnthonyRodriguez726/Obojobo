require './viewer-component.scss'

Common = window.ObojoboDraft.Common

OboComponent = Common.components.OboComponent
Button = Common.components.Button
OboModel = Common.models.OboModel
Dispatcher = Common.flux.Dispatcher

QuestionUtil = window.Viewer.util.QuestionUtil

# @TODO - This wont update if new children are passed in via props

MCAssessment = React.createClass
	getDefaultProps: ->
		score: null
		type: 'practice'

	getInitialState: ->
		shuffledAnswers: @getShuffledAnswers(),
		__responses: new Set(),
		__showAllFeedback: false

	getResponse: ->
		# if not @props.moduleData.questionState then return @createNewResponseObject()
		response = QuestionUtil.getResponse @props.moduleData.questionState, @props.model
		if not response
			response = @createNewResponseObject()

		response

	setResponse: (response) ->
		QuestionUtil.setResponse @props.model.get('id'), response

	createNewResponseObject: ->
		answers: {}
		revealAll: false

	getShuffledAnswers: ->
		children = []
		for model in @props.model.children.models
			children.push model

		_.shuffle(children)

	onAnswerChoiceChange: (model, checked) ->
		# Dispatcher.trigger 'ObojoboDraft.Chunks.MCAssessment.setResponse'
		submitAfter = false

		response = @getResponse()
		if @props.model.modelState.responseType isnt 'pick-all'
			response = @createNewResponseObject()

		if checked
			response.answers[model.get('id')] = model.get('id')
		else
			delete response.answers[model.get('id')]

		@setResponse response

	getSelectedAnswerItemSet: ->
		r = @getResponse()
		console.log(r)
		new Set(Object.keys(@getResponse().answers).map((answerId) ->
			OboModel.models[answerId]
		))

	calculateScore: ->
		# console.clear()
		# console.log @props.model.modelState.responseType

		responses = @getSelectedAnswerItemSet()

		if @props.model.modelState.responseType is 'pick-all'

			for mcChoice in @state.shuffledAnswers
				mcChoiceSelected = responses.has(mcChoice)
				isCorrectAnswer = mcChoice.modelState.score is 100
				isIncorrectAnswer = mcChoice.modelState.score is 0


				console.log 'calc', mcChoiceSelected, mcChoice.modelState.score

				if (isCorrectAnswer and not mcChoiceSelected) or (isIncorrectAnswer and mcChoiceSelected)
					return 0

			return 100
		else
			for mcChoice in @state.shuffledAnswers
				mcChoiceSelected = responses.has(mcChoice)
				isCorrectAnswer = mcChoice.modelState.score is 100
				isIncorrectAnswer = mcChoice.modelState.score is 0

				# console.log '-->', mcChoiceSelected, isCorrectAnswer, isIncorrectAnswer

				if mcChoiceSelected
					if isCorrectAnswer
						return 100
					return 0

		0

	onClickSubmit: (event) ->
		event.preventDefault()

		response = @getResponse()
		response.revealAll = true
		@setResponse response

	onClickRevealAll: (event) ->
		event.preventDefault()

		response = @getResponse()
		response.revealAll = true
		@setResponse response

	onClickReset: (event) ->
		event.preventDefault()
		@reset()

	reset: ->
		QuestionUtil.resetResponse @props.model.get('id')

	render: ->
		responseType = @props.model.modelState.responseType
		responses = @getSelectedAnswerItemSet()
		console.log 'MCAssessment responses', responses

		instructions = switch responseType
			when 'pick-one' then 'Pick the correct answer'
			when 'pick-one-multiple-correct' then 'Pick a correct answer'
			when 'pick-all' then 'Pick all the correct answers'

		`<OboComponent
			model={this.props.model}
			tag="form"
			className={'obojobo-draft--chunks--mc-assessment' + (' is-response-type-' + this.props.model.modelState.responseType) + (this.state.showAllFeedback ? ' is-showing-all-feedback' : ' is-not-showing-all-feedback') + (this.props.score === null ? ' is-unscored' : ' is-scored')}
		>
			<span className="instructions pad">{instructions}:</span>
			{
				this.state.shuffledAnswers.map((function(child, index) {
					if(child.get('type') !== 'ObojoboDraft.Chunks.MCAssessment.MCChoice')
					{
						return null;
					}

					var isSelected = responses.has(child)
					var Component = child.getComponentClass()
					return <Component
						key={child.get('id')}
						model={child}
						isSelected={isSelected}
						showFeedback={this.props.type === 'practice' && (this.state.showAllFeedback || (isSelected && responseType !== 'pick-all'))}
						type={this.props.type}
						onChange={this.onAnswerChoiceChange}
					/>
				}).bind(this))
			}
			{
				this.props.type === 'practice'
				?
				<div className="submit">
					{
						responseType === 'pick-all'
						?
						<Button
							onClick={this.onClickSubmit}
							disabled={this.state.showAllFeedback}
							value="Check Your Answers"
						/>
						:
						<Button
							onClick={this.onClickRevealAll}
							disabled={this.state.showAllFeedback}
							value="Reveal All Answers"
						/>
					}
					<span className="divider"> - </span>
					<Button
						onClick={this.onClickReset}
						value="Reset"
					/>
				</div>
				:
				<div className="submit" />
			}
		</OboComponent>`

module.exports = MCAssessment