require './viewer-component.scss'

Common = window.ObojoboDraft.Common

OboComponent = Common.components.OboComponent
Button = Common.components.Button
OboModel = Common.models.OboModel
Dispatcher = Common.flux.Dispatcher
DOMUtil = Common.page.DOMUtil

QuestionUtil = window.Viewer.util.QuestionUtil
ScoreUtil = window.Viewer.util.ScoreUtil

# @TODO - This wont update if new children are passed in via props

MCAssessment = React.createClass
	calculateScore: ->
		correct = new Set()
		responses = new Set()

		for child in @props.model.children.models
			if child.modelState.score is 100
				correct.add child.get('id')

			if QuestionUtil.getResponse @props.moduleData.questionState, child
				# return child.modelState.score
				responses.add child.get('id')

		switch @props.model.modelState.responseType
			when 'pick-all'
				if correct.size isnt responses.size then return 0
				correct.forEach (id) -> if not responses.has(id) then return 0
				return 100

			else # pick-one | pick-one-multiple-correct
				for id in Array.from(correct)
					if responses.has(id) then return 100

				return 0

	onClickSubmit: (event) ->
		# alert('not working')
		event.preventDefault()

		ScoreUtil.setScore @props.model.get('id'), @calculateScore()

		# response = @getResponse()
		# response.revealAll = true
		# @setResponse response

	onClickRevealAll: (event) ->
		# alert('not working')
		event.preventDefault()

		QuestionUtil.setData @props.model.get('id'), {
			revealAll: true
		}

	onClickReset: (event) ->
		event.preventDefault()
		@reset()

	reset: ->
		for child in @props.model.children.models
			QuestionUtil.resetResponse child.get('id')

		QuestionUtil.clearData @props.model.get('id')
		ScoreUtil.clearScore @props.model.get('id')

	onClick: (event) ->
		mcChoiceEl = DOMUtil.findParentWithAttr event.target, 'data-type', 'ObojoboDraft.Chunks.MCAssessment.MCChoice'
		return if not mcChoiceEl

		mcChoiceId = mcChoiceEl.getAttribute('data-id')
		return if not mcChoiceId

		if @getScore() isnt null then @reset()

		switch @props.model.modelState.responseType
			when 'pick-all'
				console.log('SETTING', mcChoiceId, 'TO', not QuestionUtil.getResponse(@props.moduleData.questionState, OboModel.models[mcChoiceId]) )
				console.log(@props.moduleData.questionState)
				QuestionUtil.recordResponse mcChoiceId, not QuestionUtil.getResponse(@props.moduleData.questionState, OboModel.models[mcChoiceId])

			else # pick-one | pick-one-multiple-correct
				for child in @props.model.children.models
					QuestionUtil.resetResponse(child.get('id'))

				QuestionUtil.recordResponse mcChoiceId, true

	getScore: ->
		ScoreUtil.getScoreForModel @props.moduleData.scoreState, @props.model

	render: ->
		responseType = @props.model.modelState.responseType

		instructions = switch responseType
			when 'pick-one' then 'Pick the correct answer'
			when 'pick-one-multiple-correct' then 'Pick a correct answer'
			when 'pick-all' then 'Pick all the correct answers'

		revealAll = QuestionUtil.getData(@props.moduleData.questionState, @props.model)?.revealAll
		score = @getScore()
		questionSubmitted = score isnt null

		`<OboComponent
			model={this.props.model}
			onClick={this.onClick}
			tag="form"
			className={'obojobo-draft--chunks--mc-assessment' + (' is-response-type-' + this.props.model.modelState.responseType) + (revealAll ? ' is-revealing-all' : ' is-not-revealing-all') + (score === null ? ' is-unscored' : ' is-scored')}
		>
			<span className="instructions pad">{instructions}:</span>
			{
				this.props.model.children.models.map((function(child, index) {
					if(child.get('type') !== 'ObojoboDraft.Chunks.MCAssessment.MCChoice')
					{
						return null;
					}

					var Component = child.getComponentClass()
					return <Component
						key={child.get('id')}
						model={child}
						moduleData={this.props.moduleData}
						responseType={responseType}
						revealAll={revealAll}
						questionSubmitted={questionSubmitted}

					/>
				}).bind(this))
			}
			{
				<div className="submit">
					<Button
						onClick={this.onClickSubmit}
						disabled={questionSubmitted}
						value="Check Your Answer"
					/>
					{
						questionSubmitted
						?
						<div className="reveal-all-button">
							<span className="divider"> - </span>
							<Button
								onClick={this.onClickRevealAll}
								disabled={revealAll}
								value="Reveal All Answers"
							/>
						</div>
						:
						null
					}
					<div className="reset-button">
						<Button
							altAction
							onClick={this.onClickReset}
							value="Reset"
						/>
					</div>
				</div>
			}
		</OboComponent>`

module.exports = MCAssessment