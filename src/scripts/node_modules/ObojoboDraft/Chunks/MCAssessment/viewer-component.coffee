require './viewer-component.scss'

ReactCSSTransitionGroup = React.addons.CSSTransitionGroup

Common = window.ObojoboDraft.Common

OboComponent = Common.components.OboComponent
Button = Common.components.Button
OboModel = Common.models.OboModel
Dispatcher = Common.flux.Dispatcher
DOMUtil = Common.page.DOMUtil
OboModel = Common.models.OboModel
# FocusUtil = Common.util.FocusUtil

QuestionUtil = window.Viewer.util.QuestionUtil
ScoreUtil = window.Viewer.util.ScoreUtil

# @TODO - This wont update if new children are passed in via props

MCAssessment = React.createClass
	# getInitialState: ->
	# 	showingSolution: false

	componentWillMount: ->
		shuffledIds = QuestionUtil.getData(@props.moduleData.questionState, @props.model, 'shuffledIds')
		if not shuffledIds
			shuffledIds = _.shuffle(@props.model.children.models).map (model) -> model.get('id')
			QuestionUtil.setData(@props.model.get('id'), 'shuffledIds', shuffledIds)

	getResponseData: ->
		correct = new Set()
		responses = new Set()

		for child in @props.model.children.models
			if child.modelState.score is 100
				correct.add child.get('id')

			if QuestionUtil.getResponse @props.moduleData.questionState, child
				# return child.modelState.score
				responses.add child.get('id')

		correct: correct
		responses: responses

	calculateScore: ->
		responseData = @getResponseData()
		correct = responseData.correct
		responses = responseData.responses

		switch @props.model.modelState.responseType
			when 'pick-all'
				if correct.size isnt responses.size then return 0
				correct.forEach (id) -> if not responses.has(id) then return 0
				return 100

			else # pick-one | pick-one-multiple-correct
				for id in Array.from(correct)
					if responses.has(id) then return 100

				return 0

	onClickSubmit: (event) ->
		event.preventDefault()
		@updateScore()

	updateScore: ->
		ScoreUtil.setScore @props.model.parent.get('id'), @calculateScore()

	onClickUndoRevealAll: (event) ->
		event.preventDefault()
		QuestionUtil.setData @props.model.get('id'), 'revealAll', false

	onClickRevealAll: (event) ->
		event.preventDefault()
		QuestionUtil.setData @props.model.get('id'), 'revealAll', true

	onClickReset: (event) ->
		event.preventDefault()
		@reset()

	reset: ->
		@clearRevealAll()
		@clearResponses()
		@clearScore()

	clearRevealAll: ->
		QuestionUtil.clearData @props.model.get('id'), 'revealAll'
		# QuestionUtil.clearData @props.model.get('id'), 'shuffledIds'

	clearResponses: ->
		for child in @props.model.children.models
			QuestionUtil.resetResponse child.get('id')

	clearScore: ->
		ScoreUtil.clearScore @props.model.parent.get('id')

	onClick: (event) ->
		mcChoiceEl = DOMUtil.findParentWithAttr event.target, 'data-type', 'ObojoboDraft.Chunks.MCAssessment.MCChoice'
		return if not mcChoiceEl

		mcChoiceId = mcChoiceEl.getAttribute('data-id')
		return if not mcChoiceId

		revealAll = @isRevealingAll()

		if @getScore() isnt null
			@reset()

		switch @props.model.modelState.responseType
			when 'pick-all'
				console.log('SETTING', mcChoiceId, 'TO', not QuestionUtil.getResponse(@props.moduleData.questionState, OboModel.models[mcChoiceId]) )
				console.log(@props.moduleData.questionState)
				QuestionUtil.recordResponse mcChoiceId, not QuestionUtil.getResponse(@props.moduleData.questionState, OboModel.models[mcChoiceId])

			else # pick-one | pick-one-multiple-correct
				for child in @props.model.children.models
					QuestionUtil.resetResponse(child.get('id'))

				QuestionUtil.recordResponse mcChoiceId, true



	getScore: ->
		ScoreUtil.getScoreForModel @props.moduleData.scoreState, @props.model.parent

	# showSolution: (event) ->
	# 	event.preventDefault()
	# 	@setState { showingSolution:true }

	isRevealingAll: ->
		QuestionUtil.getData(@props.moduleData.questionState, @props.model, 'revealAll')

	render: ->
		responseType = @props.model.modelState.responseType

		instructions = switch responseType
			when 'pick-one' then 'Pick the correct answer'
			when 'pick-one-multiple-correct' then 'Pick a correct answer'
			when 'pick-all' then 'Pick all the correct answers'

		revealAll = @isRevealingAll()
		score = @getScore()
		questionSubmitted = score isnt null
		questionAnswered = @getResponseData().responses.size >= 1
		shuffledIds = QuestionUtil.getData(@props.moduleData.questionState, @props.model, 'shuffledIds')
		feedbacks = Array.from(this.getResponseData().responses)
			.filter(
				((mcChoiceId) ->
					return OboModel.models[mcChoiceId].children.length > 1
				).bind(@)
			)
			.map(
				((mcChoiceId) ->
					return OboModel.models[mcChoiceId].children.at(1)
				).bind(@)
			)

		console.log('RESPSONE DATA', @getResponseData())

		solution = @props.model.parent.modelState.solution
		if solution?
			SolutionComponent = solution.getComponentClass()
		# solutionComponent = `<SolutionComponent key="solution" model={solution} moduleData={this.props.moduleData} />`

		# {
		# 				questionSubmitted
		# 				?
		# 				<Button
		# 					altAction
		# 					onClick={this.onClickReset}
		# 					value="Try Again"
		# 				/>
		# 				:
		# 				null

		# 			}

		`<OboComponent
			model={this.props.model}
			moduleData={this.props.moduleData}
			onClick={this.onClick}
			tag="form"
			className={'obojobo-draft--chunks--mc-assessment' + (' is-response-type-' + this.props.model.modelState.responseType) + (revealAll ? ' is-revealing-all' : ' is-not-revealing-all') + (score === null ? ' is-unscored' : ' is-scored')}
		>
			<span className="instructions pad">{instructions}:</span>
			{
				shuffledIds.map((function(id, index) {
					var child = OboModel.models[id]
					if(child.get('type') !== 'ObojoboDraft.Chunks.MCAssessment.MCChoice')
					{
						return null;
					}

					var Component = child.getComponentClass()
					return <Component
						key={child.get('id')}
						model={child}
						moduleData={this.props.moduleData}
						responseType={responseType}
						revealAll={revealAll}
						questionSubmitted={questionSubmitted}

					/>
				}).bind(this))
			}
			{
				<div className="submit">
					{
						questionSubmitted
						?
						<Button
							altAction
							onClick={this.onClickReset}
							value="Try Again"
						/>
						:
						<Button
							onClick={this.onClickSubmit}
							value="Check Your Answer"
						/>
					}

					{
						questionSubmitted
						?
						(
							score === 100
							?
							<p className="result correct">Correct!</p>
							:
							<p className="result incorrect">Incorrect</p>
						)
						:
						null
					}
				</div>
			}
			<ReactCSSTransitionGroup
				component="div"
				transitionName="submit"
				transitionEnterTimeout={800}
				transitionLeaveTimeout={800}
			>
				{
					questionSubmitted && (feedbacks.length > 0 || solution)
					?
					<div className="solution" key="solution">
						<div className="score">
							{
								feedbacks.length === 0
								?
								null
								:
								<div className="feedback">
									{
										feedbacks.map((function(model) {
											var Component = model.getComponentClass()
											return <Component
												key={model.get('id')}
												model={model}
												moduleData={this.props.moduleData}
												responseType={responseType}
												revealAll={revealAll}
												questionSubmitted={questionSubmitted}
											/>
										}).bind(this))
									}
								</div>
							}
						</div>
						{
							revealAll
							?
							<Button
								altAction
								onClick={this.onClickUndoRevealAll}
								value="Hide Explanation"
							/>
							:
							(
								solution
								?
								<Button
									altAction
									onClick={this.onClickRevealAll}
									value="Read an explanation of the answer"
								/>
								:
								null

							)
						}
						<ReactCSSTransitionGroup
							component="div"
							transitionName="solution"
							transitionEnterTimeout={800}
							transitionLeaveTimeout={800}
						>
							{
								revealAll
								?
								<div className="solution-container" key="solution-component">
									<SolutionComponent model={solution} moduleData={this.props.moduleData} />
								</div>
								:
								null
							}
						</ReactCSSTransitionGroup>
					</div>
					:
					null
				}
			</ReactCSSTransitionGroup>
		</OboComponent>`

module.exports = MCAssessment