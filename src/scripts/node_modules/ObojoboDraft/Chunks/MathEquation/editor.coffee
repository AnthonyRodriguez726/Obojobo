require './mathequationeditorstyles.scss'

katex = null #dynamically load

ObojoboDraft = require 'ObojoboDraft'

FocusableCommandHandler = ObojoboDraft.command.FocusableCommandHandler
POS = ObojoboDraft.text.TextPositionMethods
StyleableText = ObojoboDraft.text.StyleableText
TextGroup = ObojoboDraft.text.TextGroup
Chunk = ObojoboDraft.models.Chunk
SingleInputBubble = ObojoboDraft.components.modal.bubble.SingleInputBubble
Head = ObojoboDraft.page.Head
FocusableChunk = ObojoboDraft.components.FocusableChunk


getLatexHtml = (latex) ->
	try
		html = katex.renderToString latex, { displayMode:true }
		html: html
	catch e
		error: e


MathEquation = React.createClass
	statics:
		DEFAULT_LATEX: ''
		insertLabel: ['Math Equation']
		commandHandler: new FocusableCommandHandler
		dependencies: new Promise (resolve, reject) ->
			require.ensure ['katex'], ((require) ->
				katex = require 'katex'
				Head.add 'https://cdnjs.cloudflare.com/ajax/libs/KaTeX/0.5.1/katex.min.css', resolve, reject
			).bind(@)
		onInsert: (position, referenceChunk, selection, opts, callback) ->
			# selection.setFutureCaret atIndex, { groupIndex:'anchor:main', offset:0 }
			# callback Chunk.create(@)


			newChunk = Chunk.create @

			switch position
				when 'before'
					referenceChunk.addBefore newChunk

				when 'after'
					referenceChunk.addAfter newChunk

			newChunk.selectStart selection

			callback()

		# OBONODE DATA METHODS
		# ================================================
		createNewNodeData: ->
			latex: @DEFAULT_LATEX

		cloneNodeData: (data) ->
			latex: data.latex

		# SERIALIZATION/DECODE METHODS
		# ================================================
		createNodeDataFromDescriptor: (descriptor) ->
			content = descriptor.content

			latex: content.latex

		getDataDescriptor: (chunk) ->
			data = chunk.componentContent

			latex: data.latex

		# HTML METHODS
		# ================================================
		createNewNodesFromElement: (el) ->
			console.log '@TODO'

	getInitialState: ->
		latex = @props.chunk.componentContent.latex
		result = getLatexHtml latex
		if result.error?
			latex = @DEFAULT_LATEX
			result = getLatexHtml latex

		isEditing: false
		katexHtml: result.html
		editing: null

	edit: ->
		# return
		if not @props.isEditing
			latex = @props.chunk.componentContent.latex

			@setState {
				editing:
					initialLatex: latex
					lastValidLatex: latex
					currentLatex: latex
					katexError: null
			}

			@props.editChunk @props.chunk
			# @props.setTextMode off

	onChange: (newValue) ->
		@props.chunk.markDirty()
		data = @props.chunk.componentContent
		data.latex = newValue
		editing = @state.editing

		result = getLatexHtml newValue

		if result.error?
			editing.katexError = result.error.toString()
			editing.currentLatex = newValue

			@setState {
				editing: editing
			}
		else
			editing.lastValidLatex = newValue
			editing.currentLatex = newValue
			editing.katexError = null

			@setState {
				editing: editing
				katexHtml: result.html
				chunk: @props.chunk
			}

	onCancel: ->
		@stopEditing @state.editing.initialLatex

	onClose: ->
		@stopEditing @state.editing.lastValidLatex

	stopEditing: (finalLatex) ->
		data = @props.chunk.componentContent
		data.latex = finalLatex

		@props.chunk.markDirty()
		@setState {
			editing: null
			katexHtml: getLatexHtml(finalLatex).html
		}

		# @props.setTextMode on
		@props.editChunk null

		@props.selection.setFutureCaret @props.chunk.get('index'), { groupIndex:'anchor:main', offset:0 }
		@props.updateFn()

	onAnchorKeyDown: (event) ->
		if event.keyCode is 13
			event.preventDefault()
			@edit()

	# shouldComponentUpdate: ->
	# 	@props.chunk.needsUpdate

	componentDidUpdate: ->
		@props.chunk.markUpdated()

	render: ->
		chunk = @props.chunk
		data = chunk.componentContent
		hasError = this.state.editing?.katexError?
		isEmpty = data.latex is ''

		`<FocusableChunk className="obojobo-draft--chunks--math-equation" onKeyDown={this.onAnchorKeyDown}>
			<div className={( hasError ? ' error' : '' ) + ( isEmpty ? ' empty' : '' )}>
				{ hasError && this.state.editing ? <span className="error-msg">{this.state.editing.katexError}</span> : null }
				{ isEmpty ?
					<div className="katex-container"><div className="katex-display">({ this.state.editing ? 'Type an equation...' : 'Click edit to create a Latex equation'})</div></div>
					:
					<div className="katex-container" dangerouslySetInnerHTML={{__html:this.state.katexHtml}} />
				}
				{ this.state.editing ?
					<SingleInputBubble label="Edit latex equation" value={data.latex} onChange={this.onChange} onClose={this.onClose} onCancel={this.onCancel} />
					:
					<button className="edit-button" onClick={this.edit}>Edit</button>
				}
			</div>
		</FocusableChunk>`


module.exports = MathEquation