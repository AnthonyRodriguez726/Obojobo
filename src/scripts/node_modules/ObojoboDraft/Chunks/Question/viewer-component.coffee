require './viewer-component.scss'

Common = window.ObojoboDraft.Common

OboComponent = Common.components.OboComponent
Dispatcher = Common.flux.Dispatcher

AssessmentUtil = window.Viewer.util.AssessmentUtil
ScoreUtil = window.Viewer.util.ScoreUtil

Question = React.createClass
	getInitialState: ->
		if @props.model.modelState.type is 'assessment'
			currentAttempt = AssessmentUtil.getCurrentAttemptForModel @props.moduleData.assessmentState, @props.model

			if not currentAttempt.scores[@props.model.get('id')]?
				AssessmentUtil.registerQuestionForAttempt @props.model

		score: null
		viewState: 'hidden' # hidden | active | viewed

	setScore: (score) ->
		ScoreUtil.setScore @props.model.get('id'), score

		@setState { score:score }

	onClickBlocker: ->
		ScoreUtil.viewQuestion @props.model.get('id')

	componentWillReceiveProps: (nextProps) ->
		if nextProps.model isnt @props.model
			@setScore null

		id = @props.model.get('id')
		if nextProps.moduleData.scoreState.viewing is id
			@setState { viewState:'active' }
		else if nextProps.moduleData.scoreState.viewing isnt id
			if not nextProps.moduleData.scoreState.viewed[id]
				@setState { viewState:'hidden' }
			else
				@setState { viewState:'viewed' }

	render: ->
		if @props.model.modelState.type is 'practice'
			score = @state.score
		else
			score = null

		`<OboComponent
			model={this.props.model}
			className={'obojobo-draft--chunks--question' + (score === null ? '' : (score === 100 ? ' is-correct' : ' is-incorrect')) + (' is-type-' + this.props.model.modelState.type) + ' is-' + this.state.viewState}
		>
			{
				this.props.model.children.models.map((function(child, index) {
					var Component = child.getComponentClass()
					return <Component
						key={child.get('id')}
						model={child}
						setScore={this.setScore}
						score={score}
						type={this.props.model.modelState.type}
					/>
				}).bind(this))
			}
			<div className="blocker" onClick={this.onClickBlocker}>
				<span>Click to view question</span>
			</div>
		</OboComponent>`

module.exports = Question