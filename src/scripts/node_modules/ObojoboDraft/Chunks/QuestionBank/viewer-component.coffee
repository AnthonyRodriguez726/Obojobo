require './viewer-component.scss'

Common = window.ObojoboDraft.Common
OboComponent = Common.components.OboComponent
Dispatcher = Common.flux.Dispatcher
OboModel = Common.models.OboModel

AssessmentUtil = window.Viewer.util.AssessmentUtil

QuestionBank = React.createClass
	# componentWillMount: ->
	componentWillMount: ->
		assessment = AssessmentUtil.getAssessmentForModel @props.moduleData.assessmentState, @props.model
		if assessment
			if typeof assessment.current.data[@props.model.get('id')] is 'undefined'
				selectionHistory = AssessmentUtil.getDataForAssessment @props.moduleData.assessmentState, @props.model, 'questions-' + @props.model.get('id')
				if typeof selectionHistory is 'undefined' or selectionHistory.length is 0

					questions = @props.model.children.models.map((child) -> child.get('id'))

					AssessmentUtil.registerDataForAssessment @props.model, 'questions-' + @props.model.get('id'), questions
					# alert 'i think the problem is this wipes out the attempt data?'
					# debugger

				AssessmentUtil.registerDataForCurrentAttempt @props.model, @props.model.get('id'), @chooseChildren()

	chooseChildren: ->
		questions = Array.from AssessmentUtil.getDataForAssessment(@props.moduleData.assessmentState, @props.model, 'questions-' + @props.model.get('id'))

		chosen = []
		n = @props.model.modelState.choose
		mode = @props.model.modelState.select

		switch mode
			when 'random' # Select N questions at random
				numChildrenToPick = Math.min n, questions.length
				while numChildrenToPick
					chosen.push questions.splice(Math.floor(Math.random() * questions.length), 1)[0]
					numChildrenToPick--

			when 'random-group-with-sequential-children', 'random-group-with-shuffled-children' # Select a set of N questions at random
				randomSetIndex = Math.floor(Math.random() * Math.ceil(questions.length / n)) * n
				for i in [randomSetIndex...randomSetIndex + n]
					if questions[randomSetIndex]?
						chosen.push questions.splice(randomSetIndex, 1)

				if mode is 'random-group-with-shuffled-children'
					chosen = _.shuffle chosen

			when 'sequential' # Select the next N questions
				chosen = questions.splice(0, n)

		if mode is 'sequential' or not @props.model.modelState.randomReselectAttempted
			AssessmentUtil.registerDataForAssessment @props.model, 'questions-' + @props.model.get('id'), questions

		chosen

	getChosenChildrenModels: ->
		ids = AssessmentUtil.getDataForCurrentAttempt(@props.moduleData.assessmentState, @props.model, @props.model.get('id'))
		if not ids then return @props.model.children.models

		chosen = []
		for id in ids
			chosen.push OboModel.models[id]

		chosen

	render: ->
		`<OboComponent
			model={this.props.model}
			className="obojobo-draft--chunks--question-bank"
		>
			{
				this.getChosenChildrenModels().map((function(child, index) {
					var Component = child.getComponentClass()

					return <Component key={index} model={child} moduleData={this.props.moduleData} />
				}).bind(this))
			}
		</OboComponent>`


module.exports = QuestionBank