StyleableText = require 'ObojoboDraft/Common/text/styleabletext'
StyleableTextRenderer = require './styleabletextrenderer'
emptyChar = require('ObojoboDraft/Common/text/textconstants').EMPTY_CHAR
DOMUtil = require 'ObojoboDraft/Common/page/domutil'

TextGroupEl = React.createClass
	statics:
		getTextElement: (chunk, groupIndex) ->
			chunk.getDomEl().querySelector("*[data-group-index='#{groupIndex}']")

		getTextElementAtCursor: (virtualCursor) ->
			TextGroupEl.getTextElement virtualCursor.chunk, virtualCursor.data.groupIndex

		getDomPosition: (virtualCursor) ->
			# console.log 'TGE.gDP', virtualCursor

			totalCharactersFromStart = 0

			element = TextGroupEl.getTextElementAtCursor virtualCursor

			# console.log 'element', element

			if not element then return null

			if element?
				# console.log 'tnodes', DOMUtil.getTextNodesInOrder(element), virtualCursor.data.offset
				for textNode in DOMUtil.getTextNodesInOrder(element)
					if totalCharactersFromStart + textNode.nodeValue.length >= virtualCursor.data.offset
						return { textNode:textNode, offset:virtualCursor.data.offset - totalCharactersFromStart }
					totalCharactersFromStart += textNode.nodeValue.length

			# There are no text nodes or something went really wrong, so return 0! ¯\_(ツ)_/¯
			return { textNode:null, offset:0 }

	componentDidUpdate: ->
		console.timeEnd 'textRender'

	createChild: (el, key) ->
		createChild = @createChild
		groupIndex = @props.groupIndex

		attrs =
			key: key.counter++

		switch el.type
			when 'a'
				if el.attrs?.href?
					attrs.href = el.attrs.href
					attrs.target = "_blank"

			when 'span'
				if el.attrs?['class']?
					attrs.className = el.attrs['class']

		React.createElement el.type, attrs, el.children.map( (child, index) ->
			switch child.nodeType
				when 'text'
					if child.html?
						console.clear()
						console.log('yes', child.html)
						`<span key={key.counter++} dangerouslySetInnerHTML={{__html:child.html}} />`
					else if child.text.length is 0
						`<span key={key.counter++}>{emptyChar}</span>`
					else if child.text.charAt(child.text.length - 1) is "\n"
						# Hack to force the display of a blank line that has no content
						`<span key={key.counter++}>{child.text}{emptyChar}</span>`
					else
						`<span key={key.counter++}>{child.text}</span>`
					# child.text || emptyChar
				else
					createChild(child, key)
		)

	render: ->
		console.time 'textRender'

		key = { counter:0 }
		mockElement = StyleableTextRenderer @props.text

		`<span className="text" data-group-index={this.props.groupIndex} data-indent={this.props.indent}>
			{this.createChild(mockElement, key)}
		</span>`

window.__gdp = TextGroupEl.getDomPosition

module.exports = TextGroupEl