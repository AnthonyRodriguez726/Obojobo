OBO = window.OBO
createUUID = require 'ObojoboDraft/Common/util/uuid'
Dispatcher = require 'ObojoboDraft/Common/flux/dispatcher'

DefaultAdapter =
	construct: (attrs) -> null
	clone: (clone) -> clone
	toJSON: (model, json) -> json


class OboModel extends Backbone.Model
	defaults: -> {
		id: null,
		content: {},
		metadata: {},
		index: 0,
		type: ''
	}

	constructor: (attrs, @adapter = DefaultAdapter) ->
		@parent = null
		@children = new OboModelCollection()
		@triggers = []
		@title = null

		@modelState = {
			dirty: false,
			needsUpdate: false,
			editing: false,
		}

		if not attrs.id?
			attrs.id = @createNewLocalId()

		super(attrs)

		@adapter.construct(@, attrs)

		if attrs.content?.triggers?
			@triggers = attrs.content.triggers

		if attrs.content?.title?
			@title = attrs.content.title

		@children.on 'remove', @onChildRemove, @
		@children.on 'add', @onChildAdd, @
		@children.on 'reset', @onChildrenReset, @

		OboModel.models[@get('id')] = @

	processTrigger: (type) ->
		# console.log 'PROCESS TRIGGER', type, @triggers

		triggersToDelete = []

		for trigger, trigIndex in @triggers
			if trigger.type is type
				for action, index in trigger.actions
					if action.type is '_js'
						eval(action.value)
					else
						Dispatcher.dispatch action

				if trigger.run? and trigger.run is 'once'
					triggersToDelete.unshift trigIndex

		for index in triggersToDelete
			@triggers.splice index, 1

	onChildRemove: (model, collection, options) ->
		model.parent = null
		model.markDirty()

		delete OboModel.models[model.get('id')]

	onChildAdd: (model, collection, options) ->
		model.parent = @
		model.markDirty()

	onChildrenReset: (collection, options) ->
		for child in @children.models
			child.parent = @

	createNewLocalId: ->
		createUUID()

	assignNewId: ->
		delete OboModel.models[@get('id')]

		@set 'id', @createNewLocalId()

		OboModel.models[@get('id')] = @

	# should be overridden
	clone: (deep = false) ->
		clone = new OboModel(@attributes, @adapter.constructor)
		@adapter.clone @, clone

		if deep and @hasChildren()
			for child in @children
				clone.children.add child.clone(true)

		clone

	toJSON: ->
		json = super()
		@adapter.toJSON(@, json)

		json.children = null

		if @hasChildren()
			json.children = []
			for child in @children.models
				json.children.push child.toJSON()

		json

	revert: ->
		# Does this work?
		newModel = new @constructor()

		index = @get 'index'
		id = @get 'id'

		@clear()

		for attrName, attr of newModel.attributes
			@set attrName, attr

		@set 'index', index
		@set 'id', id

		@modelState = newModel.modelState

		@

	markDirty: (markChildren = false) ->
		@modelState.dirty = @modelState.needsUpdate = true

		if markChildren
			for child in @children.models
				child.markDirty()

	markForUpdate: (markChildren = false) ->
		@modelState.needsUpdate = true

		if markChildren
			for child in @children.models
				child.markForUpdate()

	markUpdated: (markChildren = false) ->
		@modelState.needsUpdate = false

		if markChildren
			for child in @children.models
				child.modelState.needsUpdate = false

	getDomEl: ->
		# @TODO - This work?
		document.body.querySelector ".component[data-id='#{@get('id')}']"
		# document.body.querySelector ".component[data-component-index='#{@getIndex()}']"

	getComponentClass: ->
		OBO.getItemForType(@get('type')).componentClass

	hasChildren: ->
		@children.models.length > 0

	isOrphan: ->
		not @parent?

	addChildBefore: (sibling) ->
		return if @isOrphan()

		collection = @parent.collection

		if collection.contains sibling
			collection.remove sibling

		collection.add sibling, { at:@getIndex() }

	addChildAfter: (sibling) ->
		return if @isOrphan()

		collection = @parent.collection

		if collection.contains sibling
			collection.remove sibling

		collection.add sibling, { at:@getIndex() + 1 }

	moveTo: (index) ->
		return if @getIndex() is index

		refChunk = @parent.at index

		if index < @getIndex()
			refChunk.addChildBefore @
		else
			refChunk.addChildAfter @

	moveToTop: ->
		@moveTo 0

	moveToBottom: ->
		@moveTo @parent.length - 1

	prevSibling: ->
		return null if @isOrphan() or @isFirst()
		@parent.children.at @getIndex() - 1

	getIndex: ->
		if not @parent then return 0
		@parent.children.models.indexOf(@)

	nextSibling: ->
		return null if @isOrphan() or @isLast()
		@parent.children.at(@parent.children.models.indexOf(@) + 1)

	isFirst: ->
		return false if @isOrphan()
		@getIndex() is 0

	isLast: ->
		return false if @isOrphan()
		@getIndex() is @parent.length - 1

	isBefore: (otherChunk) ->
		return false if @isOrphan()
		@getIndex() < otherChunk.getIndex()

	isAfter: (otherChunk) ->
		return false if @isOrphan()
		@getIndex() > otherChunk.getIndex()

	remove: ->
		if not @isOrphan() then @parent.remove @

	replaceWith: (newChunk) ->
		return if @isOrphan() or newChunk is @

		@addChildBefore newChunk
		@remove()

	# getChildrenOfType: (type) ->
	# 	matching = []

	# 	for child in @children
	# 		if child.get('type') is type
	# 			matching.push child

	# 	matching

	# searchChildren: (fn) ->
	# 	for child in @children
	# 		if fn(child)
	# 			child.searchChildren fn

	contains: (child) ->
		while child isnt null
			if child is @
				return true

			child = child.parent

		false

	getChildContainingModel: (model) ->
		for child in @children.models
			if child.contains model
				return child

		null

	getParentOfType: (type) ->
		model = @parent
		while model isnt null
			if model.get('type') is type then return model
			model = model.parent

		null


	__debug_print: (indent = '') ->
		console.log indent + @get('type')
		for child in @children.models
			child.__debug_print(indent + '  ')


OboModel.models = {}


class OboModelCollection extends Backbone.Collection
	# model: OboModel

# OboModel.create('chunk') = default chunk
# OboModel.create('ObojoboDraft.Chunks.List') = new list
# OboModel.create({type:'ObojoboDraft.Chunks.Table', content:{}, children:[]}) = new Table with children
OboModel.create = (typeOrNameOrJson, attrs = {}) ->
	# console.log 'OboModel.create', typeOrNameOrJson, attrs

	# try json
	if typeof typeOrNameOrJson is 'object'
		oboModel = OboModel.create(typeOrNameOrJson.type, typeOrNameOrJson)

		if oboModel?
			children = typeOrNameOrJson.children
			if children?
				# delete typeOrNameOrJson.children

				for child in children
					c = OboModel.create(child)
					# console.log 'c be', c, oboModel.children
					oboModel.children.add c

		return oboModel

	item = OBO.getDefaultItemForModelType(typeOrNameOrJson)
	if not item
		item = OBO.getItemForType(typeOrNameOrJson)

	if not item
		# console.log 'null', typeOrNameOrJson
		return null

	attrs.type = typeOrNameOrJson

	# console.log 'creating', item.type, typeOrNameOrJson
	new OboModel(attrs, item.adapter)


module.exports = OboModel