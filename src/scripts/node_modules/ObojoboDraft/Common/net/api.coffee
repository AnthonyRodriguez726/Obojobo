makeRequest = (method, url, data = null, callback = ->) ->
	request = new XMLHttpRequest()

	request.addEventListener 'load', callback #(event) ->
		# callback Module.createFromDescriptor({ id:moduleId, chunks:JSON.parse(request.responseText) })

	request.open method, url, true

	if data?
		a = []
		for k, v of data
			a.push "#{k}=#{v}"
		data = a.join "&"

		request.send data
	else
		request.send()

class APIModule
	constructor: ->

	get: (moduleId, callback) ->
		makeRequest 'GET', "/api/draft/#{moduleId}/chunks", null, ((event) ->
			callback { id:moduleId, chunks:JSON.parse(event.target.responseText) }
		).bind(@)


class APIChunk
	constructor: ->

	move: (chunkMoved, chunkBefore, callback) ->
		console.log arguments
		beforeId = if chunkBefore? then chunkBefore.get('id') else null
		makeRequest 'POST', "/api/chunk/#{chunkMoved.get('id')}/move_before", { before_chunk_id:beforeId }, callback


class API
	constructor: ->

Object.defineProperties API.prototype,
	"module":
		get: ->
			new APIModule

	"chunk":
		get: ->
			new APIChunk


module.exports = new API