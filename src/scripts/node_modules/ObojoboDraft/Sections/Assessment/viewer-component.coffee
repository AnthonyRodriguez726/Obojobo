require './viewer-component.scss'

Common = window.ObojoboDraft.Common
OboComponent = Common.components.OboComponent
Dispatcher = Common.flux.Dispatcher
OboModel = Common.models.OboModel
Button = Common.components.Button

ScoreStore = window.Viewer.stores.ScoreStore
AssessmentUtil = window.Viewer.util.AssessmentUtil

module.exports = React.createClass
	getCurrentStep: ->
		assessment = AssessmentUtil.getAssessmentForModel @props.moduleData.assessmentState, @props.model

		if assessment is null then return 'untested'
		if assessment.current isnt null then return 'takingTest'
		if assessment.attempts.length > 0 then return 'scoreSubmitted'
		'untested'

	componentDidUpdate: ->
		if @needsScroll
			delete @needsScroll
			document.getElementById('--todo-fixme').scrollTop = 0

	startAssessment: ->
		@needsScroll = true
		AssessmentUtil.startAttempt @props.model

	submit: ->
		@needsScroll = true

		AssessmentUtil.endAttempt @props.model

	exitAssessment: ->
		scoreAction = @getScoreAction()

		switch scoreAction.action.value
			when '_next'
				Dispatcher.dispatch { type:'navNext' }

			when '_prev'
				Dispatcher.dispatch { type:'navPrev' }

			else
				Dispatcher.dispatch { type:'navGoto', value:OboModel.models[scoreAction.action.value] }

	getScoreAction: ->
		scoreAction = @props.model.modelState.scoreActions.getActionForScore AssessmentUtil.getHighestAssessmentScoreForModel @props.moduleData.assessmentState, @props.model
		if scoreAction then return scoreAction

		from: 0
		to: 100
		message: "You did it"
		action:
			type: "unlock"
			value: "navNext"

	render: ->
		recentScore = AssessmentUtil.getLastAttemptAverageForModel @props.moduleData.assessmentState, @props.model
		highestScore = AssessmentUtil.getHighestAssessmentScoreForModel @props.moduleData.assessmentState, @props.model

		childEl = switch @getCurrentStep()
			when 'untested'
				`<div className="untested">
					<h1>{this.props.model.title}</h1>
					<Button onClick={this.startAssessment} value="Begin" />
				</div>`

			when 'takingTest'
				`<div className="test">
					{
						this.props.model.children.models.map((function(child, index) {
							var Component = child.getComponentClass()

							return <Component key={index} model={child} moduleData={this.props.moduleData} showScore={recentScore !== null} />
						}).bind(this))
					}
					<Button onClick={this.submit} value="Submit" />
				</div>`

			when 'scoreSubmitted'
				scoreAction = @getScoreAction()

				switch scoreAction.action.type
					when 'retake'
						`<div className="score retake">
							<h1>{'Your score is ' + recentScore + '%'}</h1>
							<p>{scoreAction.message}</p>
							<Button onClick={this.startAssessment} value="Restart Assessment" />
						</div>`

					when 'unlock'
						`<div className="score unlock">
							<h1>{'Your score is ' + recentScore + '%'}</h1>
							{
								recentScore === highestScore
								?
								<h2>This is your highest score</h2>
								:
								<h2>{'Your highest score was ' + highestScore + '%'}</h2>
							}
							<p>{scoreAction.message}</p>
							<Button onClick={this.exitAssessment} value="Continue" />
							<Button onClick={this.startAssessment} value="Retake Assessment" />
						</div>`

		`<OboComponent
			model={this.props.model}
			className="obojobo-draft--sections--assessment pad"
		>
			{childEl}
		</OboComponent>`