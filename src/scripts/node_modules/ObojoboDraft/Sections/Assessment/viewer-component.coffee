require './viewer-component.scss'

Common = window.ObojoboDraft.Common
OboComponent = Common.components.OboComponent
OboModel = Common.models.OboModel
Button = Common.components.Button
Dispatcher = Common.flux.Dispatcher
ModalUtil = Common.util.ModalUtil

ScoreStore = window.Viewer.stores.ScoreStore
AssessmentUtil = window.Viewer.util.AssessmentUtil
NavUtil = window.Viewer.util.NavUtil

AttemptIncompleteDialog = require './attemptincompletedialog'

module.exports = React.createClass
	getInitialState: ->
		step: null

	getCurrentStep: ->
		assessment = AssessmentUtil.getAssessmentForModel @props.moduleData.assessmentState, @props.model

		if assessment is null then return 'untested'
		if assessment.current isnt null then return 'takingTest'
		if assessment.attempts.length > 0 then return 'scoreSubmitted'
		'untested'

	componentWillReceiveProps: (nextProps) ->
		curStep = @getCurrentStep()
		if curStep isnt @state.step
			@needsScroll = true

		@setState { step:curStep }

	componentDidUpdate: ->
		if @needsScroll
			delete @needsScroll
			Dispatcher.trigger 'viewer:scrollToTop'

		# if @needsScroll
		# 	delete @needsScroll
		# 	alert 'TRIG'
		# 	Dispatcher.trigger 'viewer:scrollTo', { value: 0 }

	# # componentDidMount: ->
	# # 	ModalUtil.show `<AttemptIncompleteDialog onSubmit={this.endAttempt} />`

	isAttemptComplete: ->
		AssessmentUtil.isCurrentAttemptComplete @props.moduleData.assessmentState, @props.moduleData.questionState, @props.model

	onClickSubmit: ->
		if not @isAttemptComplete()
			ModalUtil.show `<AttemptIncompleteDialog onSubmit={this.endAttempt} />`
			return

		@endAttempt()

	endAttempt: ->
		AssessmentUtil.endAttempt @props.model

	exitAssessment: ->
		scoreAction = @getScoreAction()

		switch scoreAction.action.value
			when '_next'
				NavUtil.goNext()

			when '_prev'
				NavUtil.goPrev()

			else
				NavUtil.goto scoreAction.action.value

	getScoreAction: ->
		highestScore = AssessmentUtil.getHighestAttemptScoreForModel(@props.moduleData.assessmentState, @props.model)
		scoreAction = @props.model.modelState.scoreActions.getActionForScore highestScore
		if scoreAction then return scoreAction

		from: 0
		to: 100
		message: ""
		action:
			type: "unlock"
			value: "_next"

	render: ->
		recentScore = AssessmentUtil.getLastAttemptScoreForModel @props.moduleData.assessmentState, @props.model
		highestScore = AssessmentUtil.getHighestAttemptScoreForModel @props.moduleData.assessmentState, @props.model

		# alert(@state.step+ ','+ @getCurrentStep())

		childEl = switch @getCurrentStep()
			when 'untested'
				child = @props.model.children.at(0)
				Component = child.getComponentClass()

				`<div className="untested">
					<Component model={child} moduleData={this.props.moduleData} />
				</div>`

			when 'takingTest'
				child = @props.model.children.at(1)
				Component = child.getComponentClass()

				`<div className="test">
					<Component className="untested" model={child} moduleData={this.props.moduleData} showScore={recentScore !== null} />
					<div className="submit-button">
						<Button onClick={this.onClickSubmit} value={this.isAttemptComplete() ? 'Submit' : 'Submit (Not all questions have been answered)'} />
					</div>
				</div>`

			when 'scoreSubmitted'
				scoreAction = @getScoreAction()

				questionScores = AssessmentUtil.getLastAttemptScoresForModel @props.moduleData.assessmentState, @props.model

				numCorrect = questionScores.reduce( (acc, questionScore) ->
					n = 0
					if parseInt(questionScore.score, 10) is 100 then n = 1
					return parseInt(acc, 10) + n
				, [0])

				if scoreAction.page?
					pageModel = OboModel.create(scoreAction.page)
					pageModel.parent = @props.model; #'@TODO - FIGURE OUT A BETTER WAY TO DO THIS - THIS IS NEEDED TO GET {{VARIABLES}} WORKING')
					PageComponent = pageModel.getComponentClass()
					childEl = `<PageComponent model={pageModel} moduleData={this.props.moduleData} />`
				else
					childEl = `<p>{scoreAction.message}</p>`

				`<div className="score unlock">
					<h1>{'Your score is ' + Math.round(recentScore) + '%'}</h1>
					{
						recentScore === highestScore
						?
						<h2>This is your highest score</h2>
						:
						<h2>{'Your highest score was ' + Math.round(highestScore) + '%'}</h2>
					}
					{childEl}
					<div className="review">
						<p className="number-correct">{'You got ' + numCorrect + ' out of ' + questionScores.length + ' questions correct:'}</p>
						{
							questionScores.map((function(questionScore, index) {
								var questionModel = OboModel.models[questionScore.id]
								var QuestionComponent = questionModel.getComponentClass()

								return (<div key={index} className={questionScore.score === 100 ? 'is-correct' : 'is-not-correct'}>
									<p>{'Question ' + (index + 1) + ' - ' + (questionScore.score === 100 ? 'Correct:' : 'Incorrect:')}</p>
									<QuestionComponent model={questionModel} moduleData={this.props.moduleData} showContentOnly />
								</div>)
							}).bind(this))
						}
					</div>

				</div>`

		`<OboComponent
			model={this.props.model}
			moduleData={this.props.moduleData}
			className="obojobo-draft--sections--assessment"
		>
			{childEl}
		</OboComponent>`