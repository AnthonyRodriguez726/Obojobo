require './viewer-component.scss'

Common = window.ObojoboDraft.Common

OboComponent = Common.components.OboComponent
ScoreStore = window.Viewer.stores.ScoreStore
Dispatcher = Common.flux.Dispatcher
OboModel = Common.models.OboModel

module.exports = React.createClass
	getAssessment: ->
		attempt = @props.assessmentState.assessments[@props.model.get('id')]
		if typeof attempt is 'undefined' then return null

		attempt

	getCurrentStep: ->
		assessment = @getAssessment()
		if assessment is null then return 'untested'
		if assessment.current isnt null then return 'takingTest'
		if assessment.attempts.length > 0 then return 'scoreSubmitted'
		'untested'

	getQuizAverage: ->
		total = 0
		numQuestions = 0

		console.log '@TODO - Maybe instead of checking for Questions look for items that have some sort of "scorable" property?'

		for page in @props.model.children.models
			for child in page.children.models
				# console.log 'gqa', child.get('type')
				score = null
				switch child.get('type')
					when 'ObojoboDraft.Chunks.Question'
						numQuestions++
						score = ScoreStore.getScore child

						if score is null then return null

					when 'ObojoboDraft.Chunks.QuestionBank'
						numQuestions++

						for qbQuestion in child.children.models
							# console.log 'qb', qbQuestion.get('type')
							score = ScoreStore.getScore qbQuestion
							# console.log 'score', score, qbQuestion.get('id'), ScoreStore.getState()
							# debugger
							if score isnt null then break

						# console.log 'okay score is', score

						if score is null then return null

				total += score

		# console.log 'RETURN', total, numQuestions
		total / numQuestions

	startAssessment: ->
		Dispatcher.dispatch {
			type: 'startAttempt'
			value:
				model: @props.model
		}

	submit: ->
		Dispatcher.dispatch {
			type: 'endAttempt'
			value:
				model: @props.model
		}

		scoreAction = @getScoreAction()
		if not scoreAction?.action?.type
			scoreType = 'unlock'

		switch scoreAction.action.type
			when 'retake'
				break #do nothing

			when 'unlock'
				Dispatcher.dispatch { type: 'navUnlock' }
				Dispatcher.dispatch { type: 'navEnable' }

	exitAssessment: ->
		scoreAction = @getScoreAction()

		switch scoreAction.action.value
			when '_next'
				Dispatcher.dispatch { type:'navNext' }

			when '_prev'
				Dispatcher.dispatch { type:'navPrev' }

			else
				Dispatcher.dispatch { type:'navGoto', value:OboModel.models[scoreAction.action.value] }

	getRecentScore: ->
		assessment = @getAssessment()
		if assessment is null then return null
		@getQuizAverage assessment.attempts[assessment.attempts.length - 1]




	getScoreAction: ->
		scoreAction = @props.model.modelState.scoreActions.getActionForScore @getRecentScore()
		if scoreAction then return scoreAction

		from: 0
		to: 100
		message: "You did it"
		action:
			type: "unlock"
			value: "navNext"

	render: ->
		recentScore = @getRecentScore()
		console.log 'state', @state, @getCurrentStep()

		childEl = switch @getCurrentStep()
			when 'untested'
				`<div>
					<p>Click ye olde button to begin assessment - once you being you must finish</p>
					<button onClick={this.startAssessment}>Start Assessment</button>
				</div>`

			when 'takingTest'
				`<div>
					{
						this.props.model.children.models.map((function(child, index) {
							var Component = child.getComponentClass()

							return <Component key={index} model={child} showScore={recentScore !== null} />
						}).bind(this))
					}
					<button onClick={this.submit}>Submit</button>
				</div>`

			when 'scoreSubmitted'
				scoreAction = @getScoreAction()

				switch scoreAction.action.type
					when 'retake'
						`<div>
							<p>{'Your score is ' + recentScore}</p>
							<p>{scoreAction.message}</p>
							<button onClick={this.startAssessment}>Restart Assessment</button>
						</div>`

					when 'unlock'
						`<div>
							<p>{'Your score is ' + recentScore}</p>
							<p>{scoreAction.message}</p>
							<button onClick={this.exitAssessment}>Continue</button>
						</div>`

		`<OboComponent
			model={this.props.model}
			navState={this.props.navState}
			scoreState={this.props.scoreState}
			assessmentState={this.props.assessmentState}
			className="obojobo-draft--sections--assessment"
		>
			{childEl}
		</OboComponent>`