require './viewer-component.scss'

Common = window.ObojoboDraft.Common
OboComponent = Common.components.OboComponent
OboModel = Common.models.OboModel
Button = Common.components.Button
Dispatcher = Common.flux.Dispatcher
ModalUtil = Common.util.ModalUtil

ScoreStore = window.Viewer.stores.ScoreStore
AssessmentUtil = window.Viewer.util.AssessmentUtil
NavUtil = window.Viewer.util.NavUtil

AttemptIncompleteDialog = require './attemptincompletedialog'

module.exports = React.createClass
	getCurrentStep: ->
		assessment = AssessmentUtil.getAssessmentForModel @props.moduleData.assessmentState, @props.model

		if assessment is null then return 'untested'
		if assessment.current isnt null then return 'takingTest'
		if assessment.attempts.length > 0 then return 'scoreSubmitted'
		'untested'

	componentDidUpdate: ->
		if @needsScroll
			delete @needsScroll
			document.getElementById('--todo-fixme').scrollTop = 0

	# componentDidMount: ->
	# 	Dispatcher.on 'assessment:registerQuestionForAttempt', (payload) =>
	# 		Dispatcher.trigger 'nav:addNavItems', {
	# 			value: {
	# 				items: [
	# 					{
	# 						type: 'link',
	# 						label: payload.value.id,
	# 						id: '123'
	# 					}
	# 				]
	# 			}
	# 		}

	isAttemptIncomplete: ->
		AssessmentUtil.isCurrentAttemptIncomplete @props.moduleData.assessmentState, @props.model

	onClickSubmit: ->
		if @isAttemptIncomplete()
			ModalUtil.show `<AttemptIncompleteDialog onSubmit={this.endAttempt} />`
			return

		@endAttempt()

	endAttempt: ->
		AssessmentUtil.endAttempt @props.model

	exitAssessment: ->
		scoreAction = @getScoreAction()

		switch scoreAction.action.value
			when '_next'
				NavUtil.goNext()

			when '_prev'
				NavUtil.goPrev()

			else
				NavUtil.goto scoreAction.action.value

	getScoreAction: ->
		highestScore = AssessmentUtil.getHighestAssessmentScoreForModel(@props.moduleData.assessmentState, @props.model)
		scoreAction = @props.model.modelState.scoreActions.getActionForScore highestScore
		if scoreAction then return scoreAction

		from: 0
		to: 100
		message: "You did it!!!"
		action:
			type: "unlock"
			value: "_next"

	render: ->
		recentScore = AssessmentUtil.getLastAttemptAverageForModel @props.moduleData.assessmentState, @props.model
		highestScore = AssessmentUtil.getHighestAssessmentScoreForModel @props.moduleData.assessmentState, @props.model

		childEl = switch @getCurrentStep()
			when 'untested'
				child = @props.model.children.at(0)
				Component = child.getComponentClass()

				`<div className="untested">
					<Component model={child} moduleData={this.props.moduleData} />
				</div>`

			when 'takingTest'
				child = @props.model.children.at(1)
				Component = child.getComponentClass()

				`<div className="test">
					<Component className="untested" model={child} moduleData={this.props.moduleData} showScore={recentScore !== null} />
					<div className="submit-button">
						<Button onClick={this.onClickSubmit} value={this.isAttemptIncomplete() ? 'Submit (Not all questions have been answered)' : 'Submit'} />
					</div>
				</div>`

			when 'scoreSubmitted'
				scoreAction = @getScoreAction()


				if scoreAction.page?
					pageModel = OboModel.create(scoreAction.page)
					PageComponent = pageModel.getComponentClass()
					childEl = `<PageComponent model={pageModel} />`
				else
					childEl = `<p>{scoreAction.message}</p>`

				`<div className="score unlock">
					<h1>{'Your score is ' + Math.round(recentScore) + '%'}</h1>
					{
						recentScore === highestScore
						?
						<h2>This is your highest score</h2>
						:
						<h2>{'Your highest score was ' + Math.round(highestScore) + '%'}</h2>
					}
					{childEl}
				</div>`

		`<OboComponent
			model={this.props.model}
			className="obojobo-draft--sections--assessment"
		>
			{childEl}
		</OboComponent>`