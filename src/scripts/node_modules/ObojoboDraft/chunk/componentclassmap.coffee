nameToClass = new Map
classToName = new Map
consumableElements = new Map
defaultClass = null
errorClass = null

ComponentClassMap =
	setDefault: (type) ->
		defaultClass = @getClassForType type

	getDefaultComponentClass: ->
		defaultClass

	setError: (type) ->
		errorClass = @getClassForType type

	getErrorComponentClass: ->
		errorClass

	register: (type, componentClass) ->
		nameToClass.set type, componentClass
		classToName.set componentClass, type

		if componentClass.consumableElements?
			for el in componentClass.consumableElements
				consumableElements.set el, componentClass

		# if componentClass.insertLabel?
		# 	inserts.set componentClass.insertLabel, componentClass

	getClassForType: (type) ->
		componentClass = nameToClass.get type

		if not componentClass?
			return errorClass

		componentClass

	getTypeOfClass: (componentClass) ->
		classToName.get componentClass

	hasType: (type) ->
		nameToClass.has type

	hasClass: (componentClass) ->
		classToName.has componentClass

	getClassForElement: (el) ->
		if consumableElements.has el then return consumableElements.get el
		defaultClass


module.exports = ComponentClassMap