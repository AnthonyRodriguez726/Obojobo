Chunk = require 'ObojoboDraft/models/chunk'

class BaseCommandHandler
	getCaretEdge: (selection, chunk) -> 'startAndEnd'
	canRemoveSibling: (selection, chunk) -> true
	insertText: (selection, chunk, textToInsert, stylesToApply = null, stylesToRemove = null) -> false
	deleteText: (selection, chunk, deleteForwards) -> false
	splitText: (selection, chunk, shiftKey) -> false
	deleteSelection: (selection, chunk) -> false
	getCopyOfSelection: (selection, chunk) -> chunk.clone()
	styleSelection: (selection, chunk, styleType, styleData) -> false
	unstyleSelection: (selection, chunk, styleType, styleData) -> false
	getSelectionStyles: (selection, chunk) -> []
	canMergeWith: (selection, digestedChunk, consumerChunk) -> false
	merge: (selection, consumerChunk, digestedChunk, mergeText = true) ->
		digestedChunk.remove()
		consumerChunk.selectEnd()
	indent: (selection, chunk, decreaseIndent) ->
		chunk.markDirty()

		data = chunk.componentContent

		if data.indent?
			if not decreaseIndent
				data.indent++
			else if data.indent > 0
				data.indent--
	onTab: (selection, chunk, untab) -> false
	acceptAbsorb: (selection, chunkToBeDigested, consumerChunk) -> false
	absorb: (selection, consumerChunk, digestedChunk) -> false
	replaceSelection: (selection, newChunk) ->
		console.log '__replaceSelection', arguments
		console.clear()
		data = newChunk.componentContent

		if selection.virtual.type isnt 'chunkSpan'
			selection.startChunk.split()

			target = selection.startChunk
			target.addBefore newChunk

			newChunk.absorb target
		else
			console.log 'start'
			selection.startChunk.componentContent.textGroup.__debug_print()

			startChunk = selection.startChunk
			startChunkIndex = startChunk.get('index')

			selection.saveVirtualSelection()

			selection.startChunk.split()
			selection.restoreVirtualSelection()

			console.log 'start'
			selection.startChunk.componentContent.textGroup.__debug_print()

			# return

			selection.endChunk.split()
			selection.restoreVirtualSelection()

			console.log 'start'
			selection.startChunk.componentContent.textGroup.__debug_print()

			# return

			# Create a SingleText chunk to use as the mother to all of the newly
			# created chunks. We'll merge each one into it, then absorb it
			tmpChunk = Chunk.create()
			tmpChunk.componentContent.textGroup.clear() #@TODO
			startChunk.addBefore tmpChunk


			# return

			# chunk = selection.startChunk
			stopChunk = selection.endChunk.nextSibling()
			console.log 'begin loop'
			console.log 'start'
			startChunk.componentContent.textGroup.__debug_print()
			console.log 'to'
			stopChunk.componentContent.textGroup.__debug_print()
			# return
			console.clear()

			chunk = startChunk
			while chunk isnt stopChunk and chunk?
				console.log 'loop', chunk
				console.log chunk.get('index'), stopChunk.get('index')

				console.log 'BEFORE'
				console.log 'chunk='
				chunk.componentContent.textGroup.__debug_print()
				console.log 'tmpChunk='
				tmpChunk.componentContent.textGroup.__debug_print()

				chunk.selectEnd()

				nextSibling = chunk.nextSibling()

				if tmpChunk.canMergeWith(chunk)
					tmpChunk.merge chunk, false
					console.log 'yeah'

					# selection.restoreVirtualSelection()

				console.log 'AFTER'
				console.log 'chunk='
				chunk.componentContent.textGroup.__debug_print()
				console.log 'tmpChunk='
				tmpChunk.componentContent.textGroup.__debug_print()

				chunk.remove()

				chunk = nextSibling



			# tmpChunk.addBefore newChunk
			newChunk.absorb tmpChunk

			# startChunk.addAfter newChunk
			console.clear()
			console.log startChunk.collection
			# return
			newChunk.moveTo startChunkIndex

			# console.clear()
			# console.log 'TEXT='
			# startChunk.componentContent.textGroup.__debug_print()

		newChunk.selectAll()
	split: (selection, chunk) -> false
	getDOMStateBeforeInput: (selection, chunk) -> null
	getDOMModificationAfterInput: (selection, chunk, domStateBefore) -> null
	applyDOMModification: (selection, chunk, domModifications) -> null
	selectStart: (selection, chunk, asRange) -> false
	selectEnd: (selection, chunk, asRange) -> false
	selectAll: (selection, chunk) ->
		@selectStart selection, chunk, true
		@selectEnd selection, chunk, true
	onSelectAll: (selection, chunk) -> false
	getTextMenuCommands: (selection, chunk) -> []
	paste: (selection, text, html) -> false

	getVirtualSelectionStartData: (selection, chunk) -> null
	getDOMSelectionStart: (selection, chunk) -> null
	getVirtualSelectionEndData: (selection, chunk) -> null
	getDOMSelectionEnd: (selection, chunk) -> null
	areCursorsEquivalent: (selection, chunk, thisCursorData, otherCursorData) -> null


module.exports = BaseCommandHandler