Chunk = require 'ObojoboDraft/models/chunk'

class BaseCommandHandler
	getCaretEdge: (selection, chunk) -> 'startAndEnd'
	canRemoveSibling: (selection, chunk) -> true
	insertText: (selection, chunk, textToInsert, stylesToApply = null, stylesToRemove = null) -> false
	deleteText: (selection, chunk, deleteForwards) -> false
	splitText: (selection, chunk, shiftKey) -> false
	deleteSelection: (selection, chunk) -> false
	getCopyOfSelection: (selection, chunk) -> chunk.clone()
	styleSelection: (selection, chunk, styleType, styleData) -> false
	unstyleSelection: (selection, chunk, styleType, styleData) -> false
	getSelectionStyles: (selection, chunk) -> []
	canMergeWith: (selection, digestedChunk, consumerChunk) -> false
	merge: (selection, consumerChunk, digestedChunk, mergeText = true) ->
		digestedChunk.remove()
		consumerChunk.selectEnd selection
	indent: (selection, chunk, decreaseIndent) ->
		chunk.markDirty()

		data = chunk.componentContent

		if data.indent?
			if not decreaseIndent
				data.indent++
			else if data.indent > 0
				data.indent--
	onTab: (selection, chunk, untab) -> false
	acceptAbsorb: (selection, chunkToBeDigested, consumerChunk) -> false
	absorb: (selection, consumerChunk, digestedChunk) -> false
	replaceSelection: (selection, newChunk) ->
		console.log '__replaceSelection', arguments
		console.clear()
		data = newChunk.componentContent

		if selection.chunk.type isnt 'chunkSpan'
			selection.startChunk.split selection

			target = selection.startChunk
			target.addBefore newChunk

			newChunk.absorb selection, target
		else
			selection.startChunk.split selection
			selection.chunk.end.chunk.split selection

			# Create a SingleText chunk to use as the mother to all of the newly
			# created chunks. We'll merge each one into it, then absorb it
			tmpChunk = Chunk.create()
			tmpChunk.componentContent.textGroup.clear()
			selection.startChunk.addBefore tmpChunk

			chunk = selection.startChunk
			stopChunk = selection.endChunk.nextSibling()
			while chunk isnt stopChunk
				nextSibling = chunk.nextSibling()

				if tmpChunk.canMergeWith(selection, chunk)
					tmpChunk.merge selection, chunk, false

				chunk.remove()

				chunk = nextSibling

			tmpChunk.addBefore newChunk
			newChunk.absorb selection, tmpChunk

		newChunk.selectAll selection
	split: (selection, chunk) -> false
	saveSelection: (selection, chunk, position) -> null
	restoreSelection: (selection, chunk, position, savedSelData) -> false
	getDOMStateBeforeInput: (selection, chunk) -> null
	getDOMModificationAfterInput: (selection, chunk, domStateBefore) -> null
	applyDOMModification: (selection, chunk, domModifications) -> null
	selectStart: (selection, chunk, asRange) -> false
	selectEnd: (selection, chunk, asRange) -> false
	selectAll: (selection, chunk) ->
		@selectStart selection, chunk, true
		@selectEnd selection, chunk, true
	onSelectAll: (selection, chunk) -> false
	getTextMenuCommands: (selection, chunk) -> []
	paste: (selection, text, html) -> false


module.exports = BaseCommandHandler