StyleableText = require 'ObojoboDraft/text/styleabletext'
StyleableTextRenderer = require './styleabletextrenderer'
emptyChar = require('ObojoboDraft/text/textconstants').EMPTY_CHAR
DOMUtil = require 'ObojoboDraft/page/domutil'

# getNodeLength = (node) ->
# 	console.log 'emptychar', node.nodeValue is emptyChar
# 	if node.nodeValue is emptyChar then return 0
# 	node.nodeValue.length


Text = React.createClass
	statics:
		computeIndex: (node, sel) ->
			sel.text.id = node.id
			sel.text.domNode = node
			sel.text.index = @getOboTextPos text.domContainer, text.domIndex, node

		getTextNode: (chunk, groupIndex) ->
			chunk.getDomEl().querySelector "*[data-group-index='#{groupIndex}']"

		getOboTextInfo: (targetTextNode, offset) ->
			# console.log 'getOboTextInfo', targetTextNode, offset

			totalCharactersFromStart = 0
			# element ?= DOMUtil.getOboElementFromChild targetTextNode.parentElement, 'chunk'

			oboTextNode = DOMUtil.findParentWithAttr targetTextNode, 'data-group-index'


			if oboTextNode
				groupIndexAttr = oboTextNode.getAttribute 'data-group-index'
				groupIndex = parseInt groupIndexAttr, 10
				if isNaN(groupIndex) then groupIndex = -1

			if not oboTextNode? or oboTextNode.textContent is emptyChar
				return {
					offset: 0
					groupIndex: groupIndex
					anchor: false
				}

			for textNode in DOMUtil.getTextNodesInOrder(oboTextNode)
				break if textNode is targetTextNode
				totalCharactersFromStart += textNode.nodeValue.length

			anchor = false
			if groupIndexAttr.indexOf('anchor:') is 0
				anchor = groupIndexAttr.substr(groupIndexAttr.indexOf(':') + 1)

			offset += totalCharactersFromStart
			if anchor then offset = 0

			offset: offset
			groupIndex: groupIndex
			anchor: anchor

		getDomPosition: (offset, element) ->
			totalCharactersFromStart = 0

			for textNode in DOMUtil.getTextNodesInOrder(element)
				if totalCharactersFromStart + textNode.nodeValue.length >= offset
					return { textNode:textNode, offset:offset - totalCharactersFromStart }
				totalCharactersFromStart += textNode.nodeValue.length

			# There are no text nodes or something went really wrong, so return 0! ¯\_(ツ)_/¯
			return { textNode:null, offset:0 }

	componentDidUpdate: ->
		console.timeEnd 'textRender'

	# render: ->
	# 	console.time 'textRender'
	# 	# console.clear()
	# 	mockElement = StyleableTextRenderer @props.text
	# 	`<TextElement descriptor={mockElement} groupIndex={this.props.groupIndex} />`

	createChild: (el, key) ->
		createChild = @createChild
		groupIndex = @props.groupIndex

		React.createElement el.type, { key:key.counter++ }, el.children.map( (child, index) ->
			switch child.nodeType
				when 'text'
					if child.text.length is 0
						`<span key={key.counter++}>{emptyChar}</span>`
					else if child.text.charAt(child.text.length - 1) is "\n"
						# Hack to force the display of a blank line that has no content
						`<span key={key.counter++}>{child.text}{emptyChar}</span>`
					else
						`<span key={key.counter++}>{child.text}</span>`
					# child.text || emptyChar
				else
					createChild(child, key)
		)

	render: ->
		console.time 'textRender'
		console.clear()
		console.log @props.indent

		key = { counter:0 }
		mockElement = StyleableTextRenderer @props.text
		`<span className="text" data-group-index={this.props.groupIndex} data-indent={this.props.indent}>
			{this.createChild(mockElement, key)}
		</span>`


module.exports = Text