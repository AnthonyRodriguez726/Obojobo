StyleableText = require 'ObojoboDraft/text/styleabletext'
StyleableTextRenderer = require './styleabletextrenderer'
emptyChar = require('ObojoboDraft/text/textconstants').EMPTY_CHAR
DOMUtil = require 'ObojoboDraft/page/domutil'

# getNodeLength = (node) ->
# 	console.log 'emptychar', node.nodeValue is emptyChar
# 	if node.nodeValue is emptyChar then return 0
# 	node.nodeValue.length

katex = require 'katex'
Test = React.createClass
	getInitialState: ->
		editing: false

	focus: (event) ->
		# console.clear()
		console.log 'focus'

	blur: (event) ->
		console.log 'blur'

	onKeyUp: (event) ->
		# console.clear()
		console.log 'onKeyUp'

	onClick: (event) ->
		@setState { editing:true }

	createMarkup: ->
		__html: katex.renderToString 'y=2x'

	render: ->
		`<span contentEditable="false" className="anchor-container test" data-sli={this.props.sli} data-zero-length="true">
			<span contentEditable="true" className="anchor">{emptyChar}</span>
			<span >
				<b>12<i>34</i>56</b>
			</span>
		</span>`

	renderOLD: ->
		# html =
		console.clear()
		# console.log 'html', html
		# html = '<b>lol</b>'
		console.log @createMarkup()

		`<span onClick={this.onClick} data-sli={this.props.sli}>
			<a href="#" tabIndex="1" onFocus={this.focus} onBlur={this.blur} onKeyDown={this.onKeyDown}>anchors{emptyChar}</a>
			<span tabIndex="2" onFocus={this.focus} onBlur={this.blur} onKeyDown={this.onKeyDown}>spans{emptyChar}</span>
			<span contentEditable="false">
				<span className="katex-container" dangerouslySetInnerHtml={this.createMarkup()} />
			</span>
			{
				this.state.editing
				?
				'EDIT'
				:
				''
			}
		</span>`


Text = React.createClass
	statics:
		computeIndex: (node, sel) ->
			sel.text.id = node.id
			sel.text.domNode = node
			sel.text.index = @getOboTextPos text.domContainer, text.domIndex, node

		getTextNode: (chunk, groupIndex) ->
			chunk.getDomEl().querySelector "*[data-group-index='#{groupIndex}']"

		getOboTextInfo: (targetTextNode, offset) ->
			# console.log 'getOboTextInfo', targetTextNode, offset

			totalCharactersFromStart = 0
			# element ?= DOMUtil.getOboElementFromChild targetTextNode.parentElement, 'chunk'

			styleIndex: -1
			oboStyleNode = DOMUtil.findParentWithAttr targetTextNode, 'data-sli'
			if oboStyleNode
				styleIndex = parseInt oboStyleNode.getAttribute('data-sli'), 10

			oboTextNode = DOMUtil.findParentWithAttr targetTextNode, 'data-group-index'

			if oboTextNode
				groupIndexAttr = oboTextNode.getAttribute 'data-group-index'
				groupIndex = parseInt groupIndexAttr, 10
				if isNaN(groupIndex) then groupIndex = -1

			if not oboTextNode? or oboTextNode.textContent is emptyChar
				return {
					offset: 0
					groupIndex: groupIndex
					anchor: false
					styleIndex: -1
				}

			for textNode in DOMUtil.getTextNodesInOrder(oboTextNode)
				break if textNode is targetTextNode
				totalCharactersFromStart += textNode.nodeValue.length

			anchor = false
			if groupIndexAttr.indexOf('anchor:') is 0
				anchor = groupIndexAttr.substr(groupIndexAttr.indexOf(':') + 1)

			offset += totalCharactersFromStart
			if anchor then offset = 0

			offset: offset
			groupIndex: groupIndex
			anchor: anchor
			styleIndex: styleIndex

		getDomPosition: (offset, element) ->
			totalCharactersFromStart = 0

			for textNode in DOMUtil.getTextNodesInOrder(element)
				if totalCharactersFromStart + textNode.nodeValue.length >= offset
					return { textNode:textNode, offset:offset - totalCharactersFromStart }
				totalCharactersFromStart += textNode.nodeValue.length

			# There are no text nodes or something went really wrong, so return 0! ¯\_(ツ)_/¯
			return { textNode:null, offset:0 }

	componentDidUpdate: ->
		console.timeEnd 'textRender'

	# render: ->
	# 	console.time 'textRender'
	# 	# console.clear()
	# 	mockElement = StyleableTextRenderer @props.text
	# 	`<TextElement descriptor={mockElement} groupIndex={this.props.groupIndex} />`

	createChild: (el, key) ->
		createChild = @createChild
		groupIndex = @props.groupIndex

		key.counter++

		attrs = el.attrs
		attrs.key = key.counter

		if el.type is '_test'
			console.clear()
			console.log attrs
			return `<Test key={++key.counter} sli={attrs['data-sli']} />`


		React.createElement el.type, attrs, el.children.map( (child, index) ->
			switch child.nodeType
				when 'text'
					if child.text.length is 0
						`<span key={++key.counter}>{emptyChar}</span>`
					else if child.text.charAt(child.text.length - 1) is "\n"
						# Hack to force the display of a blank line that has no content
						`<span key={++key.counter}>{child.text}{emptyChar}</span>`
					else
						`<span key={++key.counter}>{child.text}</span>`
					# child.text || emptyChar
				else
					createChild(child, key)
		)

	render: ->
		console.time 'textRender'
		# console.clear()
		key = { counter:0 }
		mockElement = StyleableTextRenderer @props.text
		# console.log 'RENDER MOCK EL', mockElement
		`<span className="text" data-group-index={this.props.groupIndex}>
			{this.createChild(mockElement, key)}
		</span>`


module.exports = Text