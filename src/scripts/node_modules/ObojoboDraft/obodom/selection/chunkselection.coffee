Cursor = require './cursor'
DOMSelection = require 'ObojoboDraft/page/domselection'
DOMUtil = require 'ObojoboDraft/page/domutil'

domType = null

class ChunkSelection
	constructor: (@module) ->
		@clear()

	clear: ->
		@start = @end = domType = @inbetween = @all = null

	calculateAllNodes: ->
		@inbetween = []
		@all = []

		if @start?.chunk?
			@all = [@start.chunk]

		n = @start.chunk
		while n? and n isnt @end.chunk
			if n isnt @start.chunk
				@inbetween.push n
				@all.push n
			n = n.nextSibling()

		if @end?.chunk? and @all[@all.length - 1] isnt @end.chunk
			@all.push @end.chunk

	getChunkForDomNode: (domNode) ->
		# console.log 'getChunkForDomNode', domNode
		index = @getIndex domNode
		@module.chunks.at index

	getPosition: (chunk) ->
		if not @start? or not @end? then return 'unknown'

		chunkIndex = chunk.get('index')
		startIndex = @start.chunk.get('index')
		endIndex = @end.chunk.get('index')

		if chunkIndex < startIndex then return 'before'
		if chunkIndex is startIndex and chunkIndex is endIndex then return 'contains'
		if chunkIndex is startIndex then return 'start'
		if chunkIndex < endIndex then return 'inside'
		if chunkIndex is endIndex then return 'end'
		'after'

	getIndex: (node) ->
		DOMUtil.findParentAttr node, 'data-component-index'

	getFromDOMSelection: (s = new DOMSelection) ->
		@clear()

		# s = new DOMSelection()
		domType = s.getType()

		if domType is 'none'
			@start = null
			@end = null
		else
			@start = @getCursor s.startContainer, s.startOffset
			@end   = @getCursor s.endContainer, s.endOffset
			@calculateAllNodes()

	getCursor: (node, offset) ->
		chunk = @getChunkForDomNode node
		new Cursor chunk, node, offset

	setTextStart: (node, offset) ->
		@start = @getCursor node, offset

		if @end is null then @end = @start.clone()

		@calculateAllNodes()

	setTextEnd: (node, offset) ->
		@end = @getCursor node, offset

		if @start is null then @start = @end.clone()

		@calculateAllNodes()

	setCaret: (node, offset) ->
		@setTextStart node, offset
		@collapse()

	select: ->
		DOMSelection.set @start.node, @start.offset, @end.node, @end.offset

	collapse: ->
		@end = @start.clone()





Object.defineProperties ChunkSelection.prototype, {
	"type": {
		get: ->
			if not @start?.chunk? or not @end?.chunk? or not @start.isText or not @end.isText
				return 'none'
			else if @start?.chunk.cid is @end?.chunk.cid
				if domType is 'caret'
					return 'caret'
				else
					return 'textSpan'
			else
				return 'chunkSpan'
	}
}


ChunkSelection.createDescriptor = (startIndex, startData, endIndex, endData) ->
	start:
		index: startIndex
		data:  startData
	end:
		index: endIndex
		data:  endData



module.exports = ChunkSelection