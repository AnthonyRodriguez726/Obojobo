Cursor = require './cursor'
DOMSelection = require 'ObojoboDraft/page/domselection'
DOMUtil = require 'ObojoboDraft/page/domutil'

domType = null

class ChunkSelection
	constructor: (@module) ->
		@clear()

	clear: ->

		@start = @end = domType = @inbetween = @all = null

	clearFocus: ->
		console.log '///////////////////////////clear focus'
		focusNodes = document.getElementsByClassName 'selection-focus'
		for node in focusNodes
			node.classList.remove 'selection-focus'

	calculateAllNodes: ->
		@inbetween = []
		@all = []

		if @start?.chunk?
			@all = [@start.chunk]

		n = @start.chunk
		while n? and n isnt @end.chunk
			if n isnt @start.chunk
				@inbetween.push n
				@all.push n
			n = n.nextSibling()

		if @end?.chunk? and @all[@all.length - 1] isnt @end.chunk
			@all.push @end.chunk

	getChunkForDomNode: (domNode) ->
		# console.log 'getChunkForDomNode', domNode
		index = @getIndex domNode
		@module.chunks.at index

	getPosition: (chunk) ->
		if not @start? or not @end? then return 'unknown'

		chunkIndex = chunk.get('index')
		startIndex = @start.chunk.get('index')
		endIndex = @end.chunk.get('index')

		if chunkIndex < startIndex then return 'before'
		if chunkIndex is startIndex and chunkIndex is endIndex then return 'contains'
		if chunkIndex is startIndex then return 'start'
		if chunkIndex < endIndex then return 'inside'
		if chunkIndex is endIndex then return 'end'
		'after'

	getIndex: (node) ->
		DOMUtil.findParentAttr node, 'data-component-index'

	getFocusNode: ->
		console.log('+++getFocusNode', @start)
		@start.chunk.getDomEl().querySelector("*[data-focus-tag=#{@start.data.target}]")

	getFromDOMSelection: ->
		console.log('+++getFromDOMSelection')
		@clear()
		@clearFocus()

		s = new DOMSelection()

		start = @getChunkForDomNode s.domRange.startContainer
		end   = @getChunkForDomNode s.domRange.endContainer

		@start     = new Cursor(start, s.startContainer, s.startText, s.startOffset)
		@end       = new Cursor(end, s.endContainer, s.endText, s.endOffset)
		@calculateAllNodes()

		domType = s.getType()

	setTextStart: (node, offset) ->
		@start.node = node
		@start.offset = offset
		@start.chunk = @getChunkForDomNode node
		@calculateAllNodes()

	setTextEnd: (node, offset) ->
		@end.node = node
		@end.offset = offset
		@end.chunk = @getChunkForDomNode node
		@calculateAllNodes()

	setCaret: (node, offset) ->
		@setTextStart node, offset
		@collapse()

	setFocus: (chunk, target) ->
		console.log '+++setFocus', chunk, target
		@clear()
		@clearFocus()

		@start = @end = {
			chunk: chunk
			data: {
				target: target
			}
		}

	select: ->
		console.log '+++select', @type

		switch @type
			when 'focus'
				node = @getFocusNode()
				console.log '///////////////////////FOCUS', node
				node.classList.add 'selection-focus'

			when 'caret', 'textSpan', 'chunkSpan'
				console.log '+++text'
				s = new DOMSelection()
				s.set @start.node, @start.offset, @end.node, @end.offset

	collapse: ->
		@end = @start.clone()





Object.defineProperties ChunkSelection.prototype, {
	"type": {
		get: ->
			console.log '+++type', @start
			if @start?.chunk? and @start.data?.target? #@TODO
				return 'focus'
			if not @start?.chunk? or not @end?.chunk? or not @start.isText or not @end.isText
				return 'none'
			else if @start?.chunk.cid is @end?.chunk.cid
				if domType is 'caret'
					return 'caret'
				else
					return 'textSpan'
			else
				return 'chunkSpan'
	}
}


ChunkSelection.createDescriptor = (startIndex, startData, endIndex, endData, type) ->
	start:
		index: startIndex
		data:  startData
	end:
		index: endIndex
		data:  endData
	type: type



module.exports = ChunkSelection