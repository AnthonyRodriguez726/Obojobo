VirtualCursor = require './virtualcursor'

DOMUtil = require 'ObojoboDraft/page/domutil'
DOMSelection = require 'ObojoboDraft/page/domselection'


class VirtualSelection
	constructor: (@module) ->
		@clear()

	clear: ->
		@start = null
		@end = null

	clone: ->
		virtSel = new VirtualSelection(@module)
		virtSel.start = @start.clone()
		virtSel.end   = @end.clone()

		virtSel

	getPosition: (chunk) ->
		if not @start?.chunk? or not @end?.chunk? then return 'unknown'

		chunkIndex = chunk.get('index')
		startIndex = @start.chunk.get('index')
		endIndex = @end.chunk.get('index')

		if chunkIndex < startIndex then return 'before'
		if chunkIndex is startIndex and chunkIndex is endIndex then return 'contains'
		if chunkIndex is startIndex then return 'start'
		if chunkIndex < endIndex then return 'inside'
		if chunkIndex is endIndex then return 'end'
		'after'

	collapse: ->
		@end = @start.clone()

	collapseToEnd: ->
		@start = @end.clone()

	setStart: (chunk, data) ->
		@start = new VirtualCursor(chunk, data)

	setEnd: (chunk, data) ->
		@end = new VirtualCursor(chunk, data)

	setCaret: (chunk, data) ->
		@setStart chunk, data
		@collapse()

	toObject: ->
		if not @start?.chunk? or not @start?.data?
			start =
				index: -1
				data: {}
		else
			start =
				index: @start.chunk.get('index')
				data: Object.assign({}, @start.data)

		if not @end?.chunk? or not @end?.data?
			end =
				index: -1
				data: {}
		else
			end =
				index: @end.chunk.get('index')
				data: Object.assign({}, @end.data)

		start: start
		end: end

	fromObject: (o) ->
		@setStart @module.chunks.at(o.start.index), o.start.data
		@setEnd   @module.chunks.at(o.end.index), o.end.data

	fromDOMSelection: (domSelection = null) ->
		if not domSelection?
			domSelection = DOMSelection.get()

		startChunkIndex = DOMUtil.findParentAttr domSelection.startContainer, 'data-component-index'
		endChunkIndex = DOMUtil.findParentAttr domSelection.endContainer, 'data-component-index'

		if not startChunkIndex or not endChunkIndex then return

		startChunk = @module.chunks.at startChunkIndex
		endChunk = @module.chunks.at endChunkIndex

		if not startChunk or not endChunk then return

		@setStart startChunk, startChunk.getVirtualSelectionStartData()
		@setEnd endChunk, endChunk.getVirtualSelectionEndData()


	__debug_print: ->
		console.log JSON.stringify(@toObject(), null, 4)




Object.defineProperties VirtualSelection.prototype, {
	"type":
		get: ->
			switch
				when not @start?.chunk? or not @end?.chunk? then 'none'
				when @start.chunk.cid isnt @end.chunk.cid then 'chunkSpan'
				when @start.isEquivalentTo(@end) then 'caret'
				else 'textSpan'

	"all":
		get: ->
			switch @type
				when 'chunkSpan'
					all = []
					cur = @start.chunk

					while cur? and cur isnt @end.chunk.nextSibling()
						all.push cur
						cur = cur.nextSibling()

					all

				when 'textSpan', 'caret'
					all = [@start.chunk]

				else []

	"inbetween":
		get: ->
			return [] if @type isnt 'chunkSpan'

			result = @all
			result.pop()
			result.shift()

			result
}


VirtualSelection.fromObject = (module, o) ->
	vs = new VirtualSelection module
	vs.fromObject module, o

	vs

VirtualSelection.fromDOMSelection = (module, domSelection) ->
	vs = new VirtualSelection(module)
	vs.fromDOMSelection domSelection

	vs

module.exports = VirtualSelection