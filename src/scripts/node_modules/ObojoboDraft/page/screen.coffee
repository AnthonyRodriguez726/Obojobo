OboSelectionRect = require 'ObojoboDraft/obodom/selection/oboselectionrect'

PX_EDGE_PADDING = 50

class Screen
	constructor: (el) ->
		@el = el
		@intervalId = null
		@distance = 0
		@distanceLeft = 0
		@travelBy = 0

	# getScrollPosition: ->
	# 	x: @el.scrollTop
	# 	y: @el.scrollLeft

	# saveScrollPosition: ->
	# 	pos = @getScrollPosition()

	# 	@savedScrollPos = @getScrollPosition()
	# 	console.log 'Screen.saveScrollPosition', @savedScrollPos

	# restoreScrollPosition: ->
	# 	return if not @savedScrollPos?
	# 	console.log 'Screen.restoreScrollPosition', @savedScrollPos
	# 	window.scrollTo @savedScrollPos.x, @savedScrollPos.y

	getScrollDistanceNeededToPutSelectionIntoView: ->
		selScreenRect = OboSelectionRect.createFromSelection()

		rect = @el.getBoundingClientRect()

		if not selScreenRect.valid                   then return 0
		if selScreenRect.top < 0                     then return selScreenRect.top - PX_EDGE_PADDING
		if selScreenRect.bottom > rect.height then return selScreenRect.bottom - rect.height + PX_EDGE_PADDING
		0

	scrollSelectionIntoViewIfNeeded: ->
		@distance = @getScrollDistanceNeededToPutSelectionIntoView()
		@el.scrollTop += @distance

	#@TODO - delete this?
	tweenSelectionIntoViewIfNeeded: ->
		@distance = @getScrollDistanceNeededToPutSelectionIntoView()
		@distanceLeft = @distance

		if @distance isnt 0
			@travelBy = Math.max 1, parseInt(Math.abs(@distance) / 10, 10)

			clearInterval @intervalId
			@intervalId = setInterval (->
				if @distance < 1
					travel = Math.min @travelBy, @distanceLeft * -1
					@el.scrollTop -= travel
					@distanceLeft += travel

					if @distanceLeft >= 0
						clearInterval @intervalId
				else
					travel = Math.min @travelBy, @distanceLeft
					@el.scrollTop += travel
					@distanceLeft -= travel

					if @distanceLeft <= 0
						clearInterval @intervalId

			).bind(@), 10


window.__screen = Screen #@todo
module.exports = Screen