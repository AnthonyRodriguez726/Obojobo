# Describes a selection in the context of TextGroups for a single chunk

TextGroupCursor = require './textgroupselection/textgroupcursor'

class TextGroupSelection
	constructor: (chunk) ->
		data = chunk.componentContent
		textGroup = data.textGroup
		chunkStart = TextGroupSelection.startCursorOf chunk
		chunkEnd = TextGroupSelection.endCursorOf chunk

		chunkSelection = ChunkSelection.getFromDOMSelection()
		position = chunkSelection.getPosition chunk

		spanInfo = switch position
			when 'start'
				start: TextGroupCursor.createFromCursor chunkSelection.start
				end:   chunkEnd

			when 'end'
				start: chunkStart
				end:   TextGroupCursor.createFromCursor chunkSelection.end

			when 'contains'
				start: TextGroupCursor.createFromCursor chunkSelection.start
				end:   TextGroupCursor.createFromCursor chunkSelection.end

			when 'inside'
				start: chunkStart
				end:   chunkEnd

			else
				start: null
				end: null

		type = switch
			when spanInfo.start is null or spanInfo.end is null then 'none'
			when position is 'contains' and spanInfo.start.groupIndex is spanInfo.end.groupIndex and spanInfo.start.offset is spanInfo.end.offset then 'caret'
			else 'span'

		@type        = type
		@position    = position
		@chunkStart  = chunkStart
		@chunkEnd    = chunkEnd
		@start       = spanInfo.start
		@end         = spanInfo.end

	includes: (item) ->
		if @type is 'none' then return false

		groupIndex = item.index
		@start.groupIndex is groupIndex or @end.groupIndex is groupIndex


TextGroupSelection.startCursorOf = (chunk) ->
	new TextGroupCursor 0, 0, chunk.componentContent.textGroup.first.text

TextGroupSelection.endCursorOf = (chunk) ->
	group = chunk.componentContent.textGroup
	new TextGroupCursor group.length - 1, group.last.text.length, group.last.text


module.exports = TextGroupSelection