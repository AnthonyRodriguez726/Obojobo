# Describes a selection in the context of TextGroups for a single chunk

TextGroupCursor = require './textgroupselection/textgroupcursor'

VirtualCursor = require 'ObojoboDraft/obodom/selection/virtualcursor'
DOMUtil = require 'ObojoboDraft/page/domutil'
emptyChar = require('ObojoboDraft/text/textconstants').EMPTY_CHAR

class TextGroupSelection
	constructor: (@chunk, @virtualSelection) ->
		data = @chunk.componentContent
		chunkStart = TextGroupSelection.getGroupStartCursor @chunk
		chunkEnd = TextGroupSelection.getGroupEndCursor @chunk

		if not @virtualSelection?
			spanInfo =
				start: null
				end: null
		else
			position = @virtualSelection.getPosition @chunk

			spanInfo = switch position
				when 'start'
					start: new TextGroupCursor @virtualSelection.start
					end:   chunkEnd

				when 'end'
					start: chunkStart
					end:   new TextGroupCursor @virtualSelection.end

				when 'contains'
					start: new TextGroupCursor @virtualSelection.start
					end:   new TextGroupCursor @virtualSelection.end

				when 'inside'
					start: chunkStart
					end:   chunkEnd

				else
					start: null
					end: null

		type = switch
			when spanInfo.start is null or spanInfo.end is null then 'none'
			when position is 'contains' and spanInfo.start.groupIndex is spanInfo.end.groupIndex and spanInfo.start.offset is spanInfo.end.offset then 'caret'
			when spanInfo.start.groupIndex is spanInfo.end.groupIndex then 'singleTextSpan'
			else 'multipleTextSpan'

		@type        = type
		@position    = position
		@chunkStart  = chunkStart
		@chunkEnd    = chunkEnd
		@start       = spanInfo.start
		@end         = spanInfo.end

	includes: (item) ->
		if @type is 'none' then return false

		groupIndex = item.index
		@start.groupIndex is groupIndex or @end.groupIndex is groupIndex

	selectGroup: ->
		TextGroupSelection.selectGroup @chunk, @virtualSelection

	selectText: (groupIndex) ->
		TextGroupSelection.selectText @chunk, groupIndex, @virtualSelection

	setCaretToGroupStart: ->
		TextGroupSelection.setCaretToGroupStart @chunk, @virtualSelection

	setCaretToTextStart: (groupIndex) ->
		TextGroupSelection.setCaretToTextStart @chunk, groupIndex, @virtualSelection

	setCaretToGroupEnd: ->
		TextGroupSelection.setCaretToGroupEnd @chunk, @virtualSelection

	setCaretToTextEnd: (groupIndex) ->
		TextGroupSelection.setCaretToTextEnd @chunk, groupIndex, @virtualSelection

	setCaret: (groupIndex, offset) ->
		@virtualSelection.setCaret @chunk, { groupIndex:groupIndex, offset:offset }

	setStart: (groupIndex, offset) ->
		@virtualSelection.setStart @chunk, { groupIndex:groupIndex, offset:offset }

	setEnd: (groupIndex, offset) ->
		@virtualSelection.setEnd @chunk, { groupIndex:groupIndex, offset:offset }

	getAllSelectedTexts: ->
		console.log 'get all selected texts'
		console.log @
		if not @start?.text? or not @end?.text? then return []

		all = []
		for i in [@start.groupIndex..@end.groupIndex]
			all.push @chunk.componentContent.textGroup.get(i)

		all

	# setStartToGroupStart: ->
	# 	@start = TextGroupSelection.getGroupStartCursor @chunk

	# setEndToGroupEnd: ->
	# 	@end = TextGroupSelection.getGroupStartCursor @chunk

	# setStartToTextStart: (groupIndex) ->
	# 	@start = TextGroupSelection.getTextStartCursor @chunk, groupIndex

	# setEndToTextEnd: ->
	# 	@end = TextGroupSelection.getTextEndCursor @chunk, groupIndex


TextGroupSelection.getGroupStartCursor = (chunk) ->
	TextGroupSelection.getTextStartCursor chunk, 0

TextGroupSelection.getGroupEndCursor = (chunk) ->
	TextGroupSelection.getTextEndCursor chunk, chunk.componentContent.textGroup.length - 1

TextGroupSelection.getTextStartCursor = (chunk, groupIndex) ->
	virtCur = new VirtualCursor chunk, { groupIndex:groupIndex, offset:0 }
	new TextGroupCursor virtCur

TextGroupSelection.getTextEndCursor = (chunk, groupIndex) ->
	# console.log chunk
	# console.log chunk.componentContent
	# console.log chunk.componentContent.textGroup
	# console.log chunk.componentContent.textGroup.get(groupIndex)
	# console.log chunk.componentContent.textGroup.get(groupIndex).text

	virtCur = new VirtualCursor chunk, { groupIndex:groupIndex, offset:chunk.componentContent.textGroup.get(groupIndex).text.length }
	new TextGroupCursor virtCur

TextGroupSelection.selectGroup = (chunk, virtualSelection) ->
	start = TextGroupSelection.getGroupStartCursor(chunk)
	end = TextGroupSelection.getGroupEndCursor(chunk)

	virtualSelection.setStart start.virtualCursor.chunk, start.virtualCursor.data
	virtualSelection.setEnd   end.virtualCursor.chunk, end.virtualCursor.data

TextGroupSelection.selectText = (chunk, groupIndex, virtualSelection) ->
	start = TextGroupSelection.getTextStartCursor(chunk, groupIndex)
	end = TextGroupSelection.getTextEndCursor(chunk, groupIndex)

	virtualSelection.setStart start.virtualCursor.chunk, start.virtualCursor.data
	virtualSelection.setEnd   end.virtualCursor.chunk, end.virtualCursor.data

TextGroupSelection.setCaretToGroupStart = (chunk, virtualSelection) ->
	TextGroupSelection.selectGroup chunk, virtualSelection
	virtualSelection.collapse()

TextGroupSelection.setCaretToTextStart = (chunk, groupIndex, virtualSelection) ->
	TextGroupSelection.selectText chunk, groupIndex, virtualSelection
	virtualSelection.collapse()

TextGroupSelection.setCaretToGroupEnd = (chunk, virtualSelection) ->
	TextGroupSelection.selectGroup chunk, virtualSelection
	virtualSelection.collapseToEnd()

TextGroupSelection.setCaretToTextEnd = (chunk, groupIndex, virtualSelection) ->
	TextGroupSelection.selectText chunk, groupIndex, virtualSelection
	virtualSelection.collapseToEnd()

TextGroupSelection.getCursorDataFromDOM = (targetTextNode, offset) ->
	# console.log 'getOboTextInfo', targetTextNode, offset

	totalCharactersFromStart = 0
	# element ?= DOMUtil.getOboElementFromChild targetTextNode.parentElement, 'chunk'

	oboTextNode = DOMUtil.findParentWithAttr targetTextNode, 'data-group-index'


	if oboTextNode
		groupIndexAttr = oboTextNode.getAttribute 'data-group-index'
		groupIndex = parseInt groupIndexAttr, 10
		if isNaN(groupIndex) then groupIndex = groupIndexAttr

	if not oboTextNode? or oboTextNode.textContent is emptyChar
		return {
			offset: 0
			groupIndex: groupIndex
			anchor: false
		}

	for textNode in DOMUtil.getTextNodesInOrder(oboTextNode)
		break if textNode is targetTextNode
		totalCharactersFromStart += textNode.nodeValue.length

	anchor = false
	if groupIndexAttr.indexOf('anchor:') is 0
		anchor = groupIndexAttr.substr(groupIndexAttr.indexOf(':') + 1)

	offset += totalCharactersFromStart
	if anchor then offset = 0

	offset: offset
	groupIndex: groupIndex
	anchor: anchor


module.exports = TextGroupSelection