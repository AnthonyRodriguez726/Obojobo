require './nav.scss'

navStore = require 'Viewer/stores/navstore'
NavUtil = require 'Viewer/util/navutil'
Logo = require 'Viewer/components/logo'

hamburgerImg = require 'svg-url?noquotes!./hamburger.svg'
arrowImg = require 'svg-url?noquotes!./arrow.svg'
lockImg = require 'svg-url?noquotes!./lock-icon.svg'

getBackgroundImage = window.ObojoboDraft.Common.util.getBackgroundImage

Nav = React.createClass
	getInitialState: ->
		hover: false

	onClick: (item) ->
		NavUtil.gotoPath item.flatPath
		# if(item.path)

		# @handlePathChange()
		# NavUtil.goto item.id

	hideNav: ->
		NavUtil.toggle()

	onMouseOver: ->
		@setState { hover:true }

	onMouseOut: ->
		@setState { hover:false }

	render: ->
		if @props.navState.open or @state.hover
			bg = getBackgroundImage(arrowImg)
		else
			bg = getBackgroundImage(hamburgerImg)

		if @props.navState.locked
			lockEl = `<div className="lock-icon"><img src={lockImg} /></div>`
		else
			lockEl = null

		list = NavUtil.getOrderedList @props.navState

		`<div className={'viewer--components--nav' + (this.props.navState.locked ? ' is-locked' : ' is-unlocked') + (this.props.navState.open ? ' is-open' : ' is-closed') + (this.props.navState.disabled ? ' is-disabled' : ' is-enabled')}>
			<button
				className="toggle-button"
				onClick={this.hideNav}
				onMouseOver={this.onMouseOver}
				onMouseOut={this.onMouseOut}
				style={
					{
						backgroundImage: bg,
						transform: ((!this.props.navState.open && this.state.hover) ? 'rotate(180deg)' : ''),
						filter: ((this.props.navState.open) ? 'invert(100%)' : 'invert(0%)')
					}
				}
			>
				Toggle Navigation Menu
			</button>
			<ul>
				{
					list.map((function(item, index) {
						switch(item.type)
						{
							case 'heading':
								var isSelected = false
								return <li key={index} className={'heading' + (isSelected ? ' is-selected' : ' is-not-select')}><a>{item.label}</a></li>
								break;

							case 'link':
								var isSelected = this.props.navState.navTargetId === item.id
								//var isPrevVisited = this.props.navState.navTargetHistory.indexOf(item.id) > -1
								return <li key={index} onClick={this.onClick.bind(null, item)} className={'link' + (isSelected ? ' is-selected' : ' is-not-select') + (item.flags.visited ? ' is-visited' : ' is-not-visited') + (item.flags.complete ? ' is-complete' : ' is-not-complete') + (item.flags.correct ? ' is-correct' : ' is-not-correct')}>
									<a>{item.label}</a>
									{lockEl}
								</li>
								break;

							case 'sub-link':
								var isSelected = this.props.navState.navTargetIndex === index

								return <li key={index} onClick={this.onClick.bind(null, item)} className={'sub-link' + (isSelected ? ' is-selected' : ' is-not-select') + (item.flags.correct ? ' is-correct' : ' is-not-correct')}>
									<a>{item.label}</a>
									{lockEl}
								</li>
								break;

							case 'seperator':
								return <li key={index} className='seperator'><hr /></li>
								break;

						}

					}).bind(this))
				}
			</ul>
			<Logo inverted />
		</div>`


module.exports = Nav