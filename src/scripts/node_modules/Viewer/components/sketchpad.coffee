require './sketchpad.scss'

require 'literallycanvas/lib/js/literallycanvas-core'

iconRed = require 'svg-url?noquotes!./sketchpad/red.svg'
iconBlue = require 'svg-url?noquotes!./sketchpad/blue.svg'
iconBlack = require 'svg-url?noquotes!./sketchpad/black.svg'
iconGreen = require 'svg-url?noquotes!./sketchpad/green.svg'
iconEraser = require 'svg-url?noquotes!./sketchpad/eraser.svg'
iconClear = require 'svg-url?noquotes!./sketchpad/trash.svg'

iconDots = {
	'red': require('svg-url?noquotes!./sketchpad/red-dot.svg'),
	'blue': require('svg-url?noquotes!./sketchpad/blue-dot.svg'),
	'black': require('svg-url?noquotes!./sketchpad/black-dot.svg'),
	'green': require('svg-url?noquotes!./sketchpad/green-dot.svg'),
	'erase': require('svg-url?noquotes!./sketchpad/white-dot.svg')
}

getBackgroundImage = window.ObojoboDraft.Common.util.getBackgroundImage

Sketchpad = React.createClass
	getInitialState: ->
		@boundMouseMove = @onDocMouseMove.bind(@)
		@boundMouseUp = @onDocMouseUp.bind(@)

		left: 0
		top: 0
		strokeWidth: 2
		color: 'black'

	componentDidMount: ->
		@lc = LC.init @refs.canvas
		window.__lc = @lc
		@lc.tool.strokeWidth = this.state.strokeWidth

		@Pencil = new @lc.opts.tools[0](@lc)
		@Eraser = new @lc.opts.tools[1](@lc)

	setStrokeWidth: (strokeWidth) ->
		@lc.tool.strokeWidth = strokeWidth

		@setState({
			strokeWidth: strokeWidth
		})

	setColor: (color) ->
		if color is 'erase'
			@lc.tool = @Eraser
		else
			@lc.tool = @Pencil
			@lc.setColor 'primary', color

		@lc.tool.strokeWidth = @state.strokeWidth

		@setState({
			color: color
		})

	# undo: ->
	# 	@lc.undo()

	# redo: ->
	# 	@lc.redo()

	clear: ->
		@lc.clear()


	onDocMouseMove: (event) ->
		@setState({
			left: @state.left + (event.screenX - @x),
			top: @state.top + (event.screenY - @y)
		})

		@x = event.screenX
		@y = event.screenY

	onDocMouseUp: (event) ->
		delete @x
		delete @y

		window.document.removeEventListener('mousemove', @boundMouseMove)
		window.document.removeEventListener('mouseup', @boundMouseUp)

	startDrag: (event) ->
		@x = event.screenX
		@y = event.screenY

		window.document.addEventListener('mousemove', @boundMouseMove)
		window.document.addEventListener('mouseup', @boundMouseUp)

	render: ->
		iconStroke = iconDots[@state.color]

		# <hr />
		# 		<button onClick={this.undo}>Undo</button>
		# 		<button onClick={this.redo}>Redo</button>
#style={{ left:this.state.left, top:this.state.top }}
		`<div className={'viewer--components--sketchpad' + (' tip-' + this.state.strokeWidth)} >
			<div className="handle" onMouseDown={this.startDrag}>Sketchboard</div>
			<div ref="canvas" className="lc" />
			<div className="toolbar">
				<button className={this.state.color === 'black' ? ' is-selected' : ' is-not-selected'} onClick={this.setColor.bind(null, 'black')}  style={{ backgroundImage:getBackgroundImage(iconBlack) }}>Black</button>
				<button className={this.state.color === 'red' ? ' is-selected' : ' is-not-selected'} onClick={this.setColor.bind(null, 'red')} style={{ backgroundImage:getBackgroundImage(iconRed) }}>Red</button>
				<button className={this.state.color === 'blue' ? ' is-selected' : ' is-not-selected'} onClick={this.setColor.bind(null, 'blue')} style={{ backgroundImage:getBackgroundImage(iconBlue) }}>Blue</button>
				<button className={this.state.color === 'green' ? ' is-selected' : ' is-not-selected'} onClick={this.setColor.bind(null, 'green')}  style={{ backgroundImage:getBackgroundImage(iconGreen) }}>Green</button>
				<button className={this.state.color === 'erase' ? ' is-selected' : ' is-not-selected'} onClick={this.setColor.bind(null, 'erase')} style={{ backgroundImage:getBackgroundImage(iconEraser) }}>Eraser</button>
				<hr />
				<button className={'tip-1' + (this.state.strokeWidth === 1 ? ' is-selected' : ' is-not-selected')} onClick={this.setStrokeWidth.bind(null, 1)} style={{ backgroundImage:getBackgroundImage(iconStroke) }}>Width 1</button>
				<button className={'tip-2' + (this.state.strokeWidth === 2 ? ' is-selected' : ' is-not-selected')} onClick={this.setStrokeWidth.bind(null, 2)} style={{ backgroundImage:getBackgroundImage(iconStroke) }}>Width 2</button>
				<button className={'tip-5' + (this.state.strokeWidth === 5 ? ' is-selected' : ' is-not-selected')} onClick={this.setStrokeWidth.bind(null, 5)} style={{ backgroundImage:getBackgroundImage(iconStroke) }}>Width 5</button>
				<button className={'tip-10' + (this.state.strokeWidth === 10 ? ' is-selected' : ' is-not-selected')} onClick={this.setStrokeWidth.bind(null, 10)} style={{ backgroundImage:getBackgroundImage(iconStroke) }}>Width 10</button>
				<button className="clear" onClick={this.clear} style={{ backgroundImage:getBackgroundImage(iconClear) }}>Clear</button>
			</div>
			<button className="close">Ã—</button>
		</div>`


module.exports = Sketchpad