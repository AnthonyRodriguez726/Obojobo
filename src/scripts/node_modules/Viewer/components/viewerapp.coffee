require './viewerapp.scss'

NavStore = require 'Viewer/stores/navstore'

OBO = window.OBO
Common = window.ObojoboDraft.Common
Legacy = Common.models.Legacy
Dispatcher = Common.flux.Dispatcher

OboModel = Common.models.OboModel

JSONInput = require './jsoninput'
Nav = require './nav'

ViewerApp = React.createClass
	getInitialState: ->
		OBO.loadDependency 'https://cdnjs.cloudflare.com/ajax/libs/KaTeX/0.5.1/katex.min.css'

	update: (json) ->
		try
			o = JSON.parse(json)
		catch e
			alert 'Error parsing JSON'
			@setState { model:@state.model }
			return

		localStorage.__lo = json

		newModule = OboModel.create o
		# console.clear()
		# console.log newModule

		@setState {
			model: newModule
		}

	onJsonInputToggle: (val) ->
		if(val)
			document.getElementById('viewer-app').classList.add('debug-edit-json')
		else
			document.getElementById('viewer-app').classList.remove('debug-edit-json')

	onBack: ->
		console.log '@TODO - Should this just be NavStore.goBack() ?'
		Dispatcher.dispatch {
			type: 'navPrev'
		}

	onNext: ->
		Dispatcher.dispatch {
			type: 'navNext'
		}

	render: ->
		window.__lo = @props.moduleData.model

		ModuleComponent = @props.moduleData.model.getComponentClass()

		prevNav = NavStore.getPrev()
		console.log '?________________prevNav', prevNav
		if prevNav
			prevEl = `<button onClick={this.onBack}>{prevNav.value.modelState.title}</button>`

		nextNav = NavStore.getNext()
		if nextNav
			nextEl = `<button onClick={this.onNext}>{nextNav.value.modelState.title}</button>`


		console.log 'json', @props.moduleData.model

		`<div className={'viewer--viewer-app' + (this.props.moduleData.navState.locked ? ' is-locked-nav' : ' is-unlocked-nav') + (this.props.moduleData.navState.open ? ' is-open-nav' : ' is-closed-nav') + (this.props.moduleData.navState.disabled ? ' is-disabled-nav' : ' is-enabled-nav')}>
			<Nav navState={this.props.moduleData.navState} />
			<JSONInput onToggle={this.onJsonInputToggle} onChange={this.update} value={JSON.stringify(this.props.moduleData.model.toJSON(), null, 2)} />
			{prevEl}
			<ModuleComponent model={this.props.moduleData.model} navState={this.props.moduleData.navState} scoreState={this.props.moduleData.scoreState} assessmentState={this.props.moduleData.assessmentState} />
			{nextEl}
		</div>`

module.exports = ViewerApp


# require './viewerapp.scss'

# ViewerPage = require './viewerpage'

# Common = window.ObojoboDraft.Common
# VirtualSelection = Common.selection.VirtualSelection;
# DOMSelection = Common.selection.DOMSelection;
# TextGroupEl = Common.chunk.textChunk.TextGroupEl
# Selection = Common.selection.Selection
# TextMenu = Common.components.TextMenu

# ViewerApp = React.createClass
# 	statics:
# 		textCommands: [
# 			{
# 				label: 'Bookmark',
# 				image: require 'svg-url?noquotes!./bookmark-icon.svg'
# 			},
# 			{
# 				label: 'Comment',
# 				image: require 'svg-url?noquotes!./comment-icon.svg'
# 			} #,
# 			# {
# 			# 	label: 'Ask a Question',
# 			# 	image: require 'svg-url?noquotes!./question-icon.svg'
# 			# }
# 		]

# 	getInitialState: ->
# 		OBO.componentClassMap.register 'Common.Modules.Module', class
# 		@props.moduleData

# 		@props.module.app = @

# 		window.__lo = @props.module

# 		# window.__saveSel = (->
# 		# 	@state.selection.update()
# 		# 	# c = @state.selection.startChunk.getCopyOfSelection()
# 		# 	# console.log(c);
# 		# 	@state.selection.saveVirtualSelection();

# 		# 	# copied = []
# 		# 	len = @state.module.chunks.length
# 		# 	len2 = @state.selection.virtual.all
# 		# 	for chunk in @state.selection.virtual.all
# 		# 		# newChunk = chunk.getCopyOfSelection()

# 		# 		newChunk = chunk.clone(false)
# 		# 		console.log 'newChunk', newChunk
# 		# 		@state.module.chunks.add newChunk

# 		# 	# @state.selection.virtual.__debug_print()

# 		# 	@state.selection.virtual.setStart @state.module.chunks.at(len), @state.selection.virtual.start.data
# 		# 	@state.selection.virtual.setEnd @state.module.chunks.at(@state.module.chunks.length - 1), @state.selection.virtual.end.data


# 		# 	# @state.selection.virtual.__debug_print()


# 		# 	@forceUpdate()
# 		# 	setTimeout((->
# 		# 		console.log('SELECT DOM!');
# 		# 		# @state
# 		# 		@state.selection.selectDOM();

# 		# 	).bind(@), 1)

# 		# ).bind(@)

# 		# window.__saveSel2 = (->
# 		# 	@state.selection.update()

# 		# 	@state.selection.startChunk.highlightSelection();
# 		# 	@forceUpdate();

# 		# ).bind(@)

# 		# window.__ccm = Common.chunk.ComponentClassMap


# 		# selection: new FakeSelectionClass(@props.module)
# 		selection: new Selection(@props.module)
# 		module: @props.module
# 		textCommands: []
# 		highlights: []
# 		# highlights: [{
# 		# 	comment: 'asdf',
# 		# 	selection:
# 		# 		start:
# 		# 			index: 0
# 		# 			data:
# 		# 				groupIndex: 0
# 		# 				offset: 10
# 		# 		end:
# 		# 			index: 0
# 		# 			data:
# 		# 				groupIndex: 0
# 		# 				offset: 20
# 		# 	},
# 		# 	{
# 		# 		comment: '222333',
# 		# 		selection:
# 		# 			start:
# 		# 				index: 0
# 		# 				data:
# 		# 					groupIndex: 0
# 		# 					offset: 35
# 		# 			end:
# 		# 				index: 3
# 		# 				data:
# 		# 					groupIndex: 0
# 		# 					offset: 1
# 		# 	}
# 		# ]

# 	applyHighlights: ->
# 		# @state.selection.saveVirtualSelection()

# 		for highlight in @state.highlights
# 			@state.selection.virtual.fromObject highlight.selection
# 			for chunk in @state.selection.virtual.all
# 				chunk.highlightSelection(highlight.comment)

# 		# @state.selection.restoreVirtualSelection()


# 	_onTextMenuCommand: (commandLabel) ->
# 		switch commandLabel.toLowerCase()
# 			when 'comment'
# 				comment = prompt('Comment?')

# 				@state.selection.update()

# 				for chunk in @state.selection.virtual.all
# 					chunk.highlightSelection(comment);

# 				@forceUpdate();
# 				# document.activeElement = document.body




# 		# @selection.runTextCommands commandLabel
# 		# @updateSelectionFromDOM()
# 		# @saveAndRenderModule()

# 	_onMouseUp: ->
# 		@state.selection.update()
# 		@state.selection.selectDOM()

# 		if @state.selection.virtual.type is 'caret'
# 			textCommands = []
# 		else
# 			textCommands = ViewerApp.textCommands

# 		@setState {
# 			selection: @state.selection
# 			textCommands: textCommands
# 		}

# 	componentDidMount: ->
# 		@applyHighlights()
# 		@forceUpdate()



# 	componentDidUpdate: ->

# 		@state.selection.selectDOM()


# 	render: ->
# 		# Component = OBO.
# 		`<div className="viewer--components--viewer-app document" onMouseUp={this._onMouseUp}>
# 			<main ref="main">
# 				<div ref="container" className='wrapper'>
# 					{
# 						this.props.module.pages.models.map((function(page, index) {
# 							return <div className="page-container" key={index}>
# 								<ViewerPage
# 									module={this.props.module}
# 									page={page}
# 									ref={'viewerPage' + index}
# 								/>
# 							</div>
# 						}).bind(this))
# 					}
# 				</div>
# 			</main>

# 		</div>`

# 	renderOLD: ->
# 		window.__state = @state
# 		window.__sel = @state.selection

# 		`<div className="viewer--components--viewer-app document" onMouseUp={this._onMouseUp}>
# 			<main ref="main">
# 				<div ref="container" className='wrapper'>
# 					{
# 						this.props.module.pages.models.map((function(page, index) {
# 							return <div className="page-container" key={index}>
# 								<ViewerPage
# 									module={this.props.module}
# 									page={page}
# 									ref={'viewerPage' + index}
# 								/>
# 							</div>
# 						}).bind(this))
# 					}
# 					<TextMenu
# 						relativeToElement={this.refs.container}
# 						selectionRect={this.state.selection.rect}
# 						commandHandler={this._onTextMenuCommand}
# 						commands={this.state.textCommands}
# 						enabled={true}
# 					/>
# 				</div>
# 			</main>

# 		</div>`


# module.exports = ViewerApp