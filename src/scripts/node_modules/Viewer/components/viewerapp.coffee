require './viewerapp.scss'

ViewerPage = require './viewerpage'

ObojoboDraft = window.ObojoboDraft
VirtualSelection = ObojoboDraft.selection.VirtualSelection;
DOMSelection = ObojoboDraft.selection.DOMSelection;
TextGroupEl = ObojoboDraft.chunk.textChunk.TextGroupEl
Selection = ObojoboDraft.selection.Selection
TextMenu = ObojoboDraft.components.TextMenu

ViewerApp = React.createClass
	statics:
		textCommands: [
			{
				label: 'Bookmark',
				image: require 'svg-url?noquotes!./bookmark-icon.svg'
			},
			{
				label: 'Comment',
				image: require 'svg-url?noquotes!./comment-icon.svg'
			} #,
			# {
			# 	label: 'Ask a Question',
			# 	image: require 'svg-url?noquotes!./question-icon.svg'
			# }
		]

	getInitialState: ->


		@props.module.app = @

		window.__lo = @props.module

		# window.__saveSel = (->
		# 	@state.selection.update()
		# 	# c = @state.selection.startChunk.getCopyOfSelection()
		# 	# console.log(c);
		# 	@state.selection.saveVirtualSelection();

		# 	# copied = []
		# 	len = @state.module.chunks.length
		# 	len2 = @state.selection.virtual.all
		# 	for chunk in @state.selection.virtual.all
		# 		# newChunk = chunk.getCopyOfSelection()

		# 		newChunk = chunk.clone(false)
		# 		console.log 'newChunk', newChunk
		# 		@state.module.chunks.add newChunk

		# 	# @state.selection.virtual.__debug_print()

		# 	@state.selection.virtual.setStart @state.module.chunks.at(len), @state.selection.virtual.start.data
		# 	@state.selection.virtual.setEnd @state.module.chunks.at(@state.module.chunks.length - 1), @state.selection.virtual.end.data


		# 	# @state.selection.virtual.__debug_print()


		# 	@forceUpdate()
		# 	setTimeout((->
		# 		console.log('SELECT DOM!');
		# 		# @state
		# 		@state.selection.selectDOM();

		# 	).bind(@), 1)

		# ).bind(@)

		# window.__saveSel2 = (->
		# 	@state.selection.update()

		# 	@state.selection.startChunk.highlightSelection();
		# 	@forceUpdate();

		# ).bind(@)

		# window.__ccm = ObojoboDraft.chunk.ComponentClassMap


		# selection: new FakeSelectionClass(@props.module)
		selection: new Selection(@props.module)
		module: @props.module
		textCommands: []
		highlights: []
		# highlights: [{
		# 	comment: 'asdf',
		# 	selection:
		# 		start:
		# 			index: 0
		# 			data:
		# 				groupIndex: 0
		# 				offset: 10
		# 		end:
		# 			index: 0
		# 			data:
		# 				groupIndex: 0
		# 				offset: 20
		# 	},
		# 	{
		# 		comment: '222333',
		# 		selection:
		# 			start:
		# 				index: 0
		# 				data:
		# 					groupIndex: 0
		# 					offset: 35
		# 			end:
		# 				index: 3
		# 				data:
		# 					groupIndex: 0
		# 					offset: 1
		# 	}
		# ]

	applyHighlights: ->
		# @state.selection.saveVirtualSelection()

		for highlight in @state.highlights
			@state.selection.virtual.fromObject highlight.selection
			for chunk in @state.selection.virtual.all
				chunk.highlightSelection(highlight.comment)

		# @state.selection.restoreVirtualSelection()


	_onTextMenuCommand: (commandLabel) ->
		switch commandLabel.toLowerCase()
			when 'comment'
				comment = prompt('Comment?')

				@state.selection.update()

				for chunk in @state.selection.virtual.all
					chunk.highlightSelection(comment);

				@forceUpdate();
				# document.activeElement = document.body




		# @selection.runTextCommands commandLabel
		# @updateSelectionFromDOM()
		# @saveAndRenderModule()

	_onMouseUp: ->
		@state.selection.update()
		@state.selection.selectDOM()

		if @state.selection.virtual.type is 'caret'
			textCommands = []
		else
			textCommands = ViewerApp.textCommands

		@setState {
			selection: @state.selection
			textCommands: textCommands
		}

	componentDidMount: ->
		@applyHighlights()
		@forceUpdate()



	componentDidUpdate: ->

		@state.selection.selectDOM()



	render: ->
		window.__state = @state
		window.__sel = @state.selection

		`<div className="viewer--components--viewer-app document" onMouseUp={this._onMouseUp}>
			<main ref="main">
				<div ref="container" className='wrapper'>
					{
						this.props.module.pages.models.map((function(page, index) {
							return <div className="page-container" key={index}>
								<ViewerPage
									module={this.props.module}
									page={page}
									ref={'viewerPage' + index}
								/>
							</div>
						}).bind(this))
					}
					<TextMenu
						relativeToElement={this.refs.container}
						selectionRect={this.state.selection.rect}
						commandHandler={this._onTextMenuCommand}
						commands={this.state.textCommands}
						enabled={true}
					/>
				</div>
			</main>

		</div>`


module.exports = ViewerApp