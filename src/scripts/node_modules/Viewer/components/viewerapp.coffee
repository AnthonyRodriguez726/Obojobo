require './viewerapp.scss'

NavStore = require 'Viewer/stores/navstore'
InlineNavButton = require 'Viewer/components/inlinenavbutton'

OBO = window.OBO
Common = window.ObojoboDraft.Common
Legacy = Common.models.Legacy
Dispatcher = Common.flux.Dispatcher

OboModel = Common.models.OboModel

JSONInput = require './jsoninput'
Nav = require './nav'

ReactDOM = window.ReactDOM


OBO.triggerActions.say = (model, action) ->
	alert action.value



ViewerApp = React.createClass
	getInitialState: ->
		OBO.loadDependency 'https://cdnjs.cloudflare.com/ajax/libs/KaTeX/0.5.1/katex.min.css'

		navTargetModelId: @props.moduleData.navState.navTarget.value.get('id')

	update: (json) ->
		try
			o = JSON.parse(json)
		catch e
			alert 'Error parsing JSON'
			@setState { model:@state.model }
			return

		localStorage.__lo = json

		newModule = OboModel.create o
		# console.clear()
		# console.log newModule

		@setState {
			model: newModule
		}

	onJsonInputToggle: (val) ->
		if(val)
			document.getElementById('viewer-app').classList.add('debug-edit-json')
		else
			document.getElementById('viewer-app').classList.remove('debug-edit-json')

	onBack: ->
		console.log '@TODO - Should this just be NavStore.goBack() ?'
		Dispatcher.dispatch {
			type: 'navPrev'
		}

	onNext: ->
		Dispatcher.dispatch {
			type: 'navNext'
		}

	componentWillReceiveProps: (nextProps) ->
		nextNavTargetModelId = nextProps.moduleData.navState.navTarget.value.get('id')

		if @state.navTargetModelId isnt nextNavTargetModelId
			# alert 'needs scroll'
			@needsScroll = true
			@setState { navTargetModelId:nextNavTargetModelId }

	componentDidUpdate: ->
		# alert 'here, fixme'
		if @lastCanNavigate isnt NavStore.canNavigate()
			@needsScroll = true
		@lastCanNavigate = NavStore.canNavigate()
		if @needsScroll?
			el = ReactDOM.findDOMNode(@refs.prev)
			if el
				console.log 'CDU', ReactDOM.findDOMNode(@refs.container)
				ReactDOM.findDOMNode(@refs.container).scrollTop = ReactDOM.findDOMNode(el).getBoundingClientRect().height
			else
				ReactDOM.findDOMNode(@refs.container).scrollTop = 0

			delete @needsScroll

	render: ->
		window.__lo = @props.moduleData.model

		ModuleComponent = @props.moduleData.model.getComponentClass()

		prevNav = nextNav = null
		if NavStore.canNavigate()
			prevNav = NavStore.getPrev()
			if prevNav
				prevEl = `<InlineNavButton ref="prev" type="prev" title={prevNav.value.title} />`

			nextNav = NavStore.getNext()
			if nextNav
				nextEl = `<InlineNavButton ref="next" type="next" title={nextNav.value.title} />`

		`<div ref="container" id="--todo-fixme" className={'viewer--viewer-app' + (this.props.moduleData.navState.locked ? ' is-locked-nav' : ' is-unlocked-nav') + (this.props.moduleData.navState.open ? ' is-open-nav' : ' is-closed-nav') + (this.props.moduleData.navState.disabled ? ' is-disabled-nav' : ' is-enabled-nav')}>
			<Nav navState={this.props.moduleData.navState} />
			<JSONInput onToggle={this.onJsonInputToggle} onChange={this.update} value={JSON.stringify(this.props.moduleData.model.toJSON(), null, 2)} />
			{prevEl}
			<ModuleComponent model={this.props.moduleData.model} moduleData={this.props.moduleData} />
			{nextEl}
		</div>`

module.exports = ViewerApp