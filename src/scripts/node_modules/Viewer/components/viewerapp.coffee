require './viewerapp.scss'

InlineNavButton = require 'Viewer/components/inlinenavbutton'
NavUtil = require 'Viewer/util/navutil'

OBO = window.OBO
Common = window.ObojoboDraft.Common
Legacy = Common.models.Legacy

OboModel = Common.models.OboModel

Nav = require './nav'

ReactDOM = window.ReactDOM
Dispatcher = Common.flux.Dispatcher
ModalContainer = Common.components.ModalContainer

Dispatcher.on 'all', (eventName, payload) -> console.log 'EVENT TRIGGERED', eventName

Dispatcher.on 'viewer:alert', (payload) ->
	console.log 'NAV STORE', payload
	alert payload.value.message


ViewerApp = React.createClass

	# === REACT LIFECYCLE METHODS ===

	getInitialState: ->
		OBO.loadDependency 'https://cdnjs.cloudflare.com/ajax/libs/KaTeX/0.5.1/katex.min.css'

		navTargetIndex: @props.moduleData.navState.navTargetIndex

	componentWillReceiveProps: (nextProps) ->
		navTargetIndex = @props.moduleData.navState.navTargetIndex
		nextNavTargetIndex = nextProps.moduleData.navState.navTargetIndex

		if @state.navTargetIndex isnt nextNavTargetIndex
			# alert 'needs scroll'
			@needsScroll = true
			@setState { navTargetIndex:nextNavTargetIndex }

	componentDidUpdate: ->
		# alert 'here, fixme'
		if @lastCanNavigate isnt NavUtil.canNavigate(@props.moduleData.navState)
			@needsScroll = true
		@lastCanNavigate = NavUtil.canNavigate(@props.moduleData.navState)
		if @needsScroll?
			el = ReactDOM.findDOMNode(@refs.prev)
			if el
				ReactDOM.findDOMNode(@refs.container).scrollTop = ReactDOM.findDOMNode(el).getBoundingClientRect().height
			else
				ReactDOM.findDOMNode(@refs.container).scrollTop = 0

			delete @needsScroll

	# === NON REACT LIFECYCLE METHODS ===

	update: (json) ->
		try
			o = JSON.parse(json)
		catch e
			alert 'Error parsing JSON'
			@setState { model:@state.model }
			return

	onBack: ->
		NavUtil.goPrev()

	onNext: ->
		NavUtil.goNext()

	# === RENDER METHODS ===

	render: ->
		window.__lo = @props.moduleData.model

		ModuleComponent = @props.moduleData.model.getComponentClass()

		console.log @props

		prevNav = nextNav = null
		if NavUtil.canNavigate(@props.moduleData.navState)

			prevNav = NavUtil.getPrev @props.moduleData.navState
			if prevNav
				prevEl = `<InlineNavButton ref="prev" type="prev" title={OboModel.models[prevNav.id].title} />`
			else
				prevEl = `<InlineNavButton ref="prev" type="prev" title="Start of content" disabled />`

			nextNav = NavUtil.getNext @props.moduleData.navState
			if nextNav
				nextEl = `<InlineNavButton ref="next" type="next" title={OboModel.models[nextNav.id].title} />`
			else
				nextEl = `<InlineNavButton ref="next" type="next" title="End of content" disabled />`

		`<div ref="container" id="--todo-fixme" className={'viewer--viewer-app' + (this.props.moduleData.navState.locked ? ' is-locked-nav' : ' is-unlocked-nav') + (this.props.moduleData.navState.open ? ' is-open-nav' : ' is-closed-nav') + (this.props.moduleData.navState.disabled ? ' is-disabled-nav' : ' is-enabled-nav')}>
			<Nav navState={this.props.moduleData.navState} />
			{prevEl}
			<ModuleComponent model={this.props.moduleData.model} moduleData={this.props.moduleData} />
			{nextEl}
			{
				this.props.moduleData.modalState.modal
				?
				<ModalContainer>
					{this.props.moduleData.modalState.modal}
				</ModalContainer>
				:
				null
			}
		</div>`

module.exports = ViewerApp
