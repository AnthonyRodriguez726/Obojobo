require './viewerapp.scss'

NavStore = require 'Viewer/stores/navstore'
InlineNavButton = require 'Viewer/components/inlinenavbutton'
NavUtil = require 'Viewer/util/navutil'

OBO = window.OBO
Common = window.ObojoboDraft.Common
Legacy = Common.models.Legacy

OboModel = Common.models.OboModel

JSONInput = require './jsoninput'
Nav = require './nav'

ReactDOM = window.ReactDOM
Dispatcher = Common.flux.Dispatcher


#@TODO - Put these somewhere!
#@TODO - Set timeouts! :((((((
# OBO.triggerActions.say = (model, action) ->
# 	alert action.value


# AssessmentUtil = require 'Viewer/util/assessmentutil'

# OBO.triggerActions.startAttempt = (model, action) ->
# 	# setTimeout ->
# 	AssessmentUtil.startAttempt OboModel.models[action.value]


# OBO.triggerActions.navDisable = (model, action) ->
# 	NavUtil.disable()

# OBO.triggerActions.navEnable = (model, action) ->
# 	NavUtil.enable()

# OBO.triggerActions.navLock = (model, action) ->
# 	NavUtil.lock()

# OBO.triggerActions.navUnlock = (model, action) ->
# 	NavUtil.unlock()

# OBO.triggerActions.navOpen = (model, action) ->
# 	NavUtil.open()

# OBO.triggerActions.navClose = (model, action) ->
# 	NavUtil.close()

# OBO.triggerActions.navGoto = (model, action) ->
# 	NavUtil.goto action.value
Dispatcher.register (payload) ->
	console.log 'NAV STORE', payload
	switch payload.type
		when 'viewer:alert'
			alert payload.value.message





ViewerApp = React.createClass
	getInitialState: ->
		OBO.loadDependency 'https://cdnjs.cloudflare.com/ajax/libs/KaTeX/0.5.1/katex.min.css'

		navTargetIndex: @props.moduleData.navState.navTargetIndex

	update: (json) ->
		try
			o = JSON.parse(json)
		catch e
			alert 'Error parsing JSON'
			@setState { model:@state.model }
			return

		localStorage.__lo = json

		newModule = OboModel.create o
		# console.clear()
		# console.log newModule

		@setState {
			model: newModule
		}

	onJsonInputToggle: (val) ->
		if(val)
			document.getElementById('viewer-app').classList.add('debug-edit-json')
		else
			document.getElementById('viewer-app').classList.remove('debug-edit-json')

	onBack: ->
		NavUtil.goPrev()

	onNext: ->
		NavUtil.goNext()

	componentWillReceiveProps: (nextProps) ->
		navTargetIndex = @props.moduleData.navState.navTargetIndex
		nextNavTargetIndex = nextProps.moduleData.navState.navTargetIndex

		if @state.navTargetIndex isnt nextNavTargetIndex
			# alert 'needs scroll'
			@needsScroll = true
			@setState { navTargetIndex:nextNavTargetIndex }

	componentDidUpdate: ->
		# alert 'here, fixme'
		if @lastCanNavigate isnt NavStore.canNavigate()
			@needsScroll = true
		@lastCanNavigate = NavStore.canNavigate()
		if @needsScroll?
			el = ReactDOM.findDOMNode(@refs.prev)
			if el
				console.log 'CDU', ReactDOM.findDOMNode(@refs.container)
				ReactDOM.findDOMNode(@refs.container).scrollTop = ReactDOM.findDOMNode(el).getBoundingClientRect().height
			else
				ReactDOM.findDOMNode(@refs.container).scrollTop = 0

			delete @needsScroll

	render: ->
		window.__lo = @props.moduleData.model

		ModuleComponent = @props.moduleData.model.getComponentClass()

		prevNav = nextNav = null
		if NavStore.canNavigate()
			prevNav = NavUtil.getPrev @props.moduleData.navState
			if prevNav
				prevEl = `<InlineNavButton ref="prev" type="prev" title={OboModel.models[prevNav.id].title} />`

			nextNav = NavUtil.getNext @props.moduleData.navState
			if nextNav
				nextEl = `<InlineNavButton ref="next" type="next" title={OboModel.models[nextNav.id].title} />`

		`<div ref="container" id="--todo-fixme" className={'viewer--viewer-app' + (this.props.moduleData.navState.locked ? ' is-locked-nav' : ' is-unlocked-nav') + (this.props.moduleData.navState.open ? ' is-open-nav' : ' is-closed-nav') + (this.props.moduleData.navState.disabled ? ' is-disabled-nav' : ' is-enabled-nav')}>
			<Nav navState={this.props.moduleData.navState} />
			<JSONInput onToggle={this.onJsonInputToggle} onChange={this.update} value={JSON.stringify(this.props.moduleData.model.toJSON(), null, 2)} />
			{prevEl}
			<ModuleComponent model={this.props.moduleData.model} moduleData={this.props.moduleData} />
			{nextEl}
		</div>`

module.exports = ViewerApp