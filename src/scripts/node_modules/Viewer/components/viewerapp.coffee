require './viewerapp.scss'

JSONInput = require 'Viewer/components/jsoninput'

InlineNavButton = require 'Viewer/components/inlinenavbutton'
NavUtil = require 'Viewer/util/navutil'
Logo = require 'Viewer/components/logo'

OBO = window.OBO
Common = window.ObojoboDraft.Common
Legacy = Common.models.Legacy
DOMUtil = Common.page.DOMUtil
Screen = Common.page.Screen

OboModel = Common.models.OboModel

Nav = require './nav'

ReactDOM = window.ReactDOM
Dispatcher = Common.flux.Dispatcher
ModalContainer = Common.components.ModalContainer
SimpleDialog = Common.components.modal.SimpleDialog
ModalUtil = Common.util.ModalUtil
FocusBlocker = Common.components.FocusBlocker


NavStore = require 'Viewer/stores/navstore'
ModalStore = window.ObojoboDraft.Common.stores.ModalStore
NavStore = require 'Viewer/stores/navstore'
ScoreStore = require 'Viewer/stores/scorestore'
QuestionStore = require 'Viewer/stores/questionstore'
AssessmentStore = require 'Viewer/stores/assessmentstore'
FocusStore = ObojoboDraft.Common.stores.FocusStore
FocusUtil = ObojoboDraft.Common.util.FocusUtil
OboGlobals = ObojoboDraft.Common.util.OboGlobals
Sketchpad = require 'Viewer/components/sketchpad'




# Dispatcher.on 'all', (eventName, payload) -> console.log 'EVENT TRIGGERED', eventName

Dispatcher.on 'viewer:alert', (payload) ->
	ModalUtil.show `<SimpleDialog ok title={payload.value.title}>{payload.value.message}</SimpleDialog>`

ViewerApp = React.createClass

	# === REACT LIFECYCLE METHODS ===

	getInitialState: ->
		OBO.loadDependency 'https://cdnjs.cloudflare.com/ajax/libs/KaTeX/0.5.1/katex.min.css'

		Dispatcher.on 'viewer:scrollTo', ((payload) ->
			ReactDOM.findDOMNode(@refs.container).scrollTop = payload.value
		).bind(@)

		Dispatcher.on 'viewer:scrollToTop', @scrollToTop.bind(@)
		Dispatcher.on 'getTextForVariable', @getTextForVariable.bind(@)

		@isPreviewing = OboGlobals.get 'previewing'

		state =
			model: OboModel.create(OboGlobals.get('draft'))
			navState: null
			scoreState: null
			questionState: null
			assessmentState: null
			modalState: null
			focusState: null
			navTargetId: null
			sketchpadOpen: false

		ScoreStore.init()
		QuestionStore.init()
		ModalStore.init()
		FocusStore.init()

		NavStore.init state.model, state.model.modelState.start, window.location.pathname
		AssessmentStore.init OboGlobals.get('ObojoboDraft.Sections.Assessment:attemptHistory')

		state.navState = NavStore.getState()
		state.scoreState = ScoreStore.getState()
		state.questionState = QuestionStore.getState()
		state.assessmentState = AssessmentStore.getState()
		state.modalState = ModalStore.getState()
		state.focusState = FocusStore.getState()

		state

	componentWillMount: ->
		# === SET UP DATA STORES ===
		NavStore.onChange        => @setState { navState: NavStore.getState() }
		ScoreStore.onChange      => @setState { scoreState: ScoreStore.getState() }
		QuestionStore.onChange   => @setState { questionState: QuestionStore.getState() }
		AssessmentStore.onChange => @setState { assessmentState: AssessmentStore.getState() }
		ModalStore.onChange      => @setState { modalState: ModalStore.getState() }
		FocusStore.onChange      => @setState { focusState: FocusStore.getState() }

	componentWillUpdate: (nextProps, nextState) ->
		navTargetId     = @state.navTargetId
		nextNavTargetId = @state.navState.navTargetId

		if navTargetId isnt nextNavTargetId
			@needsScroll = true
			@setState { navTargetId:nextNavTargetId }

	componentDidUpdate: ->
		# alert 'here, fixme'
		if @lastCanNavigate isnt NavUtil.canNavigate(@state.navState)
			@needsScroll = true
		@lastCanNavigate = NavUtil.canNavigate(@state.navState)
		if @needsScroll?
			@scrollToTop()

			delete @needsScroll

	getTextForVariable: (event, variable, textModel) ->
		event.text = OBO.getTextForVariable(variable, textModel, @state)

	scrollToTop: ->
		el = ReactDOM.findDOMNode(@refs.prev)
		if el
			ReactDOM.findDOMNode(@refs.container).scrollTop = ReactDOM.findDOMNode(el).getBoundingClientRect().height
		else
			ReactDOM.findDOMNode(@refs.container).scrollTop = 0

	# === NON REACT LIFECYCLE METHODS ===

	update: (json) ->
		try
			o = JSON.parse(json)
		catch e
			alert 'Error parsing JSON'
			@setState { model:@state.model }
			return

	onBack: ->
		NavUtil.goPrev()

	onNext: ->
		NavUtil.goNext()

	onMouseDown: (event) ->
		if not @state.focusState.focussedId? then return
		if not DOMUtil.findParentComponentIds(event.target).has(@state.focusState.focussedId)
			FocusUtil.unfocus()

	onScroll: (event) ->
		if not @state.focusState.focussedId? then return

		component = FocusUtil.getFocussedComponent(@state.focusState)
		if not component? then return

		el = component.getDomEl()
		if not el then return

		if not Screen.isElementVisible(el)
			FocusUtil.unfocus()

	onChangeJSON: (json) ->
		try
			o = JSON.parse(json)
		catch e
			alert 'Error parsing JSON'
			return

		OboModel = window.ObojoboDraft.Common.models.OboModel
		newModule = OboModel.create o

		NavStore.init newModule, newModule.modelState.start
		ScoreStore.init()
		QuestionStore.init()
		AssessmentStore.init()
		ModalStore.init()
		FocusStore.init()

		@setState {
			model: newModule
			navState: NavStore.getState()
			scoreState: ScoreStore.getState()
			questionState: QuestionStore.getState()
			assessmentState: AssessmentStore.getState()
			modalState: ModalStore.getState()
			focusState: FocusStore.getState()
		}

	resetAssessments: ->
		AssessmentStore.init()
		QuestionStore.init()
		ScoreStore.init()

		AssessmentStore.triggerChange()
		QuestionStore.triggerChange()
		ScoreStore.triggerChange()

		ModalUtil.show `<SimpleDialog ok width="15em">Assessment attempts and all question responses have been reset.</SimpleDialog>`

	unlockNavigation: ->
		NavUtil.unlock()

	onSketchpadClose: ->
		@setState({ sketchpadOpen:false })

	onSketchpadOpen: ->
		@setState({ sketchpadOpen:true })

	render: ->
		window.__lo = @state.model
		window.__s = @state

		ModuleComponent = @state.model.getComponentClass()

		#<JSONInput onChange={this.onChangeJSON} value={JSON.stringify(this.state.model.toJSON(), null, 2)} />

		navTargetModel = NavUtil.getNavTargetModel @state.navState
		navTargetTitle = '?'
		if(navTargetModel?)
			navTargetTitle = navTargetModel.title

		prevModel = nextModel = null
		if NavUtil.canNavigate(@state.navState)

			prevModel = NavUtil.getPrevModel @state.navState
			if prevModel
				prevEl = `<InlineNavButton ref="prev" type="prev" title={'Back: ' + prevModel.title} />`
			else
				prevEl = `<InlineNavButton ref="prev" type="prev" title={"Start of " + this.state.model.title} disabled />`

			nextModel = NavUtil.getNextModel @state.navState
			if nextModel
				nextEl = `<InlineNavButton ref="next" type="next" title={'Next: ' + nextModel.title} />`
			else
				nextEl = `<InlineNavButton ref="next" type="next" title={"End of " + this.state.model.title} disabled />`

		modal = ModalUtil.getCurrentModal @state.modalState

		`<div ref="container" onMouseDown={this.onMouseDown} onScroll={this.onScroll} className={'viewer--viewer-app' + (this.isPreviewing ? ' is-previewing' : ' is-not-previewing') + (this.state.navState.locked ? ' is-locked-nav' : ' is-unlocked-nav') + (this.state.navState.open ? ' is-open-nav' : ' is-closed-nav') + (this.state.navState.disabled ? ' is-disabled-nav' : ' is-enabled-nav') + ' is-focus-state-' + this.state.focusState.viewState + (this.state.sketchpadOpen ? ' is-sketching' : ' is-not-sketching')}>
			<header>
				<div className="pad">
					<span className="module-title">{this.state.model.title}</span>
					<span className="location">{navTargetTitle}</span>
					<Logo />
				</div>
			</header>
			<Nav navState={this.state.navState} />
			{prevEl}
			<ModuleComponent model={this.state.model} moduleData={this.state} />
			{nextEl}
			{
				this.isPreviewing
				?
				<div className="preview-banner">
					<span>You are previewing this object - Assessments will not be counted</span>
					<div className="controls">
						<button onClick={this.unlockNavigation} disabled={!this.state.navState.locked}>Unlock navigation</button>
						<button onClick={this.resetAssessments}>Reset assessments &amp; questions</button>
					</div>
				</div>
				:
				null
			}
			<FocusBlocker moduleData={this.state} />
			{
				modal
				?
				<ModalContainer>
					{modal}
				</ModalContainer>
				:
				null
			}
			<Sketchpad open={this.state.sketchpadOpen} onClose={this.onSketchpadClose} onOpen={this.onSketchpadOpen} />

		</div>`

module.exports = ViewerApp
