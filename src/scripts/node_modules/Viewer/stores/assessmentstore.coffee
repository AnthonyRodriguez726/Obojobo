ScoreStore = require './scorestore'
AssessmentUtil = require 'Viewer/util/assessmentutil'

Store = window.ObojoboDraft.Common.flux.Store
Dispatcher = window.ObojoboDraft.Common.flux.Dispatcher
OboModel = window.ObojoboDraft.Common.models.OboModel


state = {
	assessments: {}
}


generateNewAttempt = ->
	scores: {},
	data: {}


AssessmentStore = Object.assign(new Store(),
	getState: -> state

	setState: (newState) -> state = newState
)

Dispatcher.register (payload) ->
	switch payload.type
		when 'assessment:startAttempt' # value = OboModel id
			id = payload.value.id
			model = OboModel.models[id]

			if not state.assessments[id]
				state.assessments[id] = {
					current: null,
					attempts: [],
					data: {}
				}

			lastAttempt = AssessmentUtil.getLastAttemptForModel state, model
			if lastAttempt
				for question in lastAttempt # state.assessments[id].attempts[state.assessments[id].attempts.length - 1]
					ScoreStore.clearScore question

			state.assessments[id].current = generateNewAttempt()

			model.processTrigger 'onStartAttempt'

		when 'assessment:endAttempt'
			id = payload.value.id
			model = OboModel.models[id]

			assessment = state.assessments[id]

			assessment.attempts.push assessment.current
			assessment.current = null

			model.processTrigger 'onEndAttempt'

		when 'score:set'
			id = payload.value.id
			model = OboModel.models[id]

			assessment = AssessmentUtil.getAssessmentForModel state, model
			if assessment?.current?.scores[id]?
				assessment.current.scores[id] = payload.value.score

		when 'assessment:registerQuestionForAttempt'
			id = payload.value.id
			model = OboModel.models[id]

			assessment = AssessmentUtil.getAssessmentForModel state, model
			if assessment?.current?
				assessment.current.scores[id] = 0

		when 'assessment:registerDataForAssessment'
			id = payload.value.id
			model = OboModel.models[id]

			key = payload.value.dataKey
			value = payload.value.dataValue

			assessment = AssessmentUtil.getAssessmentForModel state, model

			if assessment.data?
				assessment.data[key] = value

		when 'assessment:registerDataForCurrentAttempt'
			id = payload.value.id
			model = OboModel.models[id]

			key = payload.value.dataKey
			value = payload.value.dataValue

			assessment = AssessmentUtil.getAssessmentForModel state, model

			if assessment.current?
				assessment.current.data[key] = value

	AssessmentStore.emitChange()


module.exports = AssessmentStore