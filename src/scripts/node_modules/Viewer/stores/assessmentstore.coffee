AssessmentUtil = require 'Viewer/util/assessmentutil'
ScoreUtil = require 'Viewer/util/scoreutil'
QuestionUtil = require 'Viewer/util/questionutil'
APIUtil = require 'Viewer/util/apiutil'
NavUtil = require 'Viewer/util/navutil'

Store = window.ObojoboDraft.Common.flux.Store
Dispatcher = window.ObojoboDraft.Common.flux.Dispatcher
OboModel = window.ObojoboDraft.Common.models.OboModel
# ErrorDialog = window.ObojoboDraft.Common.components.modal.ErrorDialog
ErrorUtil = window.ObojoboDraft.Common.util.ErrorUtil

class AssessmentStore extends Store
	constructor: ->
		super('assessmentstore')

		Dispatcher.on 'assessment:startAttempt', (payload) =>
			id = payload.value.id
			model = OboModel.models[id]

			APIUtil.startAttempt(model.getRoot(), model, {})
			.then (res) =>
				if res.status is 'error' then return ErrorUtil.errorResponse res

				model.children.at(1).children.reset()
				# debugger
				for child in res.value.questions
					c = OboModel.create(child)
					console.log('ADD', child, c)
					model.children.at(1).children.add c
				# newAssessment = OboModel.create(res.value.assessment)
				# model.children.reset newAssessment.children
				# debugger

				if not @state.assessments[id]
					@state.assessments[id] =
						current: null
						attempts: []

				@state.assessments[id].current = @generateNewAttempt res.value.attemptId, res.value.questions

				console.log('NOW STATE IS', @state)

				NavUtil.rebuildMenu model.getRoot()

				model.processTrigger 'onStartAttempt'
				@triggerChange()

		Dispatcher.on 'assessment:endAttempt', (payload) =>
			console.log 'ASS STATE', @state
			id = payload.value.id
			model = OboModel.models[id]

			assessment = @state.assessments[id]

			APIUtil.endAttempt(assessment.current)
			.then (res) =>
				if res.status is 'error' then return ErrorUtil.errorResponse res

				assessment.current.questions.forEach (question) ->
					QuestionUtil.hideQuestion question.id
					QuestionUtil.resetResponse question.id

				assessment.current.result = res.value

				assessment.attempts.push assessment.current
				assessment.current = null

				model.processTrigger 'onEndAttempt'
				@triggerChange()

		Dispatcher.on 'question:recordResponse', (payload) =>
			id = payload.value.id
			model = OboModel.models[id]

			console.log 'SET RESPONSE', payload, model

			assessment = AssessmentUtil.getAssessmentForModel @state, model
			# if typeof assessment?.current?.responses[id] isnt "undefined"
			# debugger

			if assessment?.current?
				questionModel = model.getParentOfType('ObojoboDraft.Chunks.Question')
				console.log('QUESTION SET RESPONSE', questionModel)
				APIUtil.postEvent model.getRoot(), 'question:recordResponse', {
					attemptId: assessment.current.id,
					questionId: questionModel.get('id'),
					responderId: id,
					response: payload.value.response
				}
				# APIUtil.recordQuestionResponse assessment.current, questionModel, payload.value.response

				@triggerChange()

	init: ->
		@state = {
			assessments: {}
		}

	generateNewAttempt: (id, questions) ->
		id: id
		questions: questions
		score: null

	getState: -> @state

	setState: (newState) -> @state = newState


assessmentStore = new AssessmentStore()
module.exports = assessmentStore
