ScoreStore = require './scorestore'

Store = window.ObojoboDraft.Common.flux.Store
Dispatcher = window.ObojoboDraft.Common.flux.Dispatcher

state = {
	assessments: {}
}

AssessmentStore = Object.assign(new Store(),
	getState: -> state
)

AssessmentStore.dispatchToken = Dispatcher.register (payload) ->
	switch payload.type
		when 'startAttempt' # value = OboModel
			id = payload.value.model.get('id')
			if not state.assessments[id]
				state.assessments[id] = {
					current: null,
					attempts: []
				}

			if state.assessments[id].attempts.length > 0
				console.log state
				for question in state.assessments[id].attempts[state.assessments[id].attempts.length - 1]
					ScoreStore.clearScore question

			state.assessments[id].current = {}

		when 'endAttempt'
			assessment = state.assessments[payload.value.model.get('id')]

			assessment.attempts.push assessment.current
			assessment.current = null

		when 'setScore'
			question = payload.value.model
			assessmentModel = question.getParentOfType 'ObojoboDraft.Sections.Assessment'

			if assessmentModel
				assessment = state.assessments[assessmentModel.get('id')]

				if assessment
					assessment.current[question.get('id')] = payload.value.score


	AssessmentStore.emitChange()


module.exports = AssessmentStore