AssessmentUtil = require 'Viewer/util/assessmentutil'
ScoreUtil = require 'Viewer/util/scoreutil'

Store = window.ObojoboDraft.Common.flux.Store
Dispatcher = window.ObojoboDraft.Common.flux.Dispatcher
OboModel = window.ObojoboDraft.Common.models.OboModel


class AssessmentStore extends Store
	constructor: ->
		super('assessmentstore')

		@state = {
			assessments: {}
		}

		Dispatcher.on 'assessment:startAttempt', (payload) =>
			id = payload.value.id
			model = OboModel.models[id]

			if not @state.assessments[id]
				@state.assessments[id] =
					current: null
					attempts: []
					data: {}

			lastAttempt = AssessmentUtil.getLastAttemptForModel @state, model
			if lastAttempt
				for question in lastAttempt
					ScoreUtil.clearScore question

			@state.assessments[id].current = @generateNewAttempt()

			model.processTrigger 'onStartAttempt'
			@triggerChange()

		Dispatcher.on 'assessment:endAttempt', (payload) =>
			id = payload.value.id
			model = OboModel.models[id]

			assessment = @state.assessments[id]

			for id in assessment.current.viewed
				ScoreUtil.hideQuestion id

			assessment.attempts.push assessment.current
			assessment.current = null

			model.processTrigger 'onEndAttempt'
			@triggerChange()

		Dispatcher.on 'score:viewQuestion', (payload) =>
			id = payload.value.id
			model = OboModel.models[id]

			assessment = AssessmentUtil.getAssessmentForModel @state, model
			if assessment?.current?
				assessment.current.viewed.push payload.value.id

		Dispatcher.on 'score:set', (payload) =>
			id = payload.value.id
			model = OboModel.models[id]

			assessment = AssessmentUtil.getAssessmentForModel @state, model
			if typeof assessment?.current?.scores[id] isnt "undefined"
				assessment.current.scores[id] = payload.value.score
			@triggerChange()

		Dispatcher.on 'assessment:registerQuestionForAttempt', (payload) =>
			id = payload.value.id
			model = OboModel.models[id]

			assessment = AssessmentUtil.getAssessmentForModel @state, model
			if assessment?.current?
				assessment.current.scores[id] = null
			@triggerChange()

		Dispatcher.on 'assessment:registerDataForAssessment', (payload) =>
			id = payload.value.id
			model = OboModel.models[id]

			key = payload.value.dataKey
			value = payload.value.dataValue

			assessment = AssessmentUtil.getAssessmentForModel @state, model

			if assessment.data?
				assessment.data[key] = value
			@triggerChange()

		Dispatcher.on 'assessment:registerDataForCurrentAttempt', (payload) =>
			id = payload.value.id
			model = OboModel.models[id]

			key = payload.value.dataKey
			value = payload.value.dataValue

			assessment = AssessmentUtil.getAssessmentForModel @state, model

			if assessment.current?
				assessment.current.data[key] = value
			@triggerChange()


	generateNewAttempt: ->
		scores: {}
		data: {}
		viewed: []

	getState: -> @state

	setState: (newState) -> @state = newState


assessmentStore = new AssessmentStore()
module.exports = assessmentStore
