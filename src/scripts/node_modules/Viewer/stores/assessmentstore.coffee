ScoreStore = require './scorestore'
AssessmentUtil = require 'Viewer/util/assessmentutil'

Store = window.ObojoboDraft.Common.flux.Store
Dispatcher = window.ObojoboDraft.Common.flux.Dispatcher



state = {
	assessments: {}
}


generateNewAttempt = ->
	scores: {},
	data: new Map()


AssessmentStore = Object.assign(new Store(),
	getState: -> state
)

AssessmentStore.dispatchToken = Dispatcher.register (payload) ->
	switch payload.type
		when 'startAttempt' # value = OboModel
			id = payload.value.model.get('id')
			if not state.assessments[id]
				state.assessments[id] = {
					current: null,
					attempts: []
				}

			lastAttempt = AssessmentUtil.getLastAttemptForModel state, payload.value.model
			if lastAttempt
				for question in lastAttempt # state.assessments[id].attempts[state.assessments[id].attempts.length - 1]
					ScoreStore.clearScore question

			state.assessments[id].current = generateNewAttempt()

			payload.value.model.processTrigger 'onStartAttempt'

		when 'endAttempt'
			assessment = state.assessments[payload.value.model.get('id')]

			assessment.attempts.push assessment.current
			assessment.current = null

			payload.value.model.processTrigger 'onEndAttempt'

		when 'setScore'
			question = payload.value.model
			assessment = AssessmentUtil.getAssessmentForModel state, question
			if assessment?.current?.scores[question.get('id')]?
				assessment.current.scores[question.get('id')] = payload.value.score

		when 'registerQuestionForAttempt'
			question = payload.value.model
			assessment = AssessmentUtil.getAssessmentForModel state, question
			if assessment?.current?
				assessment.current.scores[question.get('id')] = 0

		when 'registerDataForAttempt'
			model = payload.value.model
			key = payload.value.dataKey
			value = payload.value.dataValue

			assessment = AssessmentUtil.getAssessmentForModel state, model

			if assessment.current?
				assessment.current.data.set key, value

	AssessmentStore.emitChange()


module.exports = AssessmentStore