AssessmentUtil = require 'Viewer/util/assessmentutil'
ScoreUtil = require 'Viewer/util/scoreutil'
QuestionUtil = require 'Viewer/util/questionutil'
APIUtil = require 'Viewer/util/apiutil'

Store = window.ObojoboDraft.Common.flux.Store
Dispatcher = window.ObojoboDraft.Common.flux.Dispatcher
OboModel = window.ObojoboDraft.Common.models.OboModel
# ErrorDialog = window.ObojoboDraft.Common.components.modal.ErrorDialog
ErrorUtil = window.ObojoboDraft.Common.util.ErrorUtil

class AssessmentStore extends Store
	constructor: ->
		super('assessmentstore')

		@state = {
			assessments: {}
		}

		Dispatcher.on 'assessment:startAttempt', (payload) =>
			id = payload.value.id
			model = OboModel.models[id]

			APIUtil.startAttempt(model.getRoot(), model, {})
			.then (res) =>
				if res.status is 'error' then return ErrorUtil.errorResponse res

				model.children.at(1).children.reset()
				# debugger
				for child in res.value.questions
					c = OboModel.create(child)
					console.log('ADD', child, c)
					model.children.at(1).children.add c
				# newAssessment = OboModel.create(res.value.assessment)
				# model.children.reset newAssessment.children
				# debugger

				if not @state.assessments[id]
					@state.assessments[id] =
						current: null
						attempts: []
						data: {}

				lastAttempt = AssessmentUtil.getLastAttemptForModel @state, model
				if lastAttempt
					for question in lastAttempt
						ScoreUtil.clearScore question

				@state.assessments[id].current = @generateNewAttempt res.value.attemptId

				console.log('NOW STATE IS', @state)

				model.processTrigger 'onStartAttempt'
				@triggerChange()

		Dispatcher.on 'assessment:endAttempt', (payload) =>
			console.log 'ASS STATE', @state
			id = payload.value.id
			model = OboModel.models[id]

			assessment = @state.assessments[id]

			APIUtil.endAttempt(assessment.current)
			.then (res) =>
				if res.status is 'error' then return ErrorUtil.errorResponse res

				for id in assessment.current.viewed
					QuestionUtil.hideQuestion id

				# debugger
				for id of assessment.current.responses
					console.log 'RESET RESPONSE', id
					QuestionUtil.resetResponse id

				assessment.current.score = res.value.score

				assessment.attempts.push assessment.current
				assessment.current = null

				model.processTrigger 'onEndAttempt'
				@triggerChange()

		Dispatcher.on 'question:view', (payload) =>
			id = payload.value.id
			model = OboModel.models[id]

			assessment = AssessmentUtil.getAssessmentForModel @state, model
			if assessment?.current?
				assessment.current.viewed.push payload.value.id

		# Dispatcher.on 'score:set', (payload) =>
		# 	id = payload.value.id
		# 	model = OboModel.models[id]

		# 	assessment = AssessmentUtil.getAssessmentForModel @state, model
		# 	if typeof assessment?.current?.scores[id] isnt "undefined"
		# 		assessment.current.scores[id] = payload.value.score

		# 		APIUtil.recordQuestionResponse assessment.current, model
		# 	@triggerChange()
		Dispatcher.on 'question:setResponse', (payload) =>
			id = payload.value.id
			model = OboModel.models[id]

			console.log 'SET RESPONSE', payload, model

			assessment = AssessmentUtil.getAssessmentForModel @state, model
			# if typeof assessment?.current?.responses[id] isnt "undefined"
			if assessment?.current?.responses?
				assessment.current.responses[id] = payload.value.response

				console.log('@TODO - Howsa?')
				questionModel = model.getParentOfType('ObojoboDraft.Chunks.Question')
				console.log('QUESTION SET RESPONSE', questionModel)
				APIUtil.postEvent model.getRoot(), 'question:setResponse', {
					attemptId: assessment.current.id,
					questionId: questionModel.get('id'),
					response: payload.value.response
				}
				# APIUtil.recordQuestionResponse assessment.current, questionModel, payload.value.response

				@triggerChange()

		Dispatcher.on 'assessment:registerQuestionForAttempt', (payload) =>
			console.log('@TODO - THIS DOES NOTHING!')
			# id = payload.value.id
			# model = OboModel.models[id]

			# assessment = AssessmentUtil.getAssessmentForModel @state, model
			# if assessment?.current?
			# 	assessment.current.responses[id] = null
			# @triggerChange()

		Dispatcher.on 'assessment:registerDataForAssessment', (payload) =>
			id = payload.value.id
			model = OboModel.models[id]

			key = payload.value.dataKey
			value = payload.value.dataValue

			assessment = AssessmentUtil.getAssessmentForModel @state, model

			if assessment.data?
				assessment.data[key] = value
			@triggerChange()

		Dispatcher.on 'assessment:registerDataForCurrentAttempt', (payload) =>
			id = payload.value.id
			model = OboModel.models[id]

			key = payload.value.dataKey
			value = payload.value.dataValue

			assessment = AssessmentUtil.getAssessmentForModel @state, model

			if assessment.current?
				assessment.current.data[key] = value
			@triggerChange()


	generateNewAttempt: (id) ->
		id: id
		responses: {}
		data: {}
		viewed: []
		score: 0

	getState: -> @state

	setState: (newState) -> @state = newState


assessmentStore = new AssessmentStore()
module.exports = assessmentStore
