NavUtil = require 'Viewer/util/navutil'

OBO = window.OBO
Store = window.ObojoboDraft.Common.flux.Store
Dispatcher = window.ObojoboDraft.Common.flux.Dispatcher
OboModel = window.ObojoboDraft.Common.models.OboModel

class NavStore extends Store
	constructor: ->
		super('navstore')

		Dispatcher.on
			'nav:rebuildMenu': (payload) =>
				@buildMenu payload.value.model
				@triggerChange()
			'nav:gotoPath': (payload) =>
				@gotoItem @state.itemsByPath[payload.value.path]
			'nav:setFlag': (payload) ->
				navItem = @state.itemsById[payload.value.id]
				navItem.flags[payload.value.flagName] = payload.value.flagValue

				@triggerChange()
			'nav:prev':    (payload) =>
				@gotoItem NavUtil.getPrev(@state)
			'nav:next':    (payload) =>
				@gotoItem NavUtil.getNext(@state)
			'nav:goto':    (payload) =>
				@gotoItem @state.itemsById[payload.value.id]
			'nav:lock':    (payload) => @setAndTrigger({locked: true})
			'nav:unlock':  (payload) => @setAndTrigger({locked: false})
			'nav:close':   (payload) => @setAndTrigger({open: false})
			'nav:open':    (payload) => @setAndTrigger({open: true})
			'nav:disable': (payload) => @setAndTrigger({disabled: true, locked: true, open: false})
			'nav:enable':  (payload) => @setAndTrigger({disabled: false, locked: false})
			'nav:toggle':  (payload) => @setAndTrigger({open: !@state.open})
			'nav:openExternalLink': (payload) =>
				window.open(payload.value.url)
				@triggerChange()
			'nav:showChildren': (payload) =>
				item = @state.itemsById[payload.value.id]
				item.showChildren = true
				@triggerChange()
			'nav:hideChildren': (payload) =>
				item = @state.itemsById[payload.value.id]
				item.showChildren = false
				@triggerChange()
			'score:set': (payload) =>
				navItem = @state.itemsById[payload.value.id]
				if not navItem then return

				NavUtil.setFlag payload.value.id, 'correct', true
		, @

	init: (model, startingId, startingPath) ->
		@state = {
			items: {}
			itemsById: {}
			itemsByPath: {}
			navTargetHistory: []
			navTargetId: null
			locked: false
			open: false
		}


		@buildMenu model
		# console.clear()
		console.log @state.items
		# debugger
		NavUtil.gotoPath startingPath

		# if startingId?
		# 	@gotoIndex NavUtil.getIndexById(@state, startingId)
		# else
		# 	@gotoIndex NavUtil.getNextIndex(@state)

	buildMenu: (model) ->
		@state.itemsById = {}
		@state.itemsByPath = {}
		@state.items = @generateNav model

	gotoItem: (navItem) ->
		if not navItem then return

		if @state.navTargetId?
			navTargetModel = NavUtil.getNavTargetModel(@state)?.processTrigger 'onNavExit'
			@state.navTargetHistory.push @state.navTargetId
			@state.itemsById[@state.navTargetId].showChildren = false

		navItem.showChildren = true
		window.history.pushState {}, 'title123', navItem.fullFlatPath
		@state.navTargetId = navItem.id
		NavUtil.getNavTargetModel(@state).processTrigger 'onNavEnter'
		@triggerChange()

	generateNav: (model, indent = '') ->
		item = OBO.getItemForType(model.get('type'))

		navItem = null
		if item.getNavItem?
			navItem = item.getNavItem(model)

		if not navItem? then navItem = {}

		navItem = Object.assign({
			type: 'hidden'
			label: ''
			path: ''
			showChildren: true
		}, navItem)

		navItem.flags = []
		navItem.children = []
		navItem.id = model.get('id')
		navItem.fullPath = [].concat(navItem.path).filter (item) ->
			item isnt ''
		navItem.flags =
			visited: false
			complete: false
			correct: false

		for child in model.children.models
			childNavItem = @generateNav(child, indent + '_')
			navItem.children.push childNavItem
			childNavItem.fullPath = navItem.fullPath.concat(childNavItem.fullPath).filter (item) ->
				item isnt ''

			console.log('yeah so uh', childNavItem)

			# flatPath = ['view', model.getRoot().get('_id'), childNavItem.fullPath.join('/')].join('/')
			flatPath = childNavItem.fullPath.join('/')
			childNavItem.flatPath = flatPath
			childNavItem.fullFlatPath = ['/view', model.getRoot().get('_id'), flatPath].join('/')
			@state.itemsByPath[flatPath] = childNavItem

		@state.itemsById[model.get('id')] = navItem

		navItem


navStore = new NavStore()
window.__ns = navStore
module.exports = navStore
