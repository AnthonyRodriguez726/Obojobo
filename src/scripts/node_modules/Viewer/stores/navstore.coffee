NavUtil = require 'Viewer/util/navutil'

OBO = window.OBO
Store = window.ObojoboDraft.Common.flux.Store
Dispatcher = window.ObojoboDraft.Common.flux.Dispatcher
OboModel = window.ObojoboDraft.Common.models.OboModel

class NavStore extends Store
	constructor: ->
		super('navstore')

		@state = {
			items: {}
			itemsById: {}
			itemsByPath: {}
			navTargetHistory: []
			navTargetId: null
			locked: false
			open: false
		}

	init: (model, startingId) ->
		Dispatcher.on
			'nav:gotoPath': (payload) =>
				@gotoItem @state.itemsByPath[payload.value.path]
			'nav:setFlag': (payload) ->
				navItem = @state.itemsById[payload.value.id]
				navItem.flags[payload.value.flagName] = payload.value.flagValue

				@triggerChange()
			'nav:prev':    (payload) =>
				@gotoItem NavUtil.getPrev(@state)
			'nav:next':    (payload) =>
				@gotoItem NavUtil.getNext(@state)
			'nav:goto':    (payload) =>
				@gotoItem @state.itemsById[payload.value.id]
			'nav:lock':    (payload) => @setAndTrigger({locked: true})
			'nav:unlock':  (payload) => @setAndTrigger({locked: false})
			'nav:close':   (payload) => @setAndTrigger({open: false})
			'nav:open':    (payload) => @setAndTrigger({open: true})
			'nav:disable': (payload) => @setAndTrigger({disabled: true, locked: true, open: false})
			'nav:enable':  (payload) => @setAndTrigger({disabled: false, locked: false})
			'nav:toggle':  (payload) => @setAndTrigger({open: !@state.open})
			'nav:openExternalLink': (payload) =>
				window.open(payload.value.url)
				@triggerChange()
			'nav:showChildren': (payload) =>
				item = @state.itemsById[payload.value.id]
				item.showChildren = true
				@triggerChange()
			'nav:hideChildren': (payload) =>
				item = @state.itemsById[payload.value.id]
				item.showChildren = false
				@triggerChange()

			'score:set': (payload) =>
				navItem = @state.itemsById[payload.value.id]
				console.log 'SCORE SET@*#)(%'
				console.log payload, navItem
				if not navItem then return

				NavUtil.setFlag payload.value.id, 'correct', true
		, @

		@state.items = @generateNav model
		# console.clear()
		console.log @state.items
		# debugger

		# if startingId?
		# 	@gotoIndex NavUtil.getIndexById(@state, startingId)
		# else
		# 	@gotoIndex NavUtil.getNextIndex(@state)

	gotoItem: (navItem) ->
		if not navItem then return

		if @state.navTargetId?
			navTargetModel = NavUtil.getNavTargetModel(@state)?.processTrigger 'onNavExit'
			@state.navTargetHistory.push @state.navTargetId
			@state.itemsById[@state.navTargetId].showChildren = false

		navItem.showChildren = true
		window.history.pushState {}, 'title123', navItem.flatPath
		@state.navTargetId = navItem.id
		NavUtil.getNavTargetModel(@state).processTrigger 'onNavEnter'
		@triggerChange()

	# generateNavOLD: (model) ->
	# 	nav = []
	# 	item = OBO.getItemForType(model.get('type'))
	# 	if item.generateNav?
	# 		nav = nav.concat item.generateNav(model)

	# 	for child in model.children.models
	# 		nav = nav.concat @generateNav(child)

	# 	nav

	# generateNavALL: (model, indent = '') ->
	# 	nav = []
	# 	item = OBO.getItemForType(model.get('type'))
	# 	nav = nav.concat [
	# 		{
	# 			type: 'link',
	# 			label: indent + model.get('type').substr(13),
	# 			id: model.get('id')
	# 		}
	# 	]
	# 	for child in model.children.models
	# 		nav = nav.concat @generateNav(child, indent + '_')

	# 	nav

	generateNav: (model, indent = '') ->

		item = OBO.getItemForType(model.get('type'))

		navItem = null
		if item.getNavItem?
			navItem = item.getNavItem(model)

		if not navItem?
			navItem =
				type: 'hidden'
				label: ''
				path: ''
				showChildren: true

		console.log 'GN', indent, model.get('type').substr(13), navItem

		navItem.flags = []
		navItem.children = []
		navItem.id = model.get('id')
		navItem.fullPath = [].concat navItem.path
		navItem.flags =
			visited: false
			complete: false
			correct: false

		console.log 'GN', indent, model.get('type').substr(13), 'setting fullPath to', navItem.fullPath.toString()

		for child in model.children.models
			childNavItem = @generateNav(child, indent + '_')
			navItem.children.push childNavItem
			console.log childNavItem
			console.log 'concat', navItem.fullPath.toString(), childNavItem.fullPath.toString()
			childNavItem.fullPath = navItem.fullPath.concat childNavItem.fullPath
			console.log 'GN', indent, model.get('type').substr(13), 'modified child fullPath', childNavItem, 'to', childNavItem.fullPath.toString()

			flatPath = '/view/' + childNavItem.fullPath.join('/')
			childNavItem.flatPath = flatPath
			@state.itemsByPath[flatPath] = childNavItem

		@state.itemsById[model.get('id')] = navItem

		console.log 'create flat path', navItem.fullPath.toString(), navItem.fullPath.join '/'
		# flatPath = navItem.fullPath.join '/'
		# @state.itemsByPath[flatPath] = navItem

		navItem


navStore = new NavStore()
window.__ns = navStore
module.exports = navStore
