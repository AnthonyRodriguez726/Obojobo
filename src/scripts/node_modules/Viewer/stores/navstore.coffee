OBO = window.OBO
Store = window.ObojoboDraft.Common.flux.Store
Dispatcher = window.ObojoboDraft.Common.flux.Dispatcher
OboModel = window.ObojoboDraft.Common.models.OboModel


OBO.triggerActions.navDisable = (model, action) ->
	console.log 'trig_______navDisable', arguments
	setTimeout ->
		Dispatcher.dispatch {
			type: 'navDisable'
		}

OBO.triggerActions.navEnable = (model, action) ->
	console.log 'trig_______navEnable', arguments
	setTimeout ->
		Dispatcher.dispatch {
			type: 'navEnable'
		}

OBO.triggerActions.navLock = (model, action) ->
	console.log 'trig_______navLock', arguments
	setTimeout ->
		Dispatcher.dispatch {
			type: 'navLock'
		}

OBO.triggerActions.navUnlock = (model, action) ->
	console.log 'trig_______navUnlock', arguments
	setTimeout ->
		Dispatcher.dispatch {
			type: 'navUnlock'
		}

OBO.triggerActions.navOpen = (model, action) ->
	console.log 'trig_______navOpen', arguments
	setTimeout ->
		Dispatcher.dispatch {
			type: 'navOpen'
		}

OBO.triggerActions.navClose = (model, action) ->
	console.log 'trig_______navClose', arguments
	setTimeout ->
		Dispatcher.dispatch {
			type: 'navClose'
		}

OBO.triggerActions.navGoto = (model, action) ->
	console.log 'trig_______navGoto', action, action.value
	# debugger;
	setTimeout ->
		Dispatcher.dispatch {
			type: 'navGoto',
			value: OboModel.models[action.value]
		}



generateNav = (model) ->
	nav = []
	item = OBO.getItemForType(model.get('type'))
	if item.generateNav?
		nav = nav.concat item.generateNav(model)

	for child in model.children.models
		nav = nav.concat generateNav(child)

	nav

getNavTargetByModel = (model) ->
	for item in state.items
		if item.value is model then return item

	null

goto = (newNavTarget) ->
	return false if not NavStore.canNavigate()

	console.clear()
	console.log 'GOTO', newNavTarget

	if state.navTarget
		state.navTarget.value.processTrigger 'onNavExit'
		# Dispatcher.dispatch {
		# 	type: 'trigger:onNavExit',
		# 	value: 1
		# }
		console.log 'leave', state.navTarget.value.triggers

	state.navTarget = newNavTarget

	state.navTarget.value.processTrigger 'onNavEnter'
	# Dispatcher.dispatch {
	# 	type: 'trigger:onNavEnter',
	# 	value: 1
	# }

	console.log 'enter', state.navTarget.value.triggers

state = {
	items: []
	navTarget: null
	locked: false
	open: false
}

NavStore = Object.assign(new Store(),
	init: (model) ->
		state.items = generateNav model
		goto state.items[0]

	getState: -> state

	canNavigate: ->
		not state.locked and not state.disabled

	getPrev: ->
		index = state.items.indexOf state.navTarget

		return null if index is -1

		while true
			index--
			item = state.items[index]

			break if not item?

			if item.type is 'link'
				return state.items[index]

		null

	getNext: ->
		index = state.items.indexOf state.navTarget

		return null if index is -1

		while true
			index++
			item = state.items[index]

			break if not item?

			if item.type is 'link'
				return state.items[index]

		null
)

NavStore.dispatchToken = Dispatcher.register (payload) ->
	switch payload.type
		when 'navPrev'
			goto NavStore.getPrev()

		when 'navNext'
			goto NavStore.getNext()

		when 'navGoto'
			goto getNavTargetByModel(payload.value)

		when 'navLock'
			state.locked = true

		when 'navUnlock'
			state.locked = false

		when 'navClose'
			state.open = false

		when 'navOpen'
			state.open = true

		when 'navDisable'
			state.disabled = true
			state.open = false

		when 'navEnable'
			state.disabled = false

		when 'navToggle'
			state.open = not state.open

	console.log 'NOW STATE IS', state, NavStore.emitChange

	NavStore.emitChange()


module.exports = NavStore