APIUtil = require 'Viewer/util/apiutil'

Store = window.ObojoboDraft.Common.flux.Store
Dispatcher = window.ObojoboDraft.Common.flux.Dispatcher
OboModel = window.ObojoboDraft.Common.models.OboModel


class QuestionStore extends Store
	constructor: ->
		super('questionStore')

		@state = {
			viewing: null
			viewedQuestions: {}
			responses: {}
		}

		Dispatcher.on
			'question:setResponse': (payload) =>
				@state.responses[payload.value.id] = payload.value.response
				@triggerChange()

			'question:resetResponse': (payload) =>
				delete @state.responses[payload.value.id]
				@triggerChange()

			'question:hide': (payload) =>
				APIUtil.postEvent OboModel.models[payload.value.id], 'question:hide', {
					questionId: payload.value.id
				}

				delete @state.viewedQuestions[payload.value.id]

				if @state.viewing is payload.value.id
					@state.viewing = null

				@triggerChange()

			'question:view': (payload) =>
				APIUtil.postEvent OboModel.models[payload.value.id], 'question:view', {
					questionId: payload.value.id
				}

				@state.viewedQuestions[payload.value.id] = true
				@state.viewing = payload.value.id

				@triggerChange()

	getState: -> @state

	setState: (newState) -> @state = newState

questionStore = new QuestionStore()
module.exports = questionStore
