Dispatcher = window.ObojoboDraft.Common.flux.Dispatcher

QuestionUtil = require 'Viewer/util/questionutil'

AssessmentUtil =
	getAssessmentForModel: (state, model) ->
		if model.get('type') is 'ObojoboDraft.Sections.Assessment'
			assessmentModel = model
		else
			assessmentModel = model.getParentOfType 'ObojoboDraft.Sections.Assessment'

		if not assessmentModel then return null

		assessment = state.assessments[assessmentModel.get('id')]
		if not assessment then return null

		assessment

	getLastAttemptScoreForModel: (state, model) ->
		assessment = AssessmentUtil.getAssessmentForModel state, model
		if not assessment then return null

		if assessment.attempts.length is 0 then return 0

		assessment.attempts[assessment.attempts.length - 1].result.attemptScore

	getHighestAttemptScoreForModel: (state, model) ->
		assessment = AssessmentUtil.getAssessmentForModel state, model
		if not assessment then return null

		assessment.attempts
			.map (attempt) -> attempt.result.attemptScore
			.reduce ((a, b) -> Math.max a, b), 0

	getLastAttemptScoresForModel: (state, model) ->
		assessment = AssessmentUtil.getAssessmentForModel state, model
		if not assessment then return null

		if assessment.attempts.length is 0 then return 0

		assessment.attempts[assessment.attempts.length - 1].result.scores

	getCurrentAttemptForModel: (state, model) ->
		assessment = AssessmentUtil.getAssessmentForModel state, model
		if not assessment then return null

		assessment.current

	getLastAttemptForModel: (state, model) ->
		assessment = AssessmentUtil.getAssessmentForModel state, model
		if not assessment or assessment.attempts.length is 0 then return null

		assessment.attempts[assessment.attempts.length - 1]

	isCurrentAttemptComplete: (assessmentState, questionState, model) ->
		current = AssessmentUtil.getCurrentAttemptForModel assessmentState, model
		if not current then return null

		model.children.at(1).children.models.forEach (questionModel) ->
			if not QuestionUtil.getResponse(questionState, questionModel)?.set then return false

		true

	startAttempt: (model) ->
		Dispatcher.trigger 'assessment:startAttempt',
			value:
				id: model.get('id')

	endAttempt: (model) ->
		Dispatcher.trigger 'assessment:endAttempt',
			value:
				id: model.get('id')


module.exports = AssessmentUtil