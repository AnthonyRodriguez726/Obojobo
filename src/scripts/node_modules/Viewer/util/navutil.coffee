Dispatcher = window.ObojoboDraft.Common.flux.Dispatcher
OboModel = window.ObojoboDraft.Common.models.OboModel


getFlatList = (item) ->
	list = []
	if item.type isnt 'hidden' then list.push(item)

	if item.showChildren
		for child in item.children
			list = list.concat getFlatList(child)

	list


NavUtil =
	rebuildMenu: (model) ->
		Dispatcher.trigger 'nav:rebuildMenu',
			value:
				model: model

	gotoPath: (path) ->
		Dispatcher.trigger 'nav:gotoPath',
			value:
				path: path

	# gotoCurrentPathname: () ->
	# 	window.location.pathname

	setFlag: (id, flagName, flagValue) ->
		Dispatcher.trigger 'nav:setFlag',
			value:
				id: id,
				flagName: flagName,
				flagValue: flagValue
	goPrev: ->
		Dispatcher.trigger 'nav:prev'

	goNext: ->
		Dispatcher.trigger 'nav:next'

	goto: (id) ->
		Dispatcher.trigger 'nav:goto',
			value:
				id: id

	lock: ->
		Dispatcher.trigger 'nav:lock'

	unlock: ->
		Dispatcher.trigger 'nav:unlock'

	close: ->
		Dispatcher.trigger 'nav:close'

	open: ->
		Dispatcher.trigger 'nav:open'

	disable: ->
		Dispatcher.trigger 'nav:disable'

	enable: ->
		Dispatcher.trigger 'nav:enable'

	toggle: ->
		Dispatcher.trigger 'nav:toggle'

	openExternalLink: (url) ->
		Dispatcher.trigger 'nav:openExternalLink',
			value:
				url: url

	showChildren: (id) ->
		Dispatcher.trigger 'nav:showChildren',
			value:
				id: id

	hideChildren: (id) ->
		Dispatcher.trigger 'nav:hideChildren',
			value:
				id: id

	# getNavItemForModel: (state, model) ->
	# 	state.itemsById[model.get('id')]

	getNavTarget: (state) ->
		state.itemsById[state.navTargetId]

	getNavTargetModel: (state) ->
		navTarget = NavUtil.getNavTarget state
		if not navTarget then return null

		OboModel.models[navTarget.id]

	getFirst: (state) ->
		list = NavUtil.getOrderedList state

		for item in list
			if item.type is 'link' then return item

		return null

	getPrev: (state) ->
		# state.items[NavUtil.getPrevIndex(state)]
		list = NavUtil.getOrderedList state
		navTarget = NavUtil.getNavTarget state
		index = list.indexOf(navTarget)

		if index is -1 then return null

		index--
		while index >= 0
			item = list[index]
			if item.type is 'link'
				return item

			index--

		return null

	getNext: (state) ->
		# state.items[NavUtil.getPrevIndex(state)]
		list = NavUtil.getOrderedList state
		navTarget = NavUtil.getNavTarget state
		index = list.indexOf(navTarget)

		if index is -1 then return null

		index++
		len = list.length
		while index < len
			item = list[index]
			if item.type is 'link'
				return item

			index++

		return null

	getPrevModel: (state) ->
		prevItem = NavUtil.getPrev state
		if not prevItem then return null

		OboModel.models[prevItem.id]

	getNextModel: (state) ->
		nextItem = NavUtil.getNext state
		if not nextItem then return null

		OboModel.models[nextItem.id]

	canNavigate: (state) ->
		not state.locked and not state.disabled

	getOrderedList: (state) ->
		getFlatList state.items


module.exports = NavUtil