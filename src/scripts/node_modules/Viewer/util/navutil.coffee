Dispatcher = window.ObojoboDraft.Common.flux.Dispatcher
OboModel = window.ObojoboDraft.Common.models.OboModel

NavUtil =
	goPrev: ->
		Dispatcher.dispatch {
			type: 'nav:prev'
		}

	goNext: ->
		Dispatcher.dispatch {
			type: 'nav:next'
		}

	goto: (id) ->
		Dispatcher.dispatch {
			type: 'nav:goto',
			value: {
				id: id
			}
		}

	lock: ->
		Dispatcher.dispatch {
			type: 'nav:lock'
		}

	unlock: ->
		Dispatcher.dispatch {
			type: 'nav:unlock'
		}

	close: ->
		Dispatcher.dispatch {
			type: 'nav:close'
		}

	open: ->
		Dispatcher.dispatch {
			type: 'nav:open'
		}

	disable: ->
		Dispatcher.dispatch {
			type: 'nav:disable'
		}

	enable: ->
		Dispatcher.dispatch {
			type: 'nav:enable'
		}

	toggle: ->
		Dispatcher.dispatch {
			type: 'nav:toggle'
		}

	openExternalLink: (url) ->
		Dispatcher.dispatch {
			type: 'nav:openExternalLink',
			value: {
				url: url
			}
		}

	getNavTarget: (state) ->
		navItem = state.items[state.navTargetIndex]
		if not navItem then return null

		navItem

	getNavTargetModel: (state) ->
		navTarget = NavUtil.getNavTarget state
		if not navTarget then return null

		OboModel.models[navTarget.id]

	getPrevIndex: (state) ->
		index = state.navTargetIndex

		while true
			index--
			item = state.items[index]

			break if not item?

			if item.type is 'link'
				return index

		null

	getNextIndex: (state) ->
		index = state.navTargetIndex

		while true
			index++
			item = state.items[index]

			break if not item?

			if item.type is 'link'
				return index

		null

	getPrev: (state) ->
		state.items[NavUtil.getPrevIndex(state)]

	getNext: (state) ->
		state.items[NavUtil.getNextIndex(state)]

	getIndexById: (state, id) ->
		for item, index in state.items
			if item.id is id then return index

		null


module.exports = NavUtil