Viewer = require './viewer'

ObojoboDraft = window.ObojoboDraft
OBO = window.OBO

Chunk = ObojoboDraft.models.Chunk
FocusableSelectionHandler = ObojoboDraft.chunk.focusableChunk.FocusableSelectionHandler

selectionHandler = new FocusableSelectionHandler()


Break = React.createClass
	statics:
		type: 'ObojoboDraft.Chunks.Break'
		register: ->
			OBO.registerChunk Break, {
				insertItem:
					label: 'Break'
					icon: require 'svg-url?noquotes!./assets/insert-icon.svg'
					onInsert: (componentClass, position, referenceChunk, selection, callback) ->
						newChunk = Chunk.create componentClass
						focusChunk = null

						switch position
							when 'before'
								referenceChunk.addChunkBefore newChunk

								if newChunk.isFirst()
									focusChunk = Chunk.create()
									newChunk.addChunkBefore focusChunk
								else
									focusChunk = newChunk.prevSibling()

							when 'after'
								referenceChunk.addChunkAfter newChunk

								if newChunk.isLast()
									focusChunk = Chunk.create()
									newChunk.addChunkAfter focusChunk
								else
									focusChunk = newChunk.nextSibling()

						focusChunk.selectEnd()

						callback()
			}
			OBO.registerTextListener {
				match: (selection, editor) ->
					if selection.virtual.type is 'caret' and selection.startChunk.componentContent.textGroup?.first?
						st = selection.startChunk.componentContent.textGroup.first.text.value

						if st.indexOf("---") is 0 and st.length is 3
							chunk = selection.startChunk
							newChunk = Chunk.create Break
							chunk.replaceWith newChunk
							newChunk.markDirty()

							chunkAfter = Chunk.create()
							newChunk.addChunkAfter chunkAfter

							chunkAfter.selectAll()

							editor.renderModule()
			}
		getCommandHandler: -> null
		getSelectionHandler: -> selectionHandler

		createNewNodeData: Viewer.createNewNodeData
		cloneNodeData: Viewer.cloneNodeData
		createNodeDataFromDescriptor: Viewer.createNodeDataFromDescriptor
		getDataDescriptor: Viewer.getDataDescriptor

	# shouldComponentUpdate: ->
	# 	@props.chunk.needsUpdate

	# componentDidUpdate: ->
	# 	@props.chunk.markUpdated()

	render: ->
		`<Viewer {...this.props} />`


module.exports = Break