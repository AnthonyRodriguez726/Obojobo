require './editor.scss'

Viewer = require './viewer'

CommandHandler = require './commandhandler'
commandHandler = new CommandHandler()

TextGroupCommandHandler = Editor.command.TextGroupCommandHandler

ObojoboDraft = window.ObojoboDraft
TextGroup = ObojoboDraft.text.TextGroup
Chunk = ObojoboDraft.models.Chunk

Code = React.createClass
	statics:
		type: 'ObojoboDraft.Chunks.Code'
		register: ->
			OBO.registerChunk Code, {
				insertItem:
					label: 'Code Block'
					icon: require 'svg-url?noquotes!./assets/insert-icon.svg'
					onInsert: ObojoboDraft.chunk.insertWithText
			}

		getCommandHandler: (chunk) -> commandHandler

		# OBONODE DATA METHODS
		# ================================================
		createNewNodeData: ->
			console.log 'st.cnnd'
			# console.log 'ST.createNewNodeData', data
			textGroup: TextGroup.create(Infinity, { indent:0 })
			type: 'p'

		cloneNodeData: (data) ->
			clone = data.textGroup.clone()
			# if clone.length is 0
				# clone.add()

			# console.log 'ST.cloneNodeData', data
			textGroup: clone
			type: data.type

		# SERIALIZATION/DECODE METHODS
		# ================================================
		createNodeDataFromDescriptor: (descriptor) ->
			# console.log 'ST.createNodeDataFromDescriptor', descriptor
			textGroup: TextGroup.fromDescriptor descriptor.content.textGroup, Infinity, { indent:0 }
			type: descriptor.content.type

		getDataDescriptor: (chunk) ->
			# console.log 'ST.getDataDescriptor', chunk
			data = chunk.componentContent

			textGroup: data.textGroup.toDescriptor()
			type: data.type

	shouldComponentUpdate: ->
		@props.chunk.needsUpdate

	componentDidUpdate: ->
		@props.chunk.markUpdated()

	render: ->
		`<Viewer {...this.props} />`



module.exports = Code