TextGroupCommandHandler = require 'Editor/command/TextGroupCommandHandler'

ObojoboDraft = require 'ObojoboDraft'
TextGroupSelection = ObojoboDraft.text.TextGroupSelection
Chunk = ObojoboDraft.models.Chunk

module.exports = class CommandHandler extends TextGroupCommandHandler
	splitText: (selection, chunk, shiftKey) ->
		console.log 'splitText', arguments
		chunk.markDirty()

		# info = POS.getCaretInfo selection.chunk.start, chunk
		sel = new TextGroupSelection chunk, selection

		newText = sel.start.text.split sel.start.offset

		newNode = Chunk.create() #@TODO - assumes it has a textGroup
		newNode.componentContent.textGroup.first.text = newText
		chunk.addAfter newNode

		selection.setFutureCaret newNode, { offset: 0, groupIndex: 0 }

	selectStart: (selection, chunk) ->
		selection.setFutureCaret chunk, { groupIndex:'anchor:img-anchor', offset:0 }

	selectEnd: (selection, chunk) ->
		selection.setFutureCaret chunk, { groupIndex:'anchor:img-anchor', offset:0 }

	deleteText: (selection, chunk, deleteForwards) ->
		sel = new TextGroupSelection chunk, selection

		return super(selection, chunk, deleteForwards) if not sel.start.isAnchor

		newChunk = chunk.revert selection
		newChunk.componentContent.textGroup = chunk.componentContent.textGroup.clone()

	# acceptAbsorb: (selection, chunkToBeDigested, consumerChunk) ->
	# 	accepted = super selection, chunkToBeDigested, consumerChunk
	# 	if not accepted then return false

	# 	# clone = chunkToBeDigested.clone()
	# 	# console.log 'chunkToBeDigested', chunkToBeDigested.componentContent
	# 	# console.log 'clone', clone.componentContent
	# 	# clone.componentContent.textGroup.first.text.init()

	# 	# chunkToBeDigested.addBefore clone

	# 	accepted
