CommandHandler = require './commandhandler'
commandHandler = new CommandHandler()

ObojoboDraft = require 'ObojoboDraft'
TextGroupSelection = ObojoboDraft.text.TextGroupSelection
StyleableText = ObojoboDraft.text.StyleableText
TextGroup = ObojoboDraft.text.TextGroup
Text = ObojoboDraft.components.Text
Chunk = ObojoboDraft.models.Chunk
TextChunk = ObojoboDraft.components.TextChunk


Heading = React.createClass
	statics:
		type: 'ObojoboDraft.Chunks.Heading'
		getCommandHandler: -> commandHandler

		# OBONODE DATA METHODS
		# ================================================
		createNewNodeData: ->
			textGroup: TextGroup.create(1)
			headingLevel: 1

		cloneNodeData: (data) ->
			textGroup: data.textGroup.clone()
			headingLevel: data.headingLevel

		# SERIALIZATION/DECODE METHODS
		# ================================================
		createNodeDataFromDescriptor: (descriptor) ->
			textGroup: TextGroup.fromDescriptor descriptor.content.textGroup, 1
			headingLevel: descriptor.content.headingLevel

		getDataDescriptor: (chunk) ->
			data = chunk.componentContent

			textGroup: data.textGroup.toDescriptor()
			headingLevel: data.headingLevel

		# HTML METHODS
		# ================================================
		createNewNodesFromElement: (el) ->
			group = TextGroup.create(1)
			group.first.text = StyleableText.createFromElement(el)

			[
				Chunk.create @, {
					textGroup: group
					headingLevel: parseInt(el.tagName.substr(1))
				}
			]

	shouldComponentUpdate: ->
		@props.chunk.needsUpdate

	componentDidUpdate: ->
		@props.chunk.markUpdated()

	render: ->
		data = @props.chunk.componentContent

		React.createElement(TextChunk, { className:'obojobo-draft--chunks--heading pad', indent:data.indent },
			React.createElement('h' + data.headingLevel, null,
				`<Text text={data.textGroup.first.text} groupIndex="0" />`
			)
		)

OBO.registerChunk Heading

module.exports = Heading