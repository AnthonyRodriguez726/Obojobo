#@TODO - HAS TO REBUILD MOCKELEMENT STRUCTURE EVERYTIME, WOULD LIKE TO NOT HAVE TO DO THAT!

Viewer = require './viewer'
ListStyles = require './liststyles'

CommandHandler = require './commandhandler'
commandHandler = new CommandHandler()

ObojoboDraft = window.ObojoboDraft
TextGroup = ObojoboDraft.text.TextGroup
Chunk = ObojoboDraft.models.Chunk


List = React.createClass
	statics:
		type: 'ObojoboDraft.Chunks.List'
		register: ->
			OBO.registerChunk List, {
				insertItem:
					label: 'List'
					icon: require 'svg-url?noquotes!./assets/insert-icon.svg'
					onInsert: ObojoboDraft.chunk.insert
			}
			OBO.addToolbarItem {
				type: 'button'
				label: 'Unordered List'
				icon: require 'svg-url?noquotes!./assets/toolbar-icon-bullet.svg'
				onClick: (toolbarItem, editorState) ->
					newChunk = Chunk.create List

					if editorState.selection.chunk.type is 'caret'
						editorState.selection.startChunk.addAfter newChunk
						newChunk.absorb editorState.selection, editorState.selection.startChunk
					else
						newChunk.replaceSelection editorState.selection
			}
			OBO.addToolbarItem {
				type: 'button'
				label: 'Ordered List'
				icon: require 'svg-url?noquotes!./assets/toolbar-icon-numeric.svg'
				onClick: (toolbarItem, editorState) ->
					newChunk = Chunk.create List
					newChunk.componentContent.listStyles.type = 'ordered'

					if editorState.selection.chunk.type is 'caret'
						editorState.selection.startChunk.addAfter newChunk
						newChunk.absorb editorState.selection, editorState.selection.startChunk
					else
						newChunk.replaceSelection editorState.selection
			}

		getCommandHandler: (chunk) -> commandHandler

		# OBONODE DATA METHODS
		# ================================================
		createNewNodeData: ->
			textGroup: TextGroup.create(Infinity, { indent:0 })
			indent: 0
			listStyles: new ListStyles('unordered')

		cloneNodeData: (data) ->
			textGroup: data.textGroup.clone()
			indent: data.indent
			listStyles: data.listStyles.clone()

		# SERIALIZATION/DECODE METHODS
		# ================================================
		createNodeDataFromDescriptor: (descriptor) ->
			textGroup: TextGroup.fromDescriptor descriptor.content.textGroup, Infinity, { indent:0 }
			indent: 0
			listStyles: ListStyles.fromDescriptor descriptor.content.listStyles

		getDataDescriptor: (chunk) ->
			data = chunk.componentContent

			indent: data.indent
			textGroup: data.textGroup.toDescriptor()
			listStyles: data.listStyles.toDescriptor()

	componentDidUpdate: ->
		@props.chunk.markUpdated()

	render: ->
		`<Viewer {...this.props} />`


module.exports = List