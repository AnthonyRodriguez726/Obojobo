require './editor.scss'

QuestionUtil = require './questionutil'
SelectableAnswerItem = require './selectableansweritem'
Viewer = require './viewer'

TextCommandHandler = require './commandhandler'
TextSelectionHandler = require './selectionhandler'

ObojoboDraft = window.ObojoboDraft
OBO = window.OBO

StyleableText = ObojoboDraft.text.StyleableText
TextGroup = ObojoboDraft.textGroup.TextGroup
Chunk = ObojoboDraft.models.Chunk
TextGroupEl = ObojoboDraft.chunk.textChunk.TextGroupEl
NonEditableChunk = ObojoboDraft.chunk.NonEditableChunk
FocusableChunk = ObojoboDraft.chunk.FocusableChunk
Anchor = ObojoboDraft.components.Anchor
Keyboard = ObojoboDraft.page.Keyboard
EditButton = ObojoboDraft.components.EditButton
DeleteButton = ObojoboDraft.components.DeleteButton
TextGroupSelection = ObojoboDraft.textGroup.TextGroupSelection

Editor = window.Editor
ToggleCommandHandler = Editor.chunk.focusableChunk.ToggleCommandHandler

commandHandler = new ToggleCommandHandler(new TextCommandHandler)

ToggleSelectionHandler = ObojoboDraft.chunk.focusableChunk.ToggleSelectionHandler
selectionHandler = new ToggleSelectionHandler(new TextSelectionHandler)

Question = React.createClass
	statics:
		type: 'ObojoboDraft.Chunks.MultipleChoiceQuestion'
		register: ->
			OBO.registerChunk Question, {
				insertItem:
					label: 'MC Question'
					icon: require 'svg-url?noquotes!./assets/insert-icon.svg'
					onInsert: ObojoboDraft.chunk.util.InsertWithText
			}
		getCommandHandler: (chunk, selection) -> commandHandler
		getSelectionHandler: (chunk) -> selectionHandler

		createNewNodeData: Viewer.createNewNodeData
		cloneNodeData: Viewer.cloneNodeData
		createNodeDataFromDescriptor: Viewer.createNodeDataFromDescriptor
		getDataDescriptor: Viewer.getDataDescriptor



	getInitialState: ->
		selectedAnswers: []

	deleteAnswer: (answerItem) ->
		@props.chunk.markDirty()

		data = @props.chunk.componentContent

		index = data.textGroup.indexOf(answerItem)
		data.textGroup.remove index
		data.textGroup.remove index

		@props.saveAndRenderModuleFn()

	addAnswer: ->
		@props.chunk.componentContent.textGroup.add()
		@props.chunk.componentContent.textGroup.add()
		@props.chunk.markDirty()
		@props.saveAndRenderModuleFn()

	startEditing: ->
		@props.editChunk @props.chunk

	#@DUPLICATE
	getCorrectAnswers: ->
		correct = []
		for textItem in @props.chunk.componentContent.textGroup.items
			if textItem.data.score and textItem.data.score is 100
				correct.push textItem

		correct

	setCorrectAnswer: (answerItem) ->
		if @props.chunk.componentContent.responseType is 'pick-one'
			correctAnswers = @getCorrectAnswers()
			for correctAnswer in correctAnswers
				@setIncorrectAnswer correctAnswer

		answerItem.data.score = 100

		@props.chunk.markDirty()
		@props.saveAndRenderModuleFn()

	setIncorrectAnswer: (answerItem) ->
		console.log 'setIncorrectAnswer', answerItem

		answerItem.data.score = 0

		@props.chunk.markDirty()
		@props.saveAndRenderModuleFn()

	toggleCorrectAnswer: (answerItem) ->
		console.log 'toggleCorrectAnswer', answerItem

		if answerItem.data.score is 100
			@setIncorrectAnswer answerItem
		else
			@setCorrectAnswer answerItem

	onAnchorKeyDown: (event) ->
		console.log 'ON ANCHOR KEY DOWN', event.keyCode
		# event.preventDefault()
		# event.stopPropagation()

		# origSel = DOMSelection.get()

		# alert 'yo'
		@props.onKeyDownPutChunkOnClipboard event, @props.chunk
			# @restoreSelection = true

			# return true

		if event.keyCode is 13
			event.preventDefault()
			@startEditing()

	componentWillReceiveProps: (nextProps) ->
		if nextProps.shouldPreventTab isnt @props.shouldPreventTab
			@props.chunk.markForUpdate()

		if nextProps.isEditing and not @props.isEditing
			@props.chunk.markDirty()
			@focusOnceEditing = true

	shouldComponentUpdate: ->
		@props.chunk.needsUpdate
		# true

	componentDidUpdate: ->
		console.log '###update'
		@props.chunk.markUpdated()

		if @focusOnceEditing
			delete @focusOnceEditing
			TextGroupSelection.selectText @props.chunk, 0, @props.selection.virtual
			# @props.chunk.selectStart @props.selection
			@props.saveAndRenderModuleFn()

	enableControls: ->
		# return
		@props.editChunk @props.chunk, { textControlsEnabled:true }

	disableControls: ->
		# return
		@props.editChunk @props.chunk

	setResponseType: (event) ->
		@props.chunk.componentContent.responseType = event.target.value

		if event.target.value is 'pick-one'
			correctAnswers = @getCorrectAnswers()
			correctAnswers.shift()

			for answer in correctAnswers
				answer.data.score = 0

		@props.chunk.markDirty()
		@props.saveAndRenderModuleFn()

	getEditorInputType: ->
		data = @props.chunk.componentContent

		if data.responseType is 'pick-one' then return 'radio'
		'checkbox'

	allowTab: (event) ->
		if event.keyCode is Keyboard.TAB
			event.stopPropagation()
			return false

		true

	onDeleteButtonClick: (event) ->
		chunk = @props.chunk
		chunk.revert()
		chunk.selectStart()

		@props.saveAndRenderModuleFn()

	render: ->
		data = @props.chunk.componentContent

		switch @props.isEditing
			when true  then @renderEditor()
			when false then @renderPreview()

	renderPreview: ->
		data = @props.chunk.componentContent

		`<FocusableChunk
			className="obojobo-draft--chunks--question preview outline-on-selection highlight-on-hover"
			ref="component"
			onKeyDown={this.onAnchorKeyDown}
			onKeyUp={this.onAnchorKeyUp}
			onDoubleClick={this.startEditing}
			shouldPreventTab={this.props.shouldPreventTab}
		>
			<div>
				<EditButton onClick={this.startEditing} shouldPreventTab={this.props.shouldPreventTab} />
				<Viewer {...this.props} ref="viewer" />
				<DeleteButton onClick={this.onDeleteButtonClick} />
			</div>
		</FocusableChunk>`

	renderEditor: ->

		data = @props.chunk.componentContent

		# editButtonStyles =
		# 	backgroundImage: ObojoboDraft.util.getBackgroundImage(Assets.BUTTON_EDIT)

		allowTab = @allowTab
		deleteAnswer = @deleteAnswer
		chunkIndex = @props.chunk.get('index')
		setCorrectAnswer = @setCorrectAnswer
		enableControls = @enableControls
		disableControls = @disableControls
		toggleCorrectAnswer = @toggleCorrectAnswer
		correctAnswers = @getCorrectAnswers()
		# console.clear()
		# console.log '----------------------'
		# console.log '----------------------'
		# console.log '----------------------'
		# console.log correctAnswers
		answers = []
		for i in [1...data.textGroup.items.length] by 2
			answer = data.textGroup.get(i)
			feedback = data.textGroup.get(i + 1)

			answers.push `<SelectableAnswerItem
							key={i}
							type="editor"
							inputType={this.getEditorInputType()}
							answer={answer}
							feedback={feedback}
							chunkIndex={chunkIndex}
							checked={correctAnswers.indexOf(answer) > -1}
							onSelect={toggleCorrectAnswer}
							onDeleteAnswer={deleteAnswer}
							onFocus={enableControls}
							onBlur={disableControls}
							onKeyDown={allowTab}
						/>`

		`<NonEditableChunk className="obojobo-draft--chunks--question editor outline-on-selection" ref="component">
			<div className="question">
				<div className="input" contentEditable="true" suppressContentEditableWarning={true} onKeyDown={this.allowTab} onFocus={this.enableControls} onBlur={this.disableControls}>
					<TextGroupEl text={data.textGroup.first.text} groupIndex="0" />
				</div>
			</div>
			<div className="question-type">
				<span>Response type:</span>
				<select onChange={this.setResponseType} value={data.responseType}>
					<option value="pick-one">One correct answer - Student picks one</option>
					<option value="pick-one-multiple-correct">Multiple correct answers - Student picks one</option>
					<option value="pick-one-or-more">Multiple correct answers - Student picks all</option>
				</select>
			</div>
			<ul>
				{answers}
				<li className="answer blank pad" key="-1">
					<button onClick={this.addAnswer} className="button add-answer">+ New Answer Choice</button>
				</li>
			</ul>
		</NonEditableChunk>`


Question.register()

module.exports = Question