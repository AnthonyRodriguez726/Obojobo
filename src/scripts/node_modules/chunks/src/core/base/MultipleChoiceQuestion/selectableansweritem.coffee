ObojoboDraft = window.ObojoboDraft

Text = ObojoboDraft.components.Text
StyleableText = ObojoboDraft.text.StyleableText

SelectableAnswerItem = React.createClass

	getDefaultProps: ->
		type: 'preview' # preview | editor
		inputType: 'radio'
		answer: null
		feedback: null
		chunkIndex: -1
		checked: false
		open: false
		defaultCorrectText: new StyleableText 'Correct!'
		defaultIncorrectText: new StyleableText 'Incorrect'
		onSelect: ->
		onDeleteAnswer: ->
		onFocus: ->
		onBlur: ->
		onKeyDown: ->

	render: ->
		return null if not @props.answer? or not @props.feedback?

		switch @props.type
			when 'editor' then @renderEditor()
			else @renderPreview()

	renderPreview: ->
		answer = @props.answer
		feedback = @props.feedback
		i = @props.answer.index
		chunkIndex = @props.chunkIndex
		defaultCorrectText = @props.defaultCorrectText
		defaultIncorrectText = @props.defaultIncorrectText

		`<li className={'answer' + (this.props.open ? ' open' : ' closed') + (answer.data.score === 0 ? ' incorrect' : ' correct') + (this.props.checked ? ' checked' : ' unchecked')} key={'editor' + i} key={'preview' + i}>
			<label>
				<input className={this.props.inputType} type={this.props.inputType} name={chunkIndex} value={i} onChange={this.props.onSelect.bind(null, answer)} checked={this.props.checked} />
				<div className="input"><Text text={answer.text} groupIndex={i} /></div>
			</label>
			{
				this.props.open
				?
				<div className={'feedback ' + (answer.data.score === 0 ? 'incorrect' : 'correct')}>
					<Text text={feedback.text.length > 0 ? feedback.text : (answer.data.score === 0 ? defaultIncorrectText : defaultCorrectText)} groupIndex={i+1} />
				</div>
				:
				null
			}
		</li>`

	onKeyDown: (event) ->
		@props.onKeyDown event

	renderEditor: ->
		answer = @props.answer
		feedback = @props.feedback
		i = @props.answer.index
		chunkIndex = @props.chunkIndex
		correct = @props.selected

		`<li className={'answer open' + (answer.data.score === 0 ? ' incorrect' : ' correct')}>
			<div className="label">
				<input className={this.props.inputType} type={this.props.inputType} name={chunkIndex} value={i} checked={this.props.checked} onClick={this.props.onSelect.bind(null, answer)}/>
				<div className="input" contentEditable="true" onFocus={this.props.onFocus} onBlur={this.props.onBlur} onKeyDown={this.onKeyDown}>
					<Text text={answer.text} groupIndex={i} />
					{
						answer.text.length === 0
						?
						<span className="placeholder">Answer text</span>
						:
						null
					}
				</div>
			</div>
			<div className="feedback" contentEditable="true" onFocus={this.props.onFocus} onBlur={this.props.onBlur} onKeyDown={this.onKeyDown}>
				<Text text={feedback.text} groupIndex={i+1} />
				{
					feedback.text.length === 0
					?
					<span className="placeholder">Feedback text</span>
					:
					null
				}
			</div>
			<div className="delete"><button onClick={this.props.onDeleteAnswer.bind(null, answer)}>delete</button></div>
		</li>`

module.exports = SelectableAnswerItem