ObojoboDraft = window.ObojoboDraft

TextGroupEl = ObojoboDraft.chunk.textChunk.TextGroupEl
StyleableText = ObojoboDraft.text.StyleableText

SelectableAnswerItem = React.createClass

	getDefaultProps: ->
		type: 'preview' # preview | editor
		inputType: 'radio'
		answer: null
		feedback: null
		chunkIndex: -1
		checked: false
		open: false
		defaultCorrectText: new StyleableText 'Correct!'
		defaultIncorrectText: new StyleableText 'Incorrect'
		onSelect: ->
		onDeleteAnswer: ->
		onFocus: ->
		onBlur: ->
		onKeyDown: ->

	render: ->
		return null if not @props.answer? or not @props.feedback?

		switch @props.type
			when 'editor' then @renderEditor()
			else @renderPreview()

	renderPreview: ->
		answer = @props.answer
		feedback = @props.feedback
		i = @props.answer.index
		chunkIndex = @props.chunkIndex
		defaultCorrectText = @props.defaultCorrectText
		defaultIncorrectText = @props.defaultIncorrectText

		answerText = @props.answer.text
		if answerText.length is 0
			answerText = switch @props.answer.data.score
				when 100 then new StyleableText 'An example correct answer choice'
				when 0 then new StyleableText 'An example incorrect answer choice'
				else new StyleableText 'An example partially correct answer choice'

		`<li
			className={'answer' + (this.props.open ? ' open' : ' closed') + (answer.data.score === 0 ? ' incorrect' : ' correct') + (this.props.checked ? ' checked' : ' unchecked') + (this.props.answer.text.length === 0 ? ' empty' : ' non-empty')}
			key={this.props.type + i}
		>
			<label className="pad">
				<input
					className={this.props.inputType}
					type={this.props.inputType}
					name={chunkIndex}
					value={i}
					onChange={this.props.onSelect.bind(null, answer)}
					checked={this.props.checked}
					tabIndex={this.props.shouldPreventTab ? '-1' : ''}
				/>
				<div className="input">
					<TextGroupEl text={answerText} groupIndex={i} />
				</div>
			</label>
			{
				this.props.open
				?
				<div className={'feedback pad ' + (answer.data.score === 0 ? 'incorrect' : 'correct')}>
					<TextGroupEl text={feedback.text.length > 0 ? feedback.text : (answer.data.score === 0 ? defaultIncorrectText : defaultCorrectText)} groupIndex={i+1} />
				</div>
				:
				null
			}
		</li>`

	onKeyDown: (event) ->
		@props.onKeyDown event

	renderEditor: ->
		answer = @props.answer
		feedback = @props.feedback
		i = @props.answer.index
		chunkIndex = @props.chunkIndex
		correct = @props.selected

		`<li className={'answer open' + (answer.data.score === 0 ? ' incorrect' : ' correct')}>
			<div className="label pad">
				<input className={this.props.inputType} type={this.props.inputType} name={chunkIndex} value={i} checked={this.props.checked} onClick={this.props.onSelect.bind(null, answer)}/>
				<div className="input" contentEditable="true" onFocus={this.props.onFocus} onBlur={this.props.onBlur} onKeyDown={this.onKeyDown}>
					<TextGroupEl text={answer.text} groupIndex={i} />
					{
						answer.text.length === 0
						?
						<span className="placeholder">Answer text</span>
						:
						null
					}
				</div>
			</div>
			<div className="feedback" contentEditable="true" onFocus={this.props.onFocus} onBlur={this.props.onBlur} onKeyDown={this.onKeyDown}>
				<TextGroupEl text={feedback.text} groupIndex={i+1} />
				{
					feedback.text.length === 0
					?
					<span className="placeholder">Feedback text</span>
					:
					null
				}
			</div>
			<div className="delete"><button onClick={this.props.onDeleteAnswer.bind(null, answer)}>delete</button></div>
		</li>`

module.exports = SelectableAnswerItem