require './viewer.scss'

# alert 'was working on tabIndex -1 and disabled all the things'

SelectableAnswerItem = require './selectableansweritem'
QuestionUtil = require './questionutil'

ObojoboDraft = window.ObojoboDraft
TextGroup = ObojoboDraft.text.TextGroup
Text = ObojoboDraft.components.Text
StyleableText = ObojoboDraft.text.StyleableText


Question = React.createClass
	statics:
		type: 'ObojoboDraft.Chunks.MultipleChoiceQuestion'
		register: -> OBO.registerChunk Question
		getCommandHandler: (chunk) -> null

		createNodeDataFromDescriptor: (descriptor) ->
			textGroup: TextGroup.fromDescriptor descriptor.content.textGroup, Infinity, { score:0 }
			responseType: descriptor.content.responseType
			editing: false

	getInitialState: ->
		selectedAnswers: []

	onSelectAnswer: (answerItem) ->
		@props.chunk.markForUpdate()

		index = @state.selectedAnswers.indexOf(answerItem)
		if index > -1
			@state.selectedAnswers.splice index, 1
		else
			if @getPreviewInputType() is 'radio'
				@state.selectedAnswers = [answerItem]
			else
				@state.selectedAnswers.push answerItem

		@setState {
			selectedAnswers: @state.selectedAnswers
			revealAll: false
		}

	clearAnswers: ->
		@props.chunk.markForUpdate()
		@setState {
			selectedAnswers: []
			revealAll: false
		}

	getCorrectAnswers: ->
		QuestionUtil.getCorrectAnswers @props.chunk.componentContent.textGroup

	revealAll: ->
		@props.chunk.markForUpdate()
		@setState { revealAll:true }

	getPreviewInputType: ->
		data = @props.chunk.componentContent

		if data.responseType is 'pick-one' or data.responseType is 'pick-one-multiple-correct' then return 'radio'
		'checkbox'

	render: ->
		data = @props.chunk.componentContent

		instructions = switch data.responseType
			when 'pick-one' then 'Pick the correct answer'
			when 'pick-one-multiple-correct' then 'Pick a correct answer'
			when 'pick-one-or-more' then 'Pick all the correct answers'

		selectedAnswers = @state.selectedAnswers
		onSelectAnswer = @onSelectAnswer
		chunkIndex = @props.chunk.get('index')
		answers = []
		inputType = this.getPreviewInputType()
		correctAnswers = @getCorrectAnswers()
		shouldPreventTab = @props.shouldPreventTab

		questionText = data.textGroup.first.text
		if questionText.length is 0
			questionText = new StyleableText 'Your question goes here? (Double click to edit)'
			questionText.styleText 'b'

		completelyCorrect = false
		incorrect = false
		if selectedAnswers.length > 0
			switch inputType
				when 'radio'
					if correctAnswers.indexOf(selectedAnswers[0]) > -1
						completelyCorrect = true
					else
						incorrect = true

				when 'checkbox'
					if @state.revealAll
						completelyCorrect = true
						for answer in selectedAnswers
							if correctAnswers.indexOf(answer) is -1
								completelyCorrect = false
								break

						for answer in correctAnswers
							if selectedAnswers.indexOf(answer) is -1
								completelyCorrect = false
								break

						incorrect = not completelyCorrect

		for i in [1...data.textGroup.items.length] by 2
			answer = data.textGroup.get(i)
			feedback = data.textGroup.get(i + 1)

			isCorrect = selectedAnswers.indexOf(answer) > -1

			answers.push `<SelectableAnswerItem
							key={i}
							type="preview"
							inputType={inputType}
							answer={answer}
							feedback={feedback}
							chunkIndex={chunkIndex}
							onSelect={onSelectAnswer}
							open={inputType === 'radio' ? (this.state.revealAll || isCorrect) : this.state.revealAll}
							checked={isCorrect}
							shouldPreventTab={shouldPreventTab}
						/>`

		`<div
			className={'obojobo-draft--chunks--question viewer' + (completelyCorrect ? ' correct' : '') + (incorrect ? ' incorrect' : '') + (data.textGroup.first.text.length === 0 ? ' empty' : ' non-empty')}
			ref="component"
		>
			<div className="question pad">
				<div className="input">
					<Text text={questionText} groupIndex="0" />
				</div>
			</div>
			<span className="instructions pad">{instructions}:</span>
			<ul>
				{answers}
				<li className="answer blank pad" key="-1">
					<button
						onClick={this.revealAll}
						className="button reveal-all"
						disabled={this.state.revealAll}
						tabIndex={shouldPreventTab ? '-1' : ''}
					>
						{
							data.responseType === 'pick-one-or-more'
							?
							'Check your answers'
							:
							'Show All Answers'
						}
					</button>
					{
						true
						?
						<div className="container">
							<span className="divider"> - </span>
							<button
								onClick={this.clearAnswers}
								className="button clear"
								disabled={!(this.state.revealAll || selectedAnswers.length > 0)}
								tabIndex={shouldPreventTab ? '-1' : ''}
							>Reset</button>
						</div>
						:
						null
					}
				</li>
			</ul>
		</div>`


module.exports = Question