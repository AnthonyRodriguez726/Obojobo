Viewer = require './viewer'

CommandHandler = require './commandhandler'
commandHandler = new CommandHandler()

Editor = window.Editor
ObojoboDraft = window.ObojoboDraft
OBO = window.OBO

console.log '1234'

SelectionHandler = ObojoboDraft.chunk.textChunk.TextGroupSelectionHandler
TextGroupCommandHandler = Editor.chunk.textChunk.TextGroupCommandHandler
TextGroup = ObojoboDraft.textGroup.TextGroup
Chunk = ObojoboDraft.models.Chunk
TextGroupSelection = ObojoboDraft.textGroup.TextGroupSelection
linkify = ObojoboDraft.chunk.textChunk.Linkify

selectionHandler = new SelectionHandler

SingleText = React.createClass
	statics:
		type: 'ObojoboDraft.Chunks.SingleText'
		register: ->
			OBO.registerChunk SingleText, {
				default: true
				insertItem:
					label: 'Text'
					icon: require 'svg-url?noquotes!./assets/insert-icon.svg'
					onInsert: ObojoboDraft.chunk.util.Insert
			}

			OBO.registerTextListener {
				match: (selection, editor) ->
					if selection.virtual.type is 'caret' and selection.startChunk.componentContent.textGroup?
						selection.saveVirtualSelection()
						savedSelection = selection.virtual.clone()

						tgs = new TextGroupSelection selection.startChunk, selection.virtual

						if tgs.start.text.value.charAt(tgs.start.offset - 1) is ' '
							if linkify(selection.startChunk, tgs.start.textGroupItem)
								# window.setTimeout ( ->
								# 	selection.virtual = savedSelection
								# 	selection.selectDOM()
								# ).bind(@)
								editor.renderModule()
			}
		getCommandHandler: (chunk) -> commandHandler
		getSelectionHandler: (chunk) -> selectionHandler

		createNewNodeData: Viewer.createNewNodeData
		cloneNodeData: Viewer.cloneNodeData
		createNodeDataFromDescriptor: Viewer.createNodeDataFromDescriptor
		getDataDescriptor: Viewer.getDataDescriptor

	shouldComponentUpdate: ->
		@props.chunk.needsUpdate

	componentDidUpdate: ->
		@props.chunk.markUpdated()

	render: ->
		`<Viewer {...this.props} />`

module.exports = SingleText