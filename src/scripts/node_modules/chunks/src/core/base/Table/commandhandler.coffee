TextGroupCommandHandler = Editor.command.TextGroupCommandHandler
TextGroupSelection = ObojoboDraft.text.TextGroupSelection

module.exports = class CommandHandler extends TextGroupCommandHandler
	# splitText: (sel, chunk, shiftKey) -> false

	deleteSelection: (selection, chunk) ->
		chunk.markDirty()

		sel = new TextGroupSelection chunk, selection

		chunk.componentContent.textGroup.clearSpan sel.start.groupIndex, sel.start.offset, sel.end.groupIndex, sel.end.offset

		if sel.position is 'start' or sel.position is 'contains'
			selection.setFutureCaret chunk, { offset: sel.start.offset, groupIndex: sel.start.groupIndex }

	deleteText: (selection, chunk, deleteForwards) ->
		# chunk.markDirty()
		console.clear()

		sel = new TextGroupSelection chunk, selection
		caret = sel.start
		if (caret.isTextStart and not deleteForwards) or (caret.isTextEnd and deleteForwards) then return false

		super selection, chunk, deleteForwards

	selectAll: (selection, chunk) ->
		sel = new TextGroupSelection chunk, selection

		console.clear()
		console.log sel, sel.start.groupIndex, sel.end.groupIndex

		if sel.start.groupIndex is sel.end.groupIndex
			console.log 'YES'
			console.log sel.start.text.length
			selection.setFutureStart chunk, { groupIndex:sel.start.groupIndex, offset:0 }
			selection.setFutureEnd   chunk, { groupIndex:sel.start.groupIndex, offset:sel.start.text.length }
			console.log selection.getFutureDescriptor()
			return true

		super selection, chunk

	# canMergeWith: (selection, digestedChunk, consumerChunk) -> false
	canRemoveSibling: (selection, sibling) -> false
	# acceptAbsorb: (selection, chunkToBeDigested, consumerChunk) -> false
	# absorb: (selection, consumerChunk, digestedChunk) -> false