require './editor.scss'

Viewer = require './viewer'

ObojoboDraft = window.ObojoboDraft
OBO = window.OBO
Editor = window.Editor

FocusableCommandHandler = Editor.chunk.focusableChunk.FocusableCommandHandler
Chunk = ObojoboDraft.models.Chunk
FocusableChunk = ObojoboDraft.chunk.FocusableChunk
SingleInputBubble = ObojoboDraft.components.modal.bubble.SingleInputBubble
Keyboard = ObojoboDraft.page.Keyboard
DeleteButton = ObojoboDraft.components.DeleteButton
EditButton = ObojoboDraft.components.EditButton
FocusableSelectionHandler = ObojoboDraft.chunk.focusableChunk.FocusableSelectionHandler

commandHandler = new FocusableCommandHandler()
selectionHandler = new FocusableSelectionHandler()

IFrame = React.createClass
	statics:
		type: 'ObojoboDraft.Chunks.IFrame'
		register: ->
			OBO.registerChunk IFrame, {
				insertItem:
					label: 'Embedded Page'
					icon: require 'svg-url?noquotes!./assets/insert-icon.svg'
					onInsert: ObojoboDraft.chunk.util.Insert
			}
		label: 'IFrame'
		getCommandHandler: -> commandHandler
		getSelectionHandler: -> selectionHandler

		createNewNodeData: Viewer.createNewNodeData
		cloneNodeData: Viewer.cloneNodeData
		createNodeDataFromDescriptor: Viewer.createNodeDataFromDescriptor
		getDataDescriptor: Viewer.getDataDescriptor

	getInitialState: ->
		userSrc: @props.chunk.componentContent.src

	startEditing: ->
		@props.editChunk @props.chunk

	onChange: (newValue) ->
		@props.chunk.markForUpdate()
		@setState { userSrc:newValue }

	onClose: ->
		@props.chunk.markDirty()
		@props.chunk.componentContent.src = @state.userSrc

		# @props.setTextMode on
		@props.stopEditing()

		@props.selection.virtual.setCaret @props.chunk.get('index'), { groupIndex:'anchor:main', offset:0 }
		@props.saveAndRenderModuleFn()

	delete: ->
		chunk = @props.chunk
		chunk.revert()
		chunk.selectStart()

		@props.saveAndRenderModuleFn()

	onAnchorKeyDown: (event) ->
		@props.onKeyDownPutChunkOnClipboard event, @props.chunk

		switch event.keyCode
			when Keyboard.ENTER
				event.preventDefault()
				@startEditing()
				return

	shouldComponentUpdate: ->
		@props.chunk.needsUpdate

	componentDidUpdate: ->
		@props.chunk.markUpdated()

	render: ->
		data = @props.chunk.componentContent

		contents = switch
			when @props.isEditing
				`<div className="edit">
					<Viewer {...this.props} />
					<SingleInputBubble label="Source" value={this.state.userSrc} onChange={this.onChange} onClose={this.onClose} onCancel={this.onCancel} />
				</div>`
			when data.src
				`<Viewer {...this.props} />`
			else
				`<div className="placeholder">Double click here to embed a url</div>`

		`<FocusableChunk onDoubleClick={this.startEditing} onKeyDown={this.onAnchorKeyDown} className={'obojobo-draft--chunks--iframe editor' + (this.props.isEditing ? ' focus' : '')} shouldPreventTab={this.props.shouldPreventTab}>
			<div className="container outline-on-selection highlight-on-hover">
				{ !this.props.isEditing ? <DeleteButton onClick={this.delete} shouldPreventTab={this.props.shouldPreventTab} /> : null }
				{ !this.props.isEditing ? <EditButton onClick={this.startEditing} /> : null }
				{contents}
			</div>
		</FocusableChunk>`


IFrame.register()

module.exports = IFrame