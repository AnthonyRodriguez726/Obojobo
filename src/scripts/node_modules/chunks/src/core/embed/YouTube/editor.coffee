require './editor.scss'

Viewer = require './viewer'

ObojoboDraft = window.ObojoboDraft
OBO = window.OBO
Editor = window.Editor

FocusableCommandHandler = Editor.chunk.focusableChunk.FocusableCommandHandler
Chunk = ObojoboDraft.models.Chunk
FocusableChunk = ObojoboDraft.chunk.FocusableChunk
SingleInputBubble = ObojoboDraft.components.modal.bubble.SingleInputBubble
Keyboard = ObojoboDraft.page.Keyboard
DeleteButton = ObojoboDraft.components.DeleteButton
EditButton = ObojoboDraft.components.EditButton
FocusableSelectionHandler = ObojoboDraft.chunk.focusableChunk.FocusableSelectionHandler

commandHandler = new FocusableCommandHandler()
selectionHandler = new FocusableSelectionHandler()

YouTube = React.createClass
	statics:
		type: 'ObojoboDraft.Chunks.YouTube'
		register: ->
			OBO.registerChunk YouTube, {
				insertItem:
					label: 'YouTube Video'
					icon: require 'svg-url?noquotes!./assets/insert-icon.svg'
					onInsert: ObojoboDraft.chunk.util.InsertWithText
			}
		label: 'YouTube Video'
		getCommandHandler: -> commandHandler
		getSelectionHandler: -> selectionHandler

		createNewNodeData: Viewer.createNewNodeData
		cloneNodeData: Viewer.cloneNodeData
		createNodeDataFromDescriptor: Viewer.createNodeDataFromDescriptor
		getDataDescriptor: Viewer.getDataDescriptor


	getInitialState: ->
		userVideoId: @props.chunk.componentContent.videoId

	startEditing: ->
		@props.editChunk @props.chunk

	# onInputChange: (event) ->
	# 	console.log 'change', event


	# onSetVideoId: ->
	# 	@props.chunk.markDirty()
	# 	@props.chunk.componentContent.videoId = @state.userVideoId
	# 	@setState { chunk:@props.chunk }
	# 	@props.activateFn null

	# renderOLD: ->
	# 	data = @props.chunk.componentContent

	# 	if @state.active
	# 		childElements =
	# 			React.createElement 'div', null, [
	# 				React.createElement('input', { type:'text', value:@state.userVideoId, onChange:@onInputChange }),
	# 				React.createElement('button', { onClick:@onSetVideoId }, 'Submit!')
	# 			],
	# 			React.createElement 'iframe', { width:560, height:315, src:"https://www.youtube.com/embed/#{data.videoId}", frameBorder:0, allowFullScreen:true }, null
	# 	else
	# 		childElements = React.createElement 'img', { width:'100%', height:'auto', style:{ position:'absolute', left:0, top:'50%', transform:'translateY(-50%)'}, src:"https://i.ytimg.com/vi/#{data.videoId}/hqdefault.jpg" }

	# 	React.createElement 'div', { 'data-video-id':data.videoId, onClick:@onClick, style: { width:560, height:315, overflow:'hidden', position:'relative' } }, childElements

	onChange: (newValue) ->
		console.log 'YT on Change', newValue
		# @props.chunk.markDirty()
		# data = @props.chunk.componentContent
		# data.videoId = newValue
		@setState { userVideoId:newValue }

	onClose: ->
		@props.chunk.markDirty()
		@props.chunk.componentContent.videoId = @state.userVideoId

		# @props.setTextMode on
		@props.stopEditing()

		@props.selection.virtual.setCaret @props.chunk.get('index'), { groupIndex:'anchor:main', offset:0 }
		@props.saveAndRenderModuleFn()

	delete: ->
		chunk = @props.chunk
		chunk.revert()

		@props.saveAndRenderModuleFn()

	onAnchorKeyDown: (event) ->
		@props.onKeyDownPutChunkOnClipboard event, @props.chunk

		switch event.keyCode
			when Keyboard.ENTER
				event.preventDefault()
				@startEditing()
				return

	# shouldComponentUpdate: ->
	# 	@props.chunk.needsUpdate

	componentDidUpdate: ->
		@props.chunk.markUpdated()

	render: ->
		data = @props.chunk.componentContent

		contents = switch
			when @props.isEditing
				`<div className="edit">
					<Viewer {...this.props} />
					<SingleInputBubble label="YouTube Video ID" value={this.state.userVideoId} onChange={this.onChange} onClose={this.onClose} onCancel={this.onCancel} />
				</div>`
			when data.videoId
				`<img src={'https://i.ytimg.com/vi/' + data.videoId + '/hqdefault.jpg'} />`
			else
				`<div className="placeholder">Double click here to specify a YouTube video</div>`

		`<FocusableChunk onDoubleClick={this.startEditing} onKeyDown={this.onAnchorKeyDown} className={'obojobo-draft--chunks--you-tube editor' + (this.props.isEditing ? ' focus' : '')} shouldPreventTab={this.props.shouldPreventTab}>
			<div className="container outline-on-selection highlight-on-hover">
				{ !this.props.isEditing ? <DeleteButton onClick={this.delete} shouldPreventTab={this.props.shouldPreventTab} /> : null }
				{ !this.props.isEditing ? <EditButton onClick={this.startEditing} /> : null }
				{contents}
			</div>
		</FocusableChunk>`


module.exports = YouTube