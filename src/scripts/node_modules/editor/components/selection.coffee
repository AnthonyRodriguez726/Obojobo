ObojoboDraft = window.ObojoboDraft

OboSelectionRect = ObojoboDraft.selection.OboSelectionRect
DOMSelection = ObojoboDraft.selection.DOMSelection
VirtualSelection = ObojoboDraft.selection.VirtualSelection


class Selection
	constructor: (module) ->
		@module = module
		@virtual = new VirtualSelection(@module)
		@saved = null
		@clear()

	saveVirtualSelection: ->
		@saved = @virtual.clone()

	restoreVirtualSelection: ->
		@virtual = @saved

	clear: ->
		@commands = {}
		@textCommands = []
		@rect = null
		@chunkRect = null
		@dom = null
		@styles = {}

	getSelectionDescriptor: ->
		@virtual.toObject()

	fromObject: (o) ->
		@virtual.fromObject o
		@selectDOM()
		@update()

	selectDOM: () ->
		return if not @virtual.start?.chunk? or not @virtual.end?.chunk?

		s = @startChunk.getDOMSelectionStart()
		e = @endChunk.getDOMSelectionEnd()
		DOMSelection.set s.textNode, s.offset, e.textNode, e.offset

	runTextCommands: (label) ->
		command = @commands[label].commandFnByIndex[@virtual.start.chunk.get('index')]
		data = null
		if command.onBeforeFn?
			data = command.onBeforeFn.apply @, [@]

		for chunk in @virtual.all
			command = @commands[label].commandFnByIndex[chunk.get('index')]
			command.fn.apply @, [@, chunk, data]

	update: ->
		# return if not document.getElementById('editor').contains(document.activeElement)
		# console.log 'UUUUUUUUUUPDATE!'

		console.time 'selection.update'
		# @clear()

		console.time 'new oboSelection'
		@dom = new DOMSelection()
		# @chunk.getFromDOMSelection @dom

		@virtual.fromDOMSelection @dom
		console.timeEnd 'new oboSelection'

		console.time 'OboSelectionRect.createFromSelection'
		@rect = OboSelectionRect.createFromSelection()
		@chunkRect = OboSelectionRect.createFromChunks @virtual.all
		console.timeEnd 'OboSelectionRect.createFromSelection'

		@updateTextCommands()
		@updateStyles()

		console.timeEnd 'selection.update'

	updateTextCommands: ->
		@commands = {}
		@textCommands = []

		type = @virtual.type

		if type is 'none' or type is 'caret'
			return

		console.time 'updateTextCommands'

		allCommands = {}
		all = @virtual.all
		for chunk in all
			commands = chunk.getTextMenuCommands @

			continue if not commands?

			for command in commands
				if allCommands[command.label]?
					allCommands[command.label].count += 1
					allCommands[command.label].commandFnByIndex[chunk.get('index')] = command
				else
					commandFnByIndex = {}
					commandFnByIndex[chunk.get('index')] = command

					allCommands[command.label] = {
						count: 1
						label: command.label
						image: command.image
						commandFnByIndex: commandFnByIndex
					}

		numChunks = all.length
		for label, command of allCommands
			# console.log 'considering' , command
			if command.count is numChunks
				@commands[command.label] = command
				@textCommands.push command

		console.timeEnd 'updateTextCommands'

	updateStyles: ->
		console.time 'updateStyles'

		@styles = {}

		all = @virtual.all

		numChunks = all.length
		allStyles = {}
		for chunk in all
			# styles = chunk.callComponentFn 'getSelectionStyles', @
			styles = chunk.getSelectionStyles()

			if not styles then return

			for style of styles
				if not allStyles[style]?

					allStyles[style] = 1
				else
					allStyles[style]++

		for style of allStyles
			if allStyles[style] is numChunks
				@styles[style] = style

		console.timeEnd 'updateStyles'


Object.defineProperties Selection.prototype, {
	startChunk: get: ->
		if not @virtual?.start? then return null
		@virtual.start.chunk

	endChunk: get: ->
		if not @virtual?.end? then return null
		@virtual.end.chunk
}


module.exports = Selection