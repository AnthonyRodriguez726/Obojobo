ChunkSelection = ObojoboDraft.oboDOM.Selection.ChunkSelection
OboSelectionRect = ObojoboDraft.oboDOM.Selection.OboSelectionRect
Text = ObojoboDraft.components.Text
TextGroupSelection = ObojoboDraft.text.TextGroupSelection
DOMSelection = ObojoboDraft.page.DOMSelection


class Selection
	constructor: (module) ->
		@module = module
		@chunk = new ChunkSelection(@module)
		@clear()

	clear: ->
		@commands = {}
		@textCommands = []
		@rect = null
		@chunkRect = null
		@domSelection = null
		@chunk.clear()
		# @chunk.getFromDOMSelection()
		# @clicked = null
		@styles = {}
		@futureStart = null
		@futureEnd = null

	getSelectionDescriptor: ->
		if not @chunk? then return null

		ChunkSelection.createDescriptor(
			@chunk.start.chunk.get('index'),
			# @chunk.start.chunk.callComponentFn('saveSelection', @, ['start']),
			@chunk.start.chunk.saveSelection @, 'start'
			@chunk.end.chunk.get('index'),
			# @chunk.end.chunk.callComponentFn('saveSelection', @, ['end']),
			@chunk.end.chunk.saveSelection @, 'end'
		)

	getFutureDescriptor: ->
		if @futureStart? and @futureEnd?
			return ChunkSelection.createDescriptor(
				@futureStart.index,
				@futureStart.data,
				@futureEnd.index,
				@futureEnd.data
			)

		null

	selectFromDescriptor: (module, descriptor) ->
		if not @chunk? then return null

		startChunk = module.chunks.at descriptor.start.index
		endChunk   = module.chunks.at descriptor.end.index

		# startChunk.callComponentFn 'restoreSelection', @, ['start', descriptor.start.data]
		startChunk.restoreSelection @, 'start', descriptor.start.data
		# endChunk.callComponentFn 'restoreSelection', @, ['end', descriptor.end.data]
		endChunk.restoreSelection @, 'end', descriptor.end.data

		@chunk.select()

	setFutureStart: (chunkOrIndex, data) ->
		@futureStart =
			index: if not isNaN(chunkOrIndex) then chunkOrIndex else chunkOrIndex.get('index')
			data: data

	setFutureEnd: (chunkOrIndex, data) ->
		@futureEnd =
			index: if not isNaN(chunkOrIndex) then chunkOrIndex else chunkOrIndex.get('index')
			data: data

	setFutureCaret: (chunk, data) ->
		@setFutureStart chunk, data
		@setFutureEnd   chunk, data

	#@TODO - THIS SUX
	setFutureFromDescriptor: (descriptor) ->
		@futureStart =
			index: descriptor.start.index
			data: descriptor.start.data
		@futureEnd =
			index: descriptor.end.index
			data: descriptor.end.data

	clearFuture: ->
		@futureStart = @futureEnd = null

	runTextCommands: (label) ->
		command = @commands[label].commandFnByIndex[@chunk.start.chunk.get('index')]
		data = null
		if command.pre?
			data = command.pre.apply @

		for chunk in @chunk.all
			command = @commands[label].commandFnByIndex[chunk.get('index')]
			command.fn.apply @, [@, chunk, data]

	update: ->
		# return if not document.getElementById('editor').contains(document.activeElement)

		console.time 'selection.update'
		@clear()

		console.time 'new oboSelection'
		@domSelection = new DOMSelection()
		@chunk.getFromDOMSelection @domSelection
		console.timeEnd 'new oboSelection'

		console.time 'OboSelectionRect.createFromSelection'
		@rect = OboSelectionRect.createFromSelection()
		@chunkRect = OboSelectionRect.createFromChunks @chunk.all
		console.timeEnd 'OboSelectionRect.createFromSelection'

		@updateTextCommands()
		@updateStyles()

		console.timeEnd 'selection.update'

	updateTextCommands: ->
		@commands = {}
		@textCommands = []

		if @chunk.type is 'none' or @chunk.type is 'caret'
			return

		console.time 'updateTextCommands'

		allCommands = {}
		for chunk in @chunk.all
			# commands = chunk.callComponentFn 'getTextMenuCommands', [@chunk, chunk]
			# commands = chunk.callComponentFn 'getTextMenuCommands', @
			commands = chunk.getTextMenuCommands @

			continue if not commands?

			for command in commands
				if allCommands[command.label]?
					allCommands[command.label].count += 1
					allCommands[command.label].commandFnByIndex[chunk.get('index')] = command
				else
					commandFnByIndex = {}
					commandFnByIndex[chunk.get('index')] = command

					allCommands[command.label] = {
						count: 1
						label: command.label
						image: command.image
						commandFnByIndex: commandFnByIndex
					}

		numChunks = @chunk.all.length
		for label, command of allCommands
			# console.log 'considering' , command
			if command.count is numChunks
				@commands[command.label] = command
				@textCommands.push command


		console.timeEnd 'updateTextCommands'

	updateStyles: ->
		console.time 'updateStyles'

		@styles = {}

		numChunks = @chunk.all.length
		allStyles = {}
		for chunk in @chunk.all
			# styles = chunk.callComponentFn 'getSelectionStyles', @
			styles = chunk.getSelectionStyles @

			if not styles then return

			for style of styles
				if not allStyles[style]?

					allStyles[style] = 1
				else
					allStyles[style]++

		for style of allStyles
			if allStyles[style] is numChunks
				@styles[style] = style

		console.timeEnd 'updateStyles'

	setFutureFromSelection: ->
		return null if not @chunk? or not @chunk.start? or not @chunk.end?
		# @setFutureStart @chunk.start.chunk, @chunk.start.chunk.callComponentFn('saveSelection', @, ['start'])
		@setFutureStart @chunk.start.chunk, @chunk.start.chunk.saveSelection(@, 'start')
		@setFutureEnd   @chunk.end.chunk,   @chunk.end.chunk.saveSelection(@, 'end')


module.exports = Selection