ComponentClassMap = ObojoboDraft.util.ComponentClassMap
Chunk = ObojoboDraft.models.Chunk

# We need to append our html that we're attempting to paste on the DOM
# so window.getComputedStyle will work.
class TempDOM
	constructor: ->
		@container = null

	init: ->
		@container = document.createElement 'div'
		document.body.appendChild @container

	create: (tagName) ->
		if not @container? then @init()

		el = document.createElement tagName
		@container.appendChild el

		el

	remove: (el) ->
		@container.removeChild el
		if @container.childNodes.length is 0 then @removeAll()

	removeAll: ->
		document.body.removeChild @container
		@container = null




getTagName = (node) ->
	return ''if node.nodeType isnt Node.ELEMENT_NODE
	node.tagName.toLowerCase()

createOboNodesFromDOMNode = (node, chunkClipboard, usedChunkClipboardIds) ->
	console.log 'createOboNodesFromDOMNode', arguments
	console.log '$$$$$$$'
	console.log '$$$$$$$'
	console.log '$$$$$$$'
	console.log '$$$$$$$'
	console.log '$$$$$$$'
	console.log '$$$$$$$'
	console.log '$$$$$$$'
	console.log '$$$$$$$'
	console.log '$$$$$$$'
	console.log '$$$$$$$'
	console.log '$$$$$$$'

	p = Chunk.create()
	console.log '@TODO - hardcoded for text group'
	p.componentContent.textGroup.first.text.insertText 0, node.textContent

	p

sanitize = (node) ->
	switch getTagName(node)
		when 'span'
			if node.classList.contains 'Apple-converted-space'
				return document.createTextNode(' ')

			node
		when 'meta'
			null
		else
			node

completeFragment = (oboNodes, fragment, chunkClipboard) ->
	if fragment.childNodes.length > 0
		createdOboNode = createOboNodesFromDOMNode fragment, chunkClipboard

		if createdOboNode?
			createdOboNode.type = 'fragment'
			oboNodes.push createdOboNode

debug__cleanEl = (el) ->
	if el.removeAttribute?
		el.removeAttribute 'style'
		el.removeAttribute 'class'
	for childNode in el.childNodes
		debug__cleanEl(childNode)

getOboNodesFromHTML = (html, chunkClipboard) ->
	console.log 'PASTE HTML'
	console.log html.replace(/style="(.*?)"/g, '')
	tempDOM = new TempDOM

	container = tempDOM.create 'div'
	container.innerHTML = html
	container.normalize()

	container2 = tempDOM.create 'div'
	container2.innerHTML = html
	container2.normalize()
	debug__cleanEl(container2)
	console.log(container2);

	# chunkClipboard.__print()

	fragment = tempDOM.create 'p'

	oboNodes = [] #chunks = []

	usedChunkClipboardIds = {}

	getOboNodesFromHTMLHelper oboNodes, container, fragment, chunkClipboard, usedChunkClipboardIds

	console.log 'FRAGMENT'
	console.log fragment

	completeFragment oboNodes, fragment, chunkClipboard

	# we only allow fragments to exist as the first or last node - all others
	# we can simply turn into paragraphs
	# if oboNodes.length >= 3
		# for i in [1..oboNodes.length - 2]
			# oboNodes[i].init() if oboNodes[i].type is TextChunkNode.TYPE_FRAGMENT

	tempDOM.removeAll()

	oboNodes

getOboNodesFromHTMLHelper = (oboNodes, el, curFragment, chunkClipboard, usedChunkClipboardIds) ->
	console.log 'getOboNodesFromHTMLHelper', arguments
	console.log 'childNodes', el.childNodes

	for node in Array.prototype.slice.call(el.childNodes)
		console.log 'node was', node
		node = sanitize node
		console.log 'node is', node
		continue if not node?

		console.log 'will get createdOboNodes'

		createdOboNode = createOboNodesFromDOMNode node, chunkClipboard, usedChunkClipboardIds

		console.log 'createdOboNode', createdOboNode

		if createdOboNode?
			completeFragment oboNodes, curFragment, chunkClipboard

			oboNodes.push createdOboNode
		else
			clone = node.cloneNode false
			curFragment.appendChild clone

			if node.nodeType is Node.ELEMENT_NODE
				getOboNodesFromHTMLHelper node, clone, null, chunkClipboard, usedChunkClipboardIds


module.exports = getOboNodesFromHTML